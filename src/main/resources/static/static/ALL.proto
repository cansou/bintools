package com.wechat;

//==================== 外部接口 ====================

message AutoPack {
    required int32 Type = 1;
    required bytes AutoKey = 2;
    required bytes Session = 3;
    required bytes Cookie = 4;
    required uint64 Uin = 5;
    required string Wxid = 6;
    required string Nickname = 7;
    required string ShortServer = 8;
    required string LongServer = 9;
    required bytes Seeds = 10;
}

message CheckRequest {
    required bytes Seeds = 1; //特性种子参数
    optional string OsVersion = 2; //9.3.3
    optional string DeviceModel = 3; //iPad
    optional string DeviceVersion = 4; //iPad4,2
    optional int32 WeixinVersion = 5; //369558050
    optional string Ssid = 6; //TP-LINK_941A
    optional string Bssid = 7; //e4:d3:32:bc:94:1a
}

message SaeData {
    required bytes Type = 1;
    required bytes Iv = 2;
    required int32 Len = 3;
    required bytes Unknown9 = 9;
    required bytes TableKey = 10;
    required bytes Unknown11 = 11;
    required bytes TableValue = 12;
    required bytes Unknown18 = 18;
}

//==================== 功能部分 ====================

message SnsPostOperationFields {
    optional string ShareUrlOriginal = 1;
    optional string ShareUrlOpen = 2;
    optional string JsAppid = 3;
    optional uint32 ContactTagCount = 4;
    optional uint32 TempUserCount = 5;
}

enum SnsMediaType {
    MMSNS_DATA_OK = 0;
    MMSNS_DATA_TEXT = 1;
    MMSNS_DATA_PHOTO = 2;
    MMSNS_DATA_VOICE = 3;
    MMSNS_DATA_VIDEO = 4;
    MMSNS_DATA_MUSIC = 5;
    MMSNS_DATA_SIGHT = 6;
}

message MediaInfo {
    optional uint32 Source = 1;
    optional SnsMediaType MediaType = 2;
    optional uint32 VideoPlayLength = 3;
    optional string SessionId = 4;
    optional uint32 StartTime = 5;
}

message SnsWeAppInfo {
    optional string MapPoiId = 1;
    optional uint32 AppId = 2;
    optional string UserName = 3;
    optional string RedirectUrl = 4;
    optional uint32 ShowType = 5;
    optional uint32 Score = 6;
}

message ClientCheckData {
    optional string Type = 1;
    optional int32 IsCheck = 2;
    optional bytes CheckData = 3;
}

message LogoutRequest {
    required BaseRequest BaseRequest = 1;
    optional uint32 Scene = 2;
}

message LogoutResponse {
    required BaseResponse BaseResponse = 1;
}

message AppMsg {
    optional string FromUserName = 1;
    optional string AppId = 2;
    required uint32 SdkVersion = 3;
    optional string ToUserName = 4;
    required uint32 Type = 5;
    optional string Content = 6;
    required uint32 CreateTime = 7;
    optional string ClientMsgId = 8;
    optional SKBuiltinBuffer_t Thumb = 9;
    optional int32 Source = 10;
    optional int32 RemindId = 11;
    optional string MsgSource = 12;
    optional string ShareUrlOriginal = 13;
    optional string ShareUrlOpen = 14;
    optional string JsAppId = 15;
}

message SendAppMsgRequest {
    required BaseRequest BaseRequest = 1;
    required AppMsg Msg = 2;
    optional string CommentUrl = 3;
    optional uint32 ReqTime = 4;
    optional string Md5 = 5;
    optional uint32 FileType = 6;
    optional string Signature = 7;
    optional string FromSence = 8;
    optional uint32 HitMd5 = 9;
    optional uint32 CRC32 = 10;
    optional uint32 MsgForwardType = 11;
}

message SendAppMsgResponse {
    required BaseResponse BaseResponse = 1;
    optional string AppId = 2;
    optional string FromUserName = 3;
    optional string ToUserName = 4;
    required uint32 MsgId = 5;
    optional string ClientMsgId = 6;
    required uint32 CreateTime = 7;
    optional uint32 Type = 8;
    optional uint64 NewMsgId = 9;
    optional string AESKey = 10;
}

message DownloadAppAttachRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppId = 2;
    required uint32 SdkVersion = 3;
    optional string MediaId = 4;
    optional string UserName = 5;
    required uint32 TotalLen = 6;
    required uint32 StartPos = 7;
    required uint32 DataLen = 8;
    optional string OutFmt = 9;
    optional int32 Rotation = 10;
    optional uint32 Type = 11;
    optional uint32 CDNType = 12;
}

message DownloadAppAttachResponse {
    required BaseResponse BaseResponse = 1;
    optional string AppId = 2;
    optional string MediaId = 3;
    optional string UserName = 4;
    required uint32 TotalLen = 5;
    required uint32 StartPos = 6;
    required uint32 DataLen = 7;
    required SKBuiltinBuffer_t Data = 8;
}

message OpenAppInfo {
    optional string AppID = 1;
    optional string AppName = 2;
    optional string AppDescription = 3;
    optional string AppIconUrl = 4;
    optional string AppStoreUrl = 5;
    required uint32 AppVersion = 6;
    optional string AppWatermarkUrl = 7;
    optional string AndroidPackageName = 8;
    optional string AndroidSignature = 9;
    optional string AppName4EnUS = 10;
    optional string AppDescription4EnUS = 11;
    optional string AppName4ZhTW = 12;
    optional string AppDescription4ZhTW = 13;
    optional uint32 AppInfoFlag = 14;
}

message GetAppInfoRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 IconType = 3;
}

message GetAppInfoResponse {
    required BaseResponse BaseResponse = 1;
    required OpenAppInfo AppInfo = 2;
    optional uint32 NoUse = 3;
    optional string DevInfo = 4;
    optional string AppType = 5;
}

message GetRecommendAppListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Start = 2;
    required uint32 Count = 3;
    optional string InstalledList = 4;
    required uint32 IconType = 5;
}

message GetRecommendAppListResponse {
    required uint32 Total = 1;
    required BaseResponse BaseResponse = 2;
    required uint32 Count = 3;
    repeated OpenAppInfo AppList = 4;
}

message CheckPCWechatFileRequest {
    optional string FileName = 1;
    optional string MD5 = 2;
    optional string FileId = 3;
    optional string AesKey = 4;
    optional string FromUsername = 5;
    optional string ToUsername = 6;
}

message CheckPCWechatFileResponse {
    required BaseResponse BaseResponse = 1;
    optional int32 BlockStatus = 2;
}

//==================== mmbackup ====================

message ConnectInfoAddr {
    optional string IP = 1;
    repeated uint32 Port = 2;
    optional uint32 PortCount = 3;
}

message BakChatCreateQRCodeRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 AddrCount = 2;
    repeated ConnectInfoAddr AddrList = 3;
    optional string PCName = 4;
    optional string PCAcctName = 5;
    required uint32 Scene = 6;
    optional uint64 DataSize = 7;
    optional string WifiName = 8;
    optional int32 Op = 9;
}

message BakChatCreateQRcodeResponse {
    required uint32 Ret = 1;
    required SKBuiltinBuffer_t QRCodeBuffer = 2;
    optional string QRCodeUrl = 3;
    required SKBuiltinBuffer_t Key = 4;
    optional string Hello = 5;
    optional string OK = 6;
    required uint32 EncryFlag = 7;
    optional string ID = 8;
    optional string Tickit = 9;
}

message PacketAuthenticateRequest {
    required int32 Step = 1; //当前步骤 AuthenticateStepEnum
    required string ID = 2; //微信生成的ID
    optional bytes Data = 3; //附加数据
    optional int32 Version = 4;
    optional int32 Type = 5;
    optional int32 SupportExt = 6;
}

message PacketAuthenticateResponse {
    required int32 Step = 1; //当前步骤 AuthenticateStepEnum
    required int32 Status = 2; //错误码 StatusEnum
    required string ID = 3; //微信生成的ID
    optional bytes Data = 4; //附加数据
    optional int32 Version = 5;
    optional int32 Type = 6;
    optional int32 SupportExt = 7;
}

message BackupStartGeneralInfo {
    required string DeviceID = 1; //唯一区别设备的id
    required string DeviceName = 2; //设备名称
    required string Model = 3; //设备型号
    required string SystemName = 4; //系统名称
    required string SystemVersion = 5; //系统版本
    required uint32 WechatVersion = 6; //微信版本
    required uint64 DeviceFreeSpace = 7; //设备剩余空间
}

message BackupStartRequest {
    required string ID = 1;
    optional uint64 BigDataSize = 2;
    optional uint64 SessionCount = 3;
    optional uint64 MsgCount = 4;
    optional BackupStartGeneralInfo GeneralInfo = 5;
    optional uint64 DataSize = 6; //此次传输的数据量大小
    optional int32 TransferType = 7; //这次传输的类型TransferTypeEnum
}

message BackupStartResponse {
    required string ID = 1;
    required uint64 TotalCount = 2;
    required uint64 TotalSize = 3;
    required int32 Status = 4; //对应的StartResponseStatusEnum枚举值
    optional uint32 NetworkState = 5;
    optional uint64 BigDataSize = 6;
    optional BackupStartGeneralInfo GeneralInfo = 7;
}

message BackupRequestSession {
    repeated string SessionName = 1;
    repeated int64 TimeInterval = 2;
}

message BackupRequestSessionResponse {
    repeated string SessionName = 1;
    repeated int64 TimeInterval = 2;
}

message PacketBackupDataPush {
    required string DataID = 1; //数据块ID
    required int32 DataType = 2; //数据块类型 DataTypeEnum
    required int32 DataSize = 3; //数据块的大小
    required int32 StartOffset = 4; //本次数据在当前数据块中的开始偏移
    required int32 EndOffset = 5; //本次数据在当前数据块中的结束偏移
    optional int32 CheckSum = 6; //Data的校验和
    optional bytes Data = 7; //附加数据
    optional int32 Progress = 8; //进度
}

message PacketBackupDataResponse {
    required string DataID = 1; //数据块ID
    required int32 DataType = 2; //数据块类型 DataTypeEnum
    required int32 StartOffset = 3; //本次数据在当前数据块中的开始偏移
    required int32 EndOffset = 4; //本次数据在当前数据块中的结束偏移
    required int32 Status = 5; //状态码 StatusEnum
}

message PacketSvrIDRequest {
    repeated uint64 SvrID = 1;
    repeated string MediaID = 2;
    repeated string MD5 = 3;
    required string BakChatName = 4;
}

message PacketSvrIDResponse {
    repeated uint64 SvrID = 1;
    repeated string MediaID = 2;
    repeated string MD5 = 3;
    required string BakChatName = 4;
}

message PacketBackupDataTag {
    required string BakChatName = 1;
    required int64 StartTime = 2;
    required int64 EndTime = 3;
    required string MsgDataID = 4;
    required string NickName = 5;
    repeated string MediaIDList = 6;
}

message PacketBackupDataTagResponse {
    required string BakChatName = 1;
    required int64 StartTime = 2;
    required int64 EndTime = 3;
    required string MsgDataID = 4;
}

message BackupReportItem {
    required string BakChatName = 1;
    required uint32 MsgCount = 2;
}

message BackupReportList {
    required uint32 Count = 1;
    repeated BackupReportItem List = 2;
}

message BackupFinishRequest {
    required string ID = 1;
    optional BackupReportList Data = 2;
    optional uint32 ServerSessionCount = 3;
    optional uint32 ServerMessageCount = 4;
    optional uint32 ServerFileCount = 5;
    optional uint32 CalculateSize = 6;
    optional uint32 ServerDataPushSize = 7;
    optional uint32 ServerReadDBTotalTime = 8;
    optional uint32 ServerReadFileTotalTime = 9;
    optional uint32 ServerCostTotalTime = 10;
    optional uint32 ServerVersion = 11;
}

message BackupCommandRequest {
    required int32 Command = 1; //CommandTypeEnum
    optional bytes Data = 2;
}

message BackupCommandResponse {
    required int32 Command = 1; //CommandTypeEnum
    optional bytes Data = 2;
}

enum TransferTypeEnum {
    TRANSFER_NEW = 0; //全新
    TRANSFER_ADDON = 1; //增量
}

enum CommandTypeEnum {
    COMMAND_REQUEST_TO_BACKUP = 1; //请求开始备份
    COMMAND_CONFIRM_BACKUP = 2; //确认可以备份
    COMMAND_REQUEST_TO_RECOVER = 3; //请求开始恢复
    COMMAND_CONFIRM_RECOVER = 4; //确认可以恢复
    COMMAND_REQUEST_TO_CONTINUE_BACKUP = 5; //请求继续备份
    COMMAND_CONFIRM_CONTINUE_BACKUP = 6; //确认可以继续备份
    COMMAND_REQUEST_TO_CONTINUE_RECOVER = 7; //请求继续恢复
    COMMAND_CONFIRM_CONTINUE_RECOVER = 8; //确认可以继续恢复
}

enum StartResponseStatusEnum {
    START_RESPONSE_SUCCESS = 0; //状态成功
    START_RESPONSE_ID_WRONG = 1; //id比对不上
    START_RESPONSE_SIZE_WRONG = 2; //空间不足
}

message DataConfigInf {
    required string UserName = 1;
    optional string Deviceid = 2;
    optional uint32 CreateTime = 3;
    optional uint32 LastModifyTime = 4;
    optional BackupStartGeneralInfo DeviceInfo = 5;
}

message BackupCancelRequest {
    required string ID = 1;
    optional uint32 Reason = 2;
}

message GetConnectInfoRequest {
    required BaseRequest BaseRequest = 1;
    optional string URL = 2;
}

message GetConnectInfoResponse {
    required BaseResponse BaseResponse = 1;
    optional string ID = 2;
    required SKBuiltinBuffer_t Key = 3;
    optional string Hello = 4;
    optional string OK = 5;
    required uint32 Type = 6;
    required uint32 AddrCount = 7;
    repeated ConnectInfoAddr AddrList = 8;
    optional string Resource = 9;
    optional string PCName = 10;
    optional string PCAcctName = 11;
    optional uint32 EncryFlag = 12;
    optional uint32 Scene = 13;
    optional uint64 DataSize = 14;
    optional string WifiName = 15;
}

message BackupHeartBeatRequest {
    required uint64 ack = 1;
}

message BackupHeartBeatResponse {
    required uint64 ack = 1;
}

//==================== mmbase ====================

message BuiltinIP {
    required uint32 type = 1;
    required uint32 port = 2;
    optional bytes IP = 3;
    optional bytes Domain = 4;
}

message BuiltinIPList {
    required uint32 LongConnectIPCount = 1;
    required uint32 ShortConnectIPCount = 2;
    required uint32 Seq = 5;
    repeated BuiltinIP LongConnectIPList = 3;
    repeated BuiltinIP ShortConnectIPList = 4;
}

message NetworkControl {
    optional string PortList = 1;
    optional string TimeoutList = 2;
    optional uint32 MinNoopInterval = 3;
    optional uint32 MaxNoopInterval = 4;
    optional int32 TypingInterval = 5;
    optional int32 NoopIntervalTime = 7;
}

message PluginKey {
    optional string Key = 1;
    optional uint32 Id = 2;
}

message PluginKeyList {
    required uint32 Count = 1;
    repeated PluginKey List = 2;
}

message Host {
    optional string Origin = 1;
    optional string Substitute = 2;
    optional int32 Priority = 3;
}

message HostList {
    required uint32 Count = 1;
    repeated Host List = 2;
}

message PositionInfo {
    required float Longitude = 1;
    required float Latitude = 2;
    required int32 Precision = 3;
    optional string MacAddr = 4;
    optional string CellId = 5;
    required int32 GPSSource = 6;
}

message SnsUserInfo {
    required uint32 SnsFlag = 1;
    optional string SnsBGImgID = 2;
    optional uint64 SnsBGObjectID = 3;
    optional uint32 SnsFlagEx = 4;
}

message CustomizedInfo {
    required uint32 BrandFlag = 1;
    optional string ExternalInfo = 2;
    optional string BrandInfo = 3;
    optional string BrandIconURL = 4;
}

message CmdItem {
    required int32 CmdId = 1;
    required SKBuiltinBuffer_t CmdBuf = 2;
}

message CmdList {
    required uint32 Count = 1;
    repeated CmdItem List = 2;
}

message ShakeSyncRequest {
    required BaseRequest BaseRequest = 1;
    required float Longitude = 2;
    required float Latitude = 3;
    required int32 Precision = 4;
    optional string MacAddr = 5;
    optional string CellId = 6;
    required uint32 ImgId = 7;
    required uint32 Times = 8;
}

message ShakeSyncResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t Buffer = 2;
    required uint32 Ret = 3;
    required uint32 ImgId = 4;
    required uint32 ImgTotoalLen = 5;
}

message BindEmailRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string Email = 3;
}

message BindEmailResponse {
    required BaseResponse BaseResponse = 1;
}

message GetLocationRequest {
    required BaseRequest BaseRequest = 1;
    required int32 Longitude = 3;
    required int32 Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    optional int32 GPSSource = 8;
}

message GetLocationResponse {
    required BaseResponse BaseResponse = 1;
    required int32 Longitude = 2;
    required int32 Latitude = 3;
}

message RoomInfo {
    required SKBuiltinString_t UserName = 1;
    required SKBuiltinString_t NickName = 2;
}

message CDNDnsInfo {
    required uint32 Ver = 1;
    required uint32 Uin = 2;
    required uint32 ExpireTime = 3;
    required int32 FrontID = 4;
    required int32 FrontIPCount = 5;
    repeated SKBuiltinString_t FrontIPList = 6;
    optional string ZoneDomain = 7;
    required SKBuiltinBuffer_t AuthKey = 8;
    required int32 ZoneID = 9;
    required int32 ZoneIPCount = 10;
    repeated SKBuiltinString_t ZoneIPList = 11;
}

message StyleKeyVal {
    required uint32 Key = 1;
    optional string Val = 2;
}

message ShowStyleKey {
    required uint32 KeyCount = 1;
    repeated StyleKeyVal Key = 2;
}

message SafeDevice {
    optional string Name = 1;
    optional string Uuid = 2;
    optional string DeviceType = 3;
    required uint32 CreateTime = 4;
}

message SafeDeviceList {
    required uint32 Count = 1;
    repeated SafeDevice List = 2;
}

message MemberReq {
    required SKBuiltinString_t MemberName = 1;
}

message MemberResp {
    required SKBuiltinString_t MemberName = 1;
    required uint32 MemberStatus = 2;
    required SKBuiltinString_t NickName = 3;
    required SKBuiltinString_t PYInitial = 4;
    required SKBuiltinString_t QuanPin = 5;
    required int32 Sex = 6;
    required SKBuiltinString_t Remark = 9;
    required SKBuiltinString_t RemarkPYInitial = 10;
    required SKBuiltinString_t RemarkQuanPin = 11;
    required uint32 ContactType = 12;
    optional string Province = 13;
    optional string City = 14;
    optional string Signature = 15;
    optional uint32 PersonalCard = 16;
    optional uint32 VerifyFlag = 17;
    optional string VerifyInfo = 18;
    optional string Country = 19;
}

message DelMemberReq {
    required SKBuiltinString_t MemberName = 1;
}

message DelMemberResp {
    required SKBuiltinString_t MemberName = 1;
}

message DisturbTimeSpan {
    required uint32 BeginTime = 1;
    required uint32 EndTime = 2;
}

message DisturbSetting {
    required uint32 NightSetting = 1;
    required DisturbTimeSpan NightTime = 2;
    required uint32 AllDaySetting = 3;
    required DisturbTimeSpan AllDayTime = 4;
}

message GmailInfo {
    optional string GmailAcct = 1;
    required uint32 GmailSwitch = 2;
    required uint32 GmailErrCode = 3;
}

message GmailList {
    required uint32 Count = 1;
    repeated GmailInfo List = 2;
}

message LinkedinContactItem {
    optional string LinkedinName = 1;
    optional string LinkedinMemberID = 2;
    optional string LinkedinPublicUrl = 3;
}

message AdditionalContactList {
    optional LinkedinContactItem LinkedinContactItem = 1;
}

message ChatRoomMemberInfo {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string DisplayName = 3;
    optional string BigHeadImgUrl = 4;
    optional string SmallHeadImgUrl = 5;
    required uint32 ChatroomMemberFlag = 6;
}

message ChatRoomMemberData {
    required uint32 MemberCount = 1;
    repeated ChatRoomMemberInfo ChatRoomMember = 2;
    optional uint32 InfoMask = 3;
}

message PatternLockInfo {
    optional uint32 PatternVersion = 1;
    optional SKBuiltinBuffer_t Sign = 2;
    optional uint32 LockStatus = 3;
}

message ModUserInfo {
    required uint32 BitFlag = 1;
    required SKBuiltinString_t UserName = 2;
    required SKBuiltinString_t NickName = 3;
    required uint32 BindUin = 4;
    required SKBuiltinString_t BindEmail = 5;
    required SKBuiltinString_t BindMobile = 6;
    required uint32 Status = 7;
    required uint32 ImgLen = 8;
    optional bytes ImgBuf = 9;
    optional int32 Sex = 10;
    optional string Province = 11;
    optional string City = 12;
    optional string Signature = 13;
    optional uint32 PersonalCard = 14;
    optional DisturbSetting DisturbSetting = 15;
    optional uint32 PluginFlag = 16;
    optional uint32 VerifyFlag = 17;
    optional string VerifyInfo = 18;
    optional int32 Point = 19;
    optional int32 Experience = 20;
    optional int32 Level = 21;
    optional int32 LevelLowExp = 22;
    optional int32 LevelHighExp = 23;
    optional string Weibo = 24;
    optional uint32 PluginSwitch = 25;
    optional GmailList GmailList = 26;
    optional string Alias = 27;
    optional string WeiboNickname = 28;
    optional uint32 WeiboFlag = 29;
    optional uint32 FaceBookFlag = 30;
    optional uint64 FBUserID = 31;
    optional string FBUserName = 32;
    optional int32 AlbumStyle = 33;
    optional int32 AlbumFlag = 34;
    optional string AlbumBGImgID = 35;
    optional uint32 TXNewsCategory = 36;
    optional string FBToken = 37;
    optional string Country = 38;
}

message UserInfoExt {
    required SnsUserInfo SnsUserInfo = 1;
    optional string MyBrandList = 2;
    optional string MsgPushSound = 3;
    optional string VoipPushSound = 4;
    optional uint32 BigChatRoomSize = 5;
    optional uint32 BigChatRoomQuota = 6;
    optional uint32 BigChatRoomInvite = 7;
    optional string SafeMobile = 8;
    optional string BigHeadImgUrl = 9;
    optional string SmallHeadImgUrl = 10;
    optional uint32 MainAcctType = 11;
    optional SKBuiltinString_t ExtXml = 12;
    optional SafeDeviceList SafeDeviceList = 13;
    optional uint32 SafeDevice = 14;
    optional uint32 GrayscaleFlag = 15;
    optional string GoogleContactName = 16;
    optional string IDCardNum = 17;
    optional string RealName = 18;
    optional string RegCountry = 19;
    optional string BBPPID = 20;
    optional string BBPIN = 21;
    optional string BBMNickName = 22;
    optional LinkedinContactItem LinkedinContactItem = 23;
    optional string KFInfo = 24;
    optional PatternLockInfo PatternLockInfo = 25;
    optional string SecurityDeviceId = 26;
    optional uint32 PayWalletType = 27;
}

message ModContact {
    required SKBuiltinString_t UserName = 1;
    required SKBuiltinString_t NickName = 2;
    required SKBuiltinString_t PYInitial = 3;
    required SKBuiltinString_t QuanPin = 4;
    required int32 Sex = 5;
    required SKBuiltinBuffer_t ImgBuf = 6;
    required uint32 BitMask = 7;
    required uint32 BitVal = 8;
    required uint32 ImgFlag = 9;
    optional SKBuiltinString_t Remark = 10;
    optional SKBuiltinString_t RemarkPYInitial = 11;
    optional SKBuiltinString_t RemarkQuanPin = 12;
    optional uint32 ContactType = 13;
    optional uint32 RoomInfoCount = 14;
    repeated RoomInfo RoomInfoList = 15;
    optional SKBuiltinString_t DomainList = 16;
    optional uint32 ChatRoomNotify = 17;
    optional uint32 AddContactScene = 18;
    optional string Province = 19;
    optional string City = 20;
    optional string Signature = 21;
    optional uint32 PersonalCard = 22;
    optional uint32 HasWeiXinHdHeadImg = 23;
    optional uint32 VerifyFlag = 24;
    optional string VerifyInfo = 25;
    optional int32 Level = 26;
    optional uint32 Source = 27;
    optional string Weibo = 28;
    optional string VerifyContent = 29;
    optional string Alias = 30;
    optional string ChatRoomOwner = 31;
    optional string WeiboNickname = 32;
    optional uint32 WeiboFlag = 33;
    optional int32 AlbumStyle = 34;
    optional int32 AlbumFlag = 35;
    optional string AlbumBGImgID = 36;
    optional SnsUserInfo SnsUserInfo = 37;
    optional string Country = 38;
    optional string BigHeadImgUrl = 39;
    optional string SmallHeadImgUrl = 40;
    optional string MyBrandList = 41;
    optional CustomizedInfo CustomizedInfo = 42;
    optional string ChatRoomData = 43;
    optional string HeadImgMd5 = 44;
    optional string EncryptUserName = 45;
    optional string IDCardNum = 46;
    optional string RealName = 47;
    optional string MobileHash = 48;
    optional string MobileFullHash = 49;
    optional AdditionalContactList AdditionalContactList = 50;
    optional uint32 ChatroomVersion = 53;
    optional string ExtInfo = 54;
    optional uint32 ChatroomMaxCount = 55;
    optional uint32 ChatroomType = 56;
    optional ChatRoomMemberData NewChatroomData = 57;
    optional int32 DeleteFlag = 58;
    optional string Description = 59;
    optional string CardImgUrl = 60;
    optional string LabelIDList = 61;
}

message HardDevice {
    optional string DeviceType = 1;
    optional string DeviceID = 2;
}

message BaseRequest {
    required bytes SessionKey = 1;
    required uint32 Uin = 2;
    required bytes DeviceID = 3;
    required int32 ClientVersion = 4;
    required bytes DeviceType = 5;
    optional uint32 Scene = 6;
}

message BaseResponse {
    required int32 Ret = 1;
    required SKBuiltinString_t ErrMsg = 2;
}

message SKBuiltinInt32_t {
    required uint32 iVal = 1;
}

message SKBuiltinUint32_t {
    required uint32 uiVal = 1;
}

message SKBuiltinChar_t {
    required int32 iVal = 1;
}

message SKBuiltinUchar_t {
    required uint32 uiVal = 1;
}

message SKBuiltinInt8_t {
    required int32 iVal = 1;
}

message SKBuiltinUint8_t {
    required uint32 uiVal = 1;
}

message SKBuiltinInt16_t {
    required int32 iVal = 1;
}

message SKBuiltinUint16_t {
    required uint32 uiVal = 1;
}

message SKBuiltinInt64_t {
    required int64 llVal = 1;
}

message SKBuiltinUint64_t {
    required uint64 ullVal = 1;
}

message SKBuiltinFloat32_t {
    required float fVal = 1;
}

message SKBuiltinDouble64_t {
    required double dVal = 1;
}

message SKBuiltinBuffer_t {
    required uint32 iLen = 1;
    optional bytes Buffer = 2;
}

message SKBuiltinString_t {
    optional string String = 1;
}

//==================== mmcard ====================

message CardUserItem {
    optional string CardId = 1;
    optional uint64 UpdateSequence = 2;
    optional uint32 StateFlag = 3;
    optional uint32 UpdateTime = 4;
    optional uint32 Status = 5;
}
message BatchDelCardItemRequest {
    required BaseRequest BaseRequest = 1;
    repeated string card_ids = 2;
}

message BatchDelCardItemResponse {
    required BaseResponse BaseResponse = 1;
    repeated string succ_card_ids = 2;
}

message BatchGetCardItemRequest {
    required BaseRequest BaseRequest = 1;
    repeated string card_ids = 2;
}

message BatchGetCardItemResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
}

message CardSyncRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Selector = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
}

message CardSyncResponse {
    required BaseResponse BaseResponse = 1;
    required CmdList CmdList = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
    required uint32 ContinueFlag = 4;
}

message CardShopLBSRequest {
    required BaseRequest BaseRequest = 1;
    optional string card_tp_id = 2;
    required float longitude = 3;
    required float latitude = 4;
}

message CardShopLBSResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
}

message GetCardSerialRequest {
    required BaseRequest BaseRequest = 1;
    required string card_id = 2;
}

message GetCardSerialResponse {
    required BaseResponse BaseResponse = 1;
    optional string serial_number = 2;
}
message GetCardItemInfoRequest {
    required BaseRequest BaseRequest = 1;
    required string card_id = 2;
    required uint32 from_scene = 3;
    optional string from_username = 4;
    optional string card_ext = 5;
    optional string js_checkinfo_url = 6;
    optional string js_checkinfo_session_username = 7;
}

message GetCardItemInfoResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
}

message GiftCardItemRequest {
    required BaseRequest BaseRequest = 1;
    required string card_id = 2;
    required string to_username = 3;
}
message GiftCardItemResponse {
    required BaseResponse BaseResponse = 1;
    optional string card_ext = 2;
    optional int32 ret_code = 3;
    required string ret_msg = 4;
}
message AcceptCardItemRequest {
    required BaseRequest BaseRequest = 1;
    optional string from_username = 2;
    required uint32 from_scene = 3;
    required string card_id = 4;
    optional string card_ext = 5;
}
message AcceptCardItemResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
    optional int32 ret_code = 3;
    optional string ret_msg = 4;
}
message GetCardCountRequest {
    required BaseRequest BaseRequest = 1;
}
message GetCardCountResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 count = 2;
}
message GetAvailableCardRequest {
    required BaseRequest BaseRequest = 1;
    optional string app_id = 2;
    optional uint32 shop_id = 3;
    optional string sign_type = 4;
    optional string card_sign = 5;
    optional uint32 time_stamp = 6;
    optional string nonce_str = 7;
    optional string card_tp_id = 8;
    optional string card_type = 9;
}
message GetAvailableCardResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
}

message CardListItem {
    optional string card_tp_id = 1;
    optional string card_ext = 2;
    optional int32 is_succ = 3;
}
message CardListItems {
    repeated CardListItem card_list = 1;
}

message GetCardListFromAppRequest {
    required BaseRequest BaseRequest = 1;
    repeated CardListItem card_list = 2;
    optional uint32 from_scene = 3;
    optional string bundle_id = 4;
    optional string package_name = 5;
    optional string sign = 6;
}

message GetCardListFromAppResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
}


message AcceptCardListFromAppRequest {
    required BaseRequest BaseRequest = 1;
    repeated CardListItem card_list = 2;
    optional uint32 from_scene = 3;
}

message AcceptCardListFromAppResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
    optional int32 ret_code = 3;
    optional string ret_msg = 4;
}

message GetCardConfigInfoRequest {
    required BaseRequest BaseRequest = 1;
}

message GetCardConfigInfoResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
}

message CardDataInfo {
    optional string card_id = 1;
}

message BatchGetCardItem {
    optional string card_id = 1;
    optional CardDataInfo card_data_info = 2;
}

message BatchGetCardArray {
    repeated BatchGetCardItem card_array = 1;
}

message CardTpInfoItem {
    optional string card_tp_id = 1;
    optional string code = 2;
}

message BatchGetCardItemByTpInfoRequest {
    required BaseRequest BaseRequest = 1;
    repeated CardTpInfoItem items = 2;
}

message BatchGetCardItemByTpInfoResponse {
    required BaseResponse BaseResponse = 1;
    optional string json_ret = 2;
}

message GetBrandListRequestBuffer {
    required uint32 Count = 1;
    required uint32 HiddenCount = 2;
}

message GetBrandListRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    optional SKBuiltinBuffer_t RequestBuffer = 3;
}

message GetBrandListResponse {
    required BaseResponse BaseResponse = 1;
    optional string BrandList = 2;
    required SKBuiltinBuffer_t RequestBuffer = 3;
}

message APPItem {
    optional string UserName = 1;
}

message SetAPPListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated APPItem List = 3;
}

message SetAPPListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Hash = 2;
}

message GetAPPListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Hash = 2;
}

message GetAPPListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated APPItem List = 3;
    required uint32 Hash = 4;
}

message SearchQRCodeReq {
    required BaseRequest BaseRequest = 1;
    optional string QRCode = 2;
}

message SearchQRCodeResp {
    required BaseResponse BaseResponse = 1;
    required uint32 Type = 2;
    optional string URL = 3;
}

message SearchContactRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    optional uint32 OpCode = 3;
    optional SKBuiltinBuffer_t ReqBuf = 4;
    optional uint32 FromScene = 5;
    optional uint32 SearchScene = 6;
}

message SearchContactItem {
    required SKBuiltinString_t UserName = 1;
    required SKBuiltinString_t NickName = 2;
    required SKBuiltinString_t PYInitial = 3;
    required SKBuiltinString_t QuanPin = 4;
    required int32 Sex = 5;
    required SKBuiltinBuffer_t ImgBuf = 6;
    optional string Province = 7;
    optional string City = 8;
    optional string Signature = 9;
    optional uint32 PersonalCard = 10;
    optional uint32 VerifyFlag = 11;
    optional string VerifyInfo = 12;
    optional string Weibo = 13;
    optional string Alias = 14;
    optional string WeiboNickname = 15;
    optional uint32 WeiboFlag = 16;
    optional int32 AlbumStyle = 17;
    optional int32 AlbumFlag = 18;
    optional string AlbumBGImgID = 19;
    optional SnsUserInfo SnsUserInfo = 20;
    optional string Country = 21;
    optional string MyBrandList = 22;
    optional CustomizedInfo CustomizedInfo = 23;
    optional string BigHeadImgUrl = 24;
    optional string SmallHeadImgUrl = 25;
    optional string AntispamTicket = 26;
    optional uint32 MatchType = 27;
}

message SearchContactResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinString_t UserName = 2;
    required SKBuiltinString_t NickName = 3;
    required SKBuiltinString_t PYInitial = 4;
    required SKBuiltinString_t QuanPin = 5;
    required int32 Sex = 6;
    required SKBuiltinBuffer_t ImgBuf = 7;
    optional string Province = 8;
    optional string City = 9;
    optional string Signature = 10;
    optional uint32 PersonalCard = 11;
    optional uint32 VerifyFlag = 12;
    optional string VerifyInfo = 13;
    optional string Weibo = 14;
    optional string Alias = 15;
    optional string WeiboNickname = 16;
    optional uint32 WeiboFlag = 17;
    optional int32 AlbumStyle = 18;
    optional int32 AlbumFlag = 19;
    optional string AlbumBGImgID = 20;
    optional SnsUserInfo SnsUserInfo = 21;
    optional string Country = 22;
    optional string MyBrandList = 23;
    optional CustomizedInfo CustomizedInfo = 24;
    optional uint32 ContactCount = 25;
    repeated SearchContactItem ContactList = 26;
    optional string BigHeadImgUrl = 27;
    optional string SmallHeadImgUrl = 28;
    optional SKBuiltinBuffer_t ResBuf = 29;
    optional string AntispamTicket = 30;
    optional string KFWorkerID = 31;
    optional uint32 MatchType = 32;
}

message GroupCardReq {
    optional string GroupCardName = 1;
}

message RadarMember {
    optional string MemberName = 1;
}

message RadarCreateChatRoomParameter {
    optional string Ticket = 1;
    optional uint32 RadarMemberCount = 2;
    repeated RadarMember RadarMemberList = 3;
}

message CreateChatRoomRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t Topic = 2;
    required uint32 MemberCount = 3;
    repeated MemberReq MemberList = 4;
    optional uint32 Scene = 5;
    optional SKBuiltinBuffer_t ExtBuffer = 6;
}

message CreateChatRoomResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinString_t Topic = 2;
    required SKBuiltinString_t PYInitial = 3;
    required SKBuiltinString_t QuanPin = 4;
    required uint32 MemberCount = 5;
    repeated MemberResp MemberList = 6;
    required SKBuiltinString_t ChatRoomName = 7;
    required SKBuiltinBuffer_t ImgBuf = 8;
    optional string BigHeadImgUrl = 9;
    optional string SmallHeadImgUrl = 10;
}

message AddChatRoomMemberRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MemberCount = 2;
    repeated MemberReq MemberList = 3;
    required SKBuiltinString_t ChatRoomName = 4;
}

message AddChatRoomMemberResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MemberCount = 2;
    repeated MemberResp MemberList = 3;
}

message DelChatRoomMemberRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MemberCount = 2;
    repeated DelMemberReq MemberList = 3;
    optional string ChatRoomName = 4;
    optional uint32 Scene = 5;
}

message DelChatRoomMemberResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MemberCount = 2;
    repeated DelMemberResp MemberList = 3;
}

message CollectChatRoomReq {
    required BaseRequest BaseRequest = 1;
    required uint32 GroupCardCount = 2;
    repeated GroupCardReq GroupCardList = 3;
}

message CollectChatRoomResp {
    required BaseResponse BaseResponse = 1;
}

message BatchGetHeadImgRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated SKBuiltinString_t UserNameList = 3;
}

message ImgPair {
    required SKBuiltinBuffer_t ImgBuf = 1;
    required SKBuiltinString_t Username = 2;
}

message BatchGetHeadImgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated ImgPair ImgPairList = 3;
}

message SearchFriendRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
}

message FriendInfo {
    optional string DisplayUserName = 1;
    optional string DisplayNickName = 2;
    optional string DisplayRemark = 3;
    optional string WXUserName = 4;
    optional string WXNickName = 5;
    optional string WXRemark = 6;
    required uint32 Type = 7;
    required uint32 Status = 8;
    optional string Source = 9;
    optional uint32 MatchField = 10;
    optional string Alias = 11;
}

message SearchFriendResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 FriendCount = 2;
    repeated FriendInfo FriendList = 3;
}

message GetChatRoomUpgradeInfoReq {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
    optional uint32 Scene = 3;
}

message GetChatRoomUpgradeInfoResp {
    required BaseResponse BaseResponse = 1;
    optional string ChatRoomUpgradeInfo = 2;
}

message KeyValStr {
    required uint32 Key = 1;
    optional string Val = 2;
}

message GetDonateInfoReq {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    required uint32 Scene = 3;
    optional string ExtInfo = 4;
}

message GetDonateInfoResp {
    required BaseResponse BaseResponse = 1;
    optional string DonateInfo = 3;
}

message GetPayPurchasePackageReq {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    required uint32 Price = 3;
    optional string PriceType = 4;
    optional string ExtInfo = 5;
}

message GetPayPurchasePackageResp {
    required BaseResponse BaseResponse = 1;
    optional string Package = 2;
    optional string ExtInfo = 3;
}

message VerifyPayTransitionReq {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    optional string OutTradeNo = 3;
    optional string ExtInfo = 4;
}

message VerifyPayTransitionResp {
    required BaseResponse BaseResponse = 1;
    optional string ResultMsg = 2;
}

message GetChatRoomDonateHistoryReq {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
}

message Donor {
    required uint32 Time = 1;
    optional string UserName = 2;
    optional string NickName = 3;
    optional string DonateTitle = 4;
    optional string DonateUrl = 5;
}

message GetChatRoomDonateHistoryResp {
    required BaseResponse BaseResponse = 1;
    required uint32 TotalCount = 2;
    repeated Donor List = 3;
}

message GetChatRoomPresentHistoryReq {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
}

message Presentation {
    required uint32 Time = 1;
    optional string UserName = 2;
    optional string NickName = 3;
    optional string Title = 4;
    required uint32 Price = 5;
    optional string WebUrl = 6;
    required uint32 Num = 7;
}

message GetChatRoomPresentHistoryResp {
    required BaseResponse BaseResponse = 1;
    required uint32 TotalCount = 2;
    repeated Presentation List = 3;
    optional string Url = 4;
    required uint32 DonateStatus = 5;
}

message GetPersonalDonateHistoryReq {
    required BaseRequest BaseRequest = 1;
}

message DonateHistory {
    required uint32 Time = 1;
    optional string DonateTitle = 2;
    optional string DonateUrl = 3;
    required uint32 Price = 4;
    optional string DonateThumbUrl = 5;
}

message GetPersonalDonateHistoryResp {
    required BaseResponse BaseResponse = 1;
    required uint32 TotalAmount = 2;
    required uint32 TotalCount = 3;
    repeated DonateHistory List = 4;
}

message VerifyPersonalInfoReq {
    required BaseRequest BaseRequest = 1;
    optional string UserRealName = 2;
    required uint32 UserIDCardType = 3;
    optional string UserIDCardNum = 4;
}

message VerifyPersonalInfoResp {
    required BaseResponse BaseResponse = 1;
}

message VerifyChatRoomReq {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string ApplyUserName = 3;
    optional string ChatRoomName = 4;
    optional string Ticket = 5;
}

message VerifyChatRoomResp {
    required BaseResponse BaseResponse = 1;
}

message QuitChatRoomReq {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
}

message QuitChatRoomResp {
    required BaseResponse BaseResponse = 1;
}

message GetChatRoomUpgradeStatusReq {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
}

message GetChatRoomUpgradeStatusResp {
    required BaseResponse BaseResponse = 1;
    required uint32 Status = 2;
    required uint32 MobileQuota = 3;
    required uint32 CardQuota = 4;
    required uint32 DonateQuota = 5;
    required uint32 MaxCount = 6;
    optional string ResultMsg = 7;
    optional uint32 TotalQuota = 8;
}

message UpgradeChatRoomReq {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
}

message UpgradeChatRoomResp {
    required BaseResponse BaseResponse = 1;
    optional string ChatRoomData = 2;
    optional string ResultMsg = 3;
    optional uint32 MaxCount = 4;
    required uint32 MobileQuota = 5;
    required uint32 CardQuota = 6;
    required uint32 DonateQuota = 7;
    optional uint32 TotalQuota = 8;
}

message AddChatRoomDonateRecordReq {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
    optional string TransID = 3;
    optional string Title = 4;
    optional string WebUrl = 5;
}

message AddChatRoomDonateRecordResp {
    required BaseResponse BaseResponse = 1;
    required uint32 MaxCount = 2;
}

message GoogleContactUploadItem {
    optional string GoogleContactName = 1;
}

message ListGoogleContactRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated GoogleContactUploadItem List = 3;
    required uint32 ContinueFlag = 4;
    required uint32 ClickSource = 5;
}

message GoogleContactItem {
    optional string GoogleContactName = 1;
    optional string UserName = 2;
    optional string BigHeadUrl = 3;
    optional string SmallHeadUrl = 4;
    required int32 Ret = 5;
    optional string NickName = 6;
    optional string AntispamTicket = 7;
}

message ListGoogleContactResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated GoogleContactItem List = 3;
}

message InviteGoogleContactItem {
    optional string GoogleContactName = 1;
}

message InviteGoogleContactRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated InviteGoogleContactItem List = 3;
}

message InviteGoogleContactResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated int32 Rets = 3 [packed = true];
}

message BBMContactUploadItem {
    optional string BBPPID = 1;
    optional string BBPIN = 2;
    optional string BBMNickName = 3;
}

message ListBBMContactRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated BBMContactUploadItem List = 3;
    required uint32 ContinueFlag = 4;
    required uint32 ClickSource = 5;
    required uint32 Opcode = 6;
}

message BBMContactItem {
    optional string BBPPID = 1;
    optional string UserName = 2;
    optional string BigHeadUrl = 3;
    optional string SmallHeadUrl = 4;
    optional string BBPIN = 5;
    optional string BBMNickName = 6;
    required int32 Ret = 7;
    optional string NickName = 8;
    optional string AntispamTicket = 9;
}

message ListBBMContactResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated BBMContactItem List = 3;
}

message OnlineInfo {
    required uint32 DeviceType = 1;
    optional bytes DeviceID = 2;
    optional string WordingXML = 3;
    required SKBuiltinBuffer_t ClientKey = 4;
    required uint32 OnlineStatus = 5;
    required uint32 DeviceHelperType = 6;
}

message GetOnlineInfoRequest {
    required BaseRequest BaseRequest = 1;
    optional string Language = 2;
}

message GetOnlineInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 OnlineCount = 2;
    repeated OnlineInfo OnlineList = 3;
    optional string SummaryXML = 4;
    optional uint32 Flag = 5;
    optional uint32 IConType = 6;
}

message GetChatroomMemberDetailRequest {
    required BaseRequest BaseRequest = 1;
    optional string ChatroomUserName = 2;
    required uint32 ClientVersion = 3;
}

message GetChatroomMemberDetailResponse {
    required BaseResponse BaseResponse = 1;
    optional string ChatroomUserName = 2;
    required uint32 ServerVersion = 3;
    required ChatRoomMemberData NewChatroomData = 4;
}

message GetContactRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 UserCount = 2;
    repeated SKBuiltinString_t UserNameList = 3;
    optional uint32 AntispamTicketCount = 4;
    repeated SKBuiltinString_t AntispamTicket = 5;
    optional uint32 FromChatRoomCount = 6;
    repeated SKBuiltinString_t FromChatRoom = 7;
}

message GetContactResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ContactCount = 2;
    repeated ModContact ContactList = 3;
    repeated int32 Ret = 4 [packed = true];
}

message UploadCardImgRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientId = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    required uint32 DataLen = 5;
    required SKBuiltinBuffer_t Data = 6;
    optional string ContactUserName = 7;
}

message UploadCardImgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 StartPos = 2;
    required uint32 TotalLen = 3;
    optional string ClientId = 4;
    optional string CardImgUrl = 5;
}

message DeleteCardImgRequest {
    required BaseRequest BaseRequest = 1;
    optional string ContactUserName = 2;
}

message DeleteCardImgResponse {
    required BaseResponse BaseResponse = 1;
}

message InviteChatRoomMemberRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MemberCount = 2;
    repeated MemberReq MemberList = 3;
    required SKBuiltinString_t ChatRoomName = 4;
}

message InviteChatRoomMemberResponse {
    required BaseResponse BaseResponse = 1;
}

message LabelPair {
    optional string LabelName = 1;
    required uint32 LabelID = 2;
}

message AddContactLabelRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 LabelCount = 2;
    repeated LabelPair LabelPairList = 3;
}

message AddContactLabelResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 LabelCount = 2;
    repeated LabelPair LabelPairList = 3;
}

message DelContactLabelRequest {
    required BaseRequest BaseRequest = 1;
    optional string LabelIDList = 2;
}

message DelContactLabelResponse {
    required BaseResponse BaseResponse = 1;
}

message UpdateContactLabelRequest {
    required BaseRequest BaseRequest = 1;
    required LabelPair LabelPair = 2;
}

message UpdateContactLabelResponse {
    required BaseResponse BaseResponse = 1;
}

message GetContactLabelListRequest {
    required BaseRequest BaseRequest = 1;
}

message GetContactLabelListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 LabelCount = 2;
    repeated LabelPair LabelPairList = 3;
}

message UserLabelInfo {
    optional string UserName = 1;
    optional string LabelIDList = 2;
}

message ModifyContactLabelListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 UserCount = 2;
    repeated UserLabelInfo UserLabelInfoList = 3;
}

message ModifyContactLabelListResponse {
    required BaseResponse BaseResponse = 1;
}

message TransferChatRoomOwnerRequest {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
    optional string NewOwnerUserName = 3;
}

message TransferChatRoomOwnerResponse {
    required BaseResponse BaseResponse = 1;
}

message GetChatRoomAnnouncementRequest {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
}

message GetChatRoomAnnouncementResponse {
    required BaseResponse BaseResponse = 1;
    optional string Announcement = 2;
}

message SetChatRoomAnnouncementRequest {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
    optional string Announcement = 3;
    optional uint32 SetAnnouncementFlag = 4;
}

message SetChatRoomAnnouncementResponse {
    required BaseResponse BaseResponse = 1;
}

message GetChatRoomInfoDetailRequest {
    required BaseRequest BaseRequest = 1;
    optional string ChatRoomName = 2;
}

message GetChatRoomInfoDetailResponse {
    required BaseResponse BaseResponse = 1;
    optional string Announcement = 2;
    optional uint32 ChatRoomInfoVersion = 3;
    optional string AnnouncementEditor = 4;
    optional uint32 AnnouncementPublishTime = 5;
}

message EmotionCDNUrl {
    optional string Url = 1;
    optional string AesKey = 2;
    required uint32 FileSize = 3;
}

message EmotionSummary {
    optional string ProductID = 1;
    optional string IconUrl = 2;
    optional string PackName = 3;
    optional string PackDesc = 4;
    optional string PackAuthInfo = 5;
    optional string PackPrice = 6;
    required uint32 PackType = 7;
    required uint32 PackFlag = 8;
    optional string CoverUrl = 9;
    required uint32 PackExpire = 10;
    optional string PackCopyright = 11;
    optional uint32 Timestamp = 12;
    optional string PanelUrl = 13;
    optional string PriceNum = 14;
    optional string PriceType = 15;
    optional string SendInfo = 16;
    optional string TimeLimitStr = 17;
    optional string Introduce = 18;
    optional string TagUri = 19;
}

message PackThumbExt {
    optional string PreviewUrl = 1;
    optional string Desc = 2;
}

message EmotionDetail {
    optional string ProductID = 1;
    optional string IconUrl = 2;
    optional string PackName = 3;
    optional string PackDesc = 4;
    optional string PackAuthInfo = 5;
    optional string PackPrice = 6;
    required uint32 PackType = 7;
    required uint32 PackFlag = 8;
    required uint32 PackThumbCnt = 9;
    repeated SKBuiltinString_t PackThumbList = 10;
    optional string CoverUrl = 11;
    required uint32 PackExpire = 12;
    optional string PackCopyright = 13;
    optional string PriceNum = 14;
    optional string PriceType = 15;
    optional string PanelUrl = 16;
    optional string ConsumeProductID = 17;
    optional uint32 ThumbExtCount = 18;
    repeated PackThumbExt ThumbExtList = 19;
    optional int32 Version = 20;
    optional string TimeLimitStr = 21;
    optional string ShareDesc = 22;
    optional string OldRedirectUrl = 23;
}

message EmotionBannerImg {
    optional string ImgUrl = 1;
    required uint32 Width = 2;
    required uint32 Height = 3;
    optional string StripUrl = 4;
}

message EmotionBanner {
    required EmotionSummary BannerSummary = 1;
    required EmotionBannerImg BannerImg = 2;
}

message EmotionCell {
    optional string CellTitle = 1;
    required uint32 ReqType = 2;
    required uint32 Position = 3;
    optional string IconUrl = 4;
    optional string TagUrl = 5;
}

message GetEmotionListRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t ReqBuf = 2;
    required uint32 ReqType = 3;
    optional uint32 Scene = 4;
}

message GetEmotionListResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t ReqBuf = 2;
    required uint32 EmotionCount = 3;
    repeated EmotionSummary EmotionList = 4;
    optional EmotionBanner Banner = 5;
    optional uint32 NewBannerCount = 6;
    repeated EmotionBanner NewBannerList = 7;
    optional uint32 CellCount = 8;
    repeated EmotionCell CellList = 9;
}

message GetEmotionDetailRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
    optional uint32 Scene = 3;
    optional int32 Version = 4;
}

message GetEmotionDetailResponse {
    required BaseResponse BaseResponse = 1;
    required EmotionDetail EmotionDetail = 2;
}

message VerifyPurchaseRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t Receipt = 2;
    optional string ProductID = 3;
    required uint32 VerifyType = 4;
    required uint32 PayType = 5;
    optional string Price = 6;
    optional string CurrencyType = 7;
    optional string BillNo = 8;
    required uint32 PayTime = 9;
    optional string ReceiptSig = 10;
    optional uint32 Quantity = 11;
}

message VerifyPurchaseResponse {
    required BaseResponse BaseResponse = 1;
    optional string SeriesID = 2;
    required uint32 BizType = 3;
}

message ModEmotionPackRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
    required uint32 OpCode = 3;
}

message ModEmotionPackResponse {
    required BaseResponse BaseResponse = 1;
}

message PreparePurchaseRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
    optional string Price = 3;
    optional string CurrencyType = 4;
    required uint32 PayType = 5;
    optional string ExtInfo = 7;
    optional uint32 Quantity = 8;
}

message PreparePurchaseResponse {
    required BaseResponse BaseResponse = 1;
    optional string BillNo = 2;
    optional string TradeToken4TenPay = 3;
    optional string Partner4TenPay = 4;
    optional string Sign4TenPay = 5;
}

message ExchangeEmotionPackRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
    optional string SeriesID = 3;
}

message ExchangeEmotionPackResponse {
    required BaseResponse BaseResponse = 1;
    required EmotionCDNUrl DownloadInfo = 2;
}

message CancelPurchaseRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
    required uint32 VerifyType = 3;
    required uint32 PayType = 4;
    optional string Price = 5;
    optional string CurrencyType = 6;
    optional string BillNo = 7;
    required uint32 PayTime = 8;
    required int32 ErrorCode = 9;
    optional string ErrorDescription = 10;
}

message CancelPurchaseResponse {
    required BaseResponse BaseResponse = 1;
}

message EmotionMember {
    optional string UserName = 1;
}

message MemberStatus {
    optional string UserName = 1;
    required int32 Status = 2;
}

message VerifyEmotionPresentationRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
    required uint32 MemberCount = 3;
    repeated EmotionMember MemberList = 4;
}

message VerifyEmotionPresentationResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MemberCount = 2;
    repeated MemberStatus StatusList = 3;
}

message LangDesc {
    optional string Lang = 1;
    optional string Desc = 2;
}

message EmotionDesc {
    optional string Md5 = 1;
    required uint32 Count = 2;
    repeated LangDesc List = 3;
}

message GetEmotionDescRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
}

message GetEmotionDescResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated EmotionDesc List = 3;
    required uint32 ClickFlag = 4;
    optional string ButtonDesc = 5;
    optional uint32 DownLoadFlag = 6;
}

message JumpEmotionDetailRequest {
    required BaseRequest BaseRequest = 1;
    required string Url = 2;
}

message JumpEmotionDetailResponse {
    required BaseResponse BaseResponse = 1;
    optional string ProductID = 2;
}

message BatchEmojiBackupRequest {
    repeated string Md5List = 1; //Not More Than 100
}

message BatchEmojiBackupResponse {
    required BaseResponse BaseResponse = 1;
    repeated string NeedUploadMd5List = 2;
}

message BatchEmojiDownLoadRequest {
    required uint32 Index = 1;
}

message EmojiInfo {
    required string Md5 = 1;
    optional string Url = 2;
}

message BatchEmojiDownLoadResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Index = 2;
    repeated string Md5List = 3;
    required uint32 EndFlag = 4;
    repeated EmojiInfo EmojiList = 5;
}

message BackupEmojiOperateRequest {
    repeated string Md5List = 1;
    required uint32 Opcode = 2;
}

message BackupEmojiOperateResponse {
    required BaseResponse BaseResponse = 1;
    repeated string NeedUploadMd5List = 2;
}

message UploadEmojiInfoReq {
    optional string MD5 = 1;
    required int32 StartPos = 2;
    required int32 TotalLen = 3;
    required bytes EmojiBuffer = 4;
}

message EmojiUploadRequest {
    repeated UploadEmojiInfoReq EmojiItem = 1;
    optional uint32 ReqTime = 2;
}

message UploadEmojiInfoResp {
    required int32 Ret = 1;
    required int32 StartPos = 2;
    required int32 TotalLen = 3;
    optional string MD5 = 4;
}

message EmojiUploadResponse {
    required BaseResponse BaseResponse = 1;
    repeated UploadEmojiInfoResp EmojiItem = 2;
}

message UploadMyPanelListRequest {
    required uint32 OpCode = 1;
    repeated string ProductIDList = 2;
}

message UploadMyPanelListResponse {
    required BaseResponse BaseResponse = 1;
}

message GetPersonalDesignerRequest {
    required uint32 DesignerUin = 1;
    required SKBuiltinBuffer_t ReqBuf = 2;
}

message GetPersonalDesignerResponse {
    required BaseResponse BaseResponse = 1;
    required string BannerUrl = 2;
    required string Name = 3;
    required string Desc = 4;
    required string HeadUrl = 5;
    required string BizName = 6;
    repeated EmotionSummary EmotionList = 7;

    required SKBuiltinBuffer_t ReqBuf = 8;
}

message GetEmotionRewardRequest {
    required string ProductID = 1;
    required uint32 OpCode = 2;
}

message EmotionPrice {
    required string Label = 1;
    required string Number = 2;
    required string Type = 3;
}

message EmotionDonor {
    required string HeadUrl = 1;
}

message EmotionReward {
    required string BegWord = 1;
    required string BegPicUrl = 2;
    required string ThanksPicUrl = 3;
    optional string MagicUrl = 4;
    optional string MagicWord = 5;
    optional uint32 MagicExpire = 6;
    optional uint32 MagicLimit = 7;
    optional string MagicMd5 = 8;
}

message GetEmotionRewardResponse {
    required BaseResponse BaseResponse = 1;
    repeated EmotionPrice Price = 2;
    optional uint32 DonorNum = 3;
    repeated EmotionDonor Donors = 4;
    optional EmotionReward Reward = 5;
}

message GetEmotionDonorListRequest {
    required string ProductID = 1;
    required SKBuiltinBuffer_t ReqBuf = 2;
}

message GetEmotionDonorListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 DonorNum = 2;
    repeated EmotionDonor Donors = 3;

    optional SKBuiltinBuffer_t RespBuf = 4;
}

message AskForRewardRequest {
    required string ProductID = 1;
    required EmotionPrice Price = 2;
}

message AskForRewardResponse {
    required BaseResponse BaseResponse = 1;
    required string ReqKey = 2;
    required string AppID = 3;
}

message GetRewardMagicListRequest {
    required uint32 Scene = 1;
}

message RewardMagic {
    required string MagicWord = 1;
    required string MagicUrl = 2;
    optional uint32 MagicExpire = 3;
    optional uint32 MagicLimit = 4;
    required string ProductID = 5;
    optional string Md5 = 6;
}

message GetRewardMagicListResponse {
    required BaseResponse BaseResponse = 1;
    repeated RewardMagic Magic = 2;
}

message ExtDeviceLoginConfirmGetRequest {
    required string LoginUrl = 1;
}
enum ExtDevLoginType {
    EXTDEV_LOGINTYPE_NORMAL = 0;
    EXTDEV_LOGINTYPE_TMP = 1;
    EXTDEV_LOGINTYPE_PAIR = 2;
};
message ExtDeviceLoginConfirmOKRet {
    optional uint32 IconType = 1;
    optional string ContentStr = 2;
    optional string ButtonOkStr = 3;
    optional string ButtonCancelStr = 4;
    optional uint32 ReqSessionLimit = 5;
    optional uint32 ConfirmTimeOut = 6;
    optional string LoginedDevTip = 7;
    optional string TitleStr = 8;
}

message ExtDeviceLoginConfirmErrorRet {
    optional uint32 IconType = 1;
    optional string ContentStr = 2;
    optional string TitleStr = 3;
    optional string ButtonStr = 4;
}

message ExtDeviceLoginConfirmExpiredRet {
    optional uint32 IconType = 1;
    optional string ContentStr = 2;
    optional string ButtonStr = 3;
    optional string TitleStr = 4;
}

message ExtDeviceLoginConfirmGetResponse {
    required BaseResponse BaseResponse = 1;
    optional ExtDeviceLoginConfirmOKRet OKRet = 2;
    optional ExtDeviceLoginConfirmErrorRet ErrorRet = 3;
    optional ExtDeviceLoginConfirmExpiredRet ExpiredRet = 4;
    optional string DeviceNameStr = 5;
}

message ExtDeviceLoginConfirmOKRequest {
    required string LoginUrl = 1;
    optional string SessionList = 2;
    repeated string UnReadChatContactList = 3;
}

message ExtDeviceLoginConfirmOKResponse {
    required BaseResponse BaseResponse = 1;
}

message ExtDeviceLoginConfirmCancelRequest {
    required string LoginUrl = 1;
}

message ExtDeviceLoginConfirmCancelResponse {
    required BaseResponse BaseResponse = 1;
}

message ExtDeviceInitRequest {
    optional string UserName = 1;
}

message ExtDeviceInitResponse {
    required BaseResponse BaseResponse = 1;
    optional CmdList CmdList = 2;
    repeated string ChatContactList = 3;
}

message ExtDeviceControlRequest {
    optional uint32 OpType = 1;
    optional uint32 LockDevice = 2;
}

message ExtDeviceControlResponse {
    required BaseResponse BaseResponse = 1;
}

message GetCDNDnsRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientIP = 2;
}

message GetCDNDnsResponse {
    required BaseResponse BaseResponse = 1;
    required CDNDnsInfo DnsInfo = 2;
    optional CDNDnsInfo SnsDnsInfo = 3;
    optional CDNDnsInfo AppDnsInfo = 4;
    optional SKBuiltinBuffer_t CDNDnsRuleBuf = 5;
    optional SKBuiltinBuffer_t FakeCDNDnsRuleBuf = 6;
    optional CDNDnsInfo FakeDnsInfo = 7;
}

message EmojiUploadInfoReq {
    optional string MD5 = 1;
    required int32 StartPos = 2;
    required int32 TotalLen = 3;
    required SKBuiltinBuffer_t EmojiBuffer = 4;
    required int32 Type = 5;
    optional string ToUserName = 6;
    optional string ExternXML = 7;
    optional string Report = 8;
    optional string ClientMsgID = 9;
    optional string MsgSource = 10;
    optional int32 NewXmlFlag = 11;
}

message UploadEmojiRequest {
    required BaseRequest BaseRequest = 1;
    required int32 EmojiItemCount = 2;
    repeated EmojiUploadInfoReq EmojiItem = 3;
    optional uint32 ReqTime = 4;
}

message EmojiUploadInfoResp {
    required int32 Ret = 1;
    required int32 StartPos = 2;
    required int32 TotalLen = 3;
    optional string MD5 = 4;
    required uint32 MsgID = 5;
    optional uint64 NewMsgId = 6;
}

message UploadEmojiResponse {
    required BaseResponse BaseResponse = 1;
    required int32 EmojiItemCount = 2;
    repeated EmojiUploadInfoResp EmojiItem = 3;
}

message EmojiDownloadInfoReq {
    optional string ID = 1;
    required int32 StartPos = 2;
    required int32 TotalLen = 3;
    optional string MD5 = 4;
}

message DownloadEmojiRequest {
    required BaseRequest BaseRequest = 1;
    required int32 EmojiItemCount = 2;
    repeated EmojiDownloadInfoReq EmojiItem = 3;
}

message EmojiDownloadInfoResp {
    required int32 Ret = 1;
    required int32 StartPos = 2;
    required int32 TotalLen = 3;
    required SKBuiltinBuffer_t EmojiBuffer = 4;
    optional string MD5 = 5;
    optional string ID = 6;
}

message DownloadEmojiResponse {
    required BaseResponse BaseResponse = 1;
    required int32 EmojiItemCount = 2;
    repeated EmojiDownloadInfoResp EmojiItem = 3;
}

message DownloadVoiceRequest {
    required uint32 MsgId = 1;
    required uint32 Offset = 2;
    required uint32 Length = 3;
    optional string ClientMsgId = 4;
    required BaseRequest BaseRequest = 5;
    optional uint64 NewMsgId = 6;
    optional string ChatRoomName = 7;
    optional uint64 MasterBufId = 8;
}

message DownloadVoiceResponse {
    required uint32 MsgId = 1;
    required uint32 Offset = 2;
    required uint32 Length = 3;
    required uint32 VoiceLength = 5;
    optional string ClientMsgId = 6;
    required SKBuiltinBuffer_t Data = 7;
    required uint32 EndFlag = 8;
    required BaseResponse BaseResponse = 9;
    optional uint32 CancelFlag = 10;
    optional uint64 NewMsgId = 11;
}

message UploadMsgImgRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t ClientImgId = 2;
    required SKBuiltinString_t FromUserName = 3;
    required SKBuiltinString_t ToUserName = 4;
    required uint32 TotalLen = 5;
    required uint32 StartPos = 6;
    required uint32 DataLen = 7;
    required SKBuiltinBuffer_t Data = 8;
    optional uint32 MsgType = 9;
    optional string MsgSource = 10;
    optional uint32 CompressType = 11;
    optional int32 NetType = 12;
    optional int32 PhotoFrom = 13;
    optional string MediaId = 14;
    optional string CDNBigImgUrl = 15;
    optional string CDNMidImgUrl = 16;
    optional string AESKey = 17;
    optional int32 EncryVer = 18;
    optional int32 CDNBigImgSize = 19;
    optional int32 CDNMidImgSize = 20;
    optional string CDNThumbImgUrl = 21;
    optional int32 CDNThumbImgSize = 22;
    optional int32 CDNThumbImgHeight = 23;
    optional int32 CDNThumbImgWidth = 24;
    optional string CDNThumbAESKey = 25;
    optional uint32 ReqTime = 26;
    optional string Md5 = 27;
    optional uint32 CRC32 = 28;
    optional uint32 MsgForwardType = 29;
    optional uint32 HitMd5 = 30;
}

message UploadMsgImgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MsgId = 2;
    required SKBuiltinString_t ClientImgId = 3;
    required SKBuiltinString_t FromUserName = 4;
    required SKBuiltinString_t ToUserName = 5;
    required uint32 TotalLen = 6;
    required uint32 StartPos = 7;
    required uint32 DataLen = 8;
    required uint32 CreateTime = 9;
    optional uint64 NewMsgId = 10;
    optional string AESKey = 11;
    optional string FileId = 12;
}

message CDNUploadMsgImgPrepareRequest {
    optional string ClientImgId = 1;
    optional string FromUserName = 2;
    optional string ToUserName = 3;
    required int32 ThumbHeight = 4;
    required int32 ThumbWidth = 5;
    optional string MsgSource = 6;
    optional SKBuiltinBuffer_t ClientStat = 7;
    optional int32 Scene = 8;
    optional float Longitude = 9;
    optional float Latitude = 10;
    optional string AttachedContent = 11;
    optional int32 MidHeight = 12;
    optional int32 MidWidth = 13;
    optional int32 HDHeight = 14;
    optional int32 HDWidth = 15;
    optional string AESKey = 16;
    optional int32 EncryVer = 17;
    optional uint32 CRC32 = 18;
    optional uint32 MsgForwardType = 19;
}

message CDNUploadMsgImgPrepareResponse {
    required BaseResponse BaseResponse = 1;
    optional string ClientImgId = 3;
    optional string FromUserName = 4;
    optional string ToUserName = 5;
    required uint32 CreateTime = 9;
    optional uint64 NewMsgId = 10;
    optional string AESKey = 11;
    optional string FileId = 12;
}

message CDNUploadMsgImgCommitRequest {
    optional string Ticket = 1;
    optional string ImgUrl = 2;
    optional string AESKey = 3;
    required int32 EncryVer = 4;
    required int32 MidSize = 5;
    required int32 ThumbSize = 6;
    optional int32 BigSize = 9;
    optional string Md5Sum = 10;
    optional int32 SafeProto = 11;
    optional int32 Hit = 12;
    optional string FileInfo = 13;
}

message CDNUploadMsgImgCommitResponse {
    required BaseResponse BaseResponse = 1;
}

message UploadWeiboImgRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientImgId = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    required uint32 DataLen = 5;
    optional bytes Data = 6;
    optional string Content = 7;
    required uint32 FilterType = 8;
    optional uint32 Flag = 9;
}

message UploadWeiboImgResponse {
    required BaseResponse BaseResponse = 1;
    optional string ClientImgId = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    required uint32 DataLen = 5;
}

message UploadToWeiboRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientMsgId = 2;
    required uint32 Type = 3;
    required uint32 TotalLen = 4;
    required uint32 StartPos = 5;
    required uint32 DataLen = 6;
    optional bytes Data = 7;
    optional string Content = 8;
    required uint32 FilterType = 9;
}

message UploadToWeiboResponse {
    required BaseResponse BaseResponse = 1;
    optional string ClientMsgId = 2;
    required uint32 Type = 3;
    required uint32 TotalLen = 4;
    required uint32 StartPos = 5;
    required uint32 DataLen = 6;
}

message GetMsgImgRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MsgId = 2;
    required SKBuiltinString_t FromUserName = 3;
    required SKBuiltinString_t ToUserName = 4;
    required uint32 TotalLen = 5;
    required uint32 StartPos = 6;
    required uint32 DataLen = 7;
    optional uint32 CompressType = 8;
    optional uint64 NewMsgId = 9;
}

message GetMsgImgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MsgId = 2;
    required SKBuiltinString_t FromUserName = 3;
    required SKBuiltinString_t ToUserName = 4;
    required uint32 TotalLen = 5;
    required uint32 StartPos = 6;
    required uint32 DataLen = 7;
    required SKBuiltinBuffer_t Data = 8;
    optional uint64 NewMsgId = 9;
}

message UploadVideoRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientMsgId = 2;
    optional string FromUserName = 3;
    optional string ToUserName = 4;
    required uint32 ThumbTotalLen = 5;
    required uint32 ThumbStartPos = 6;
    required SKBuiltinBuffer_t ThumbData = 7;
    required uint32 VideoTotalLen = 8;
    required uint32 VideoStartPos = 9;
    required SKBuiltinBuffer_t VideoData = 10;
    required uint32 PlayLength = 11;
    optional uint32 NetworkEnv = 12;
    optional uint32 CameraType = 13;
    optional uint32 FuncFlag = 14;
    optional string MsgSource = 15;
    optional string CDNVideoUrl = 16;
    optional string AESKey = 17;
    optional int32 EncryVer = 18;
    optional string CDNThumbUrl = 19;
    optional int32 CDNThumbImgSize = 20;
    optional int32 CDNThumbImgHeight = 21;
    optional int32 CDNThumbImgWidth = 22;
    optional string CDNThumbAESKey = 23;
    optional int32 VideoFrom = 24;
    optional uint32 ReqTime = 25;
    optional string VideoMd5 = 26;
    optional string StreamVideoUrl = 27;
    optional uint32 StreamVideoTotalTime = 28;
    optional string StreamVideoTitle = 29;
    optional string StreamVideoWording = 30;
    optional string StreamVideoWebUrl = 31;
    optional string StreamVideoThumbUrl = 32;
    optional string StreamVideoPublishId = 33;
    optional string StreamVideoAdUxInfo = 34;
    optional string StatExtStr = 35;
    optional uint32 HitMd5 = 36;
    optional string VideoNewMd5 = 37;
    optional uint32 CRC32 = 38;
    optional uint32 MsgForwardType = 39;
}

message UploadVideoResponse {
    required BaseResponse BaseResponse = 1;
    optional string ClientMsgId = 2;
    required uint32 MsgId = 3;
    required uint32 ThumbStartPos = 4;
    required uint32 VideoStartPos = 5;
    optional uint64 NewMsgId = 6;
    optional string AESKey = 7;
}

message DownloadVideoRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MsgId = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    optional uint32 NetworkEnv = 5;
    optional uint32 MxPackSize = 6;
    optional uint64 NewMsgId = 7;
}

message DownloadVideoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MsgId = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    required SKBuiltinBuffer_t Data = 5;
    optional uint64 NewMsgId = 6;
}

message RevokeMsgRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientMsgId = 2;
    required uint32 NewClientMsgId = 3;
    required uint32 CreateTime = 4;
    required uint32 SvrMsgId = 5;
    optional string FromUserName = 6;
    optional string ToUserName = 7;
    required uint32 IndexOfRequest = 8;
    optional uint64 SvrNewMsgId = 9;
}

message RevokeMsgResponse {
    required BaseResponse BaseResponse = 1;
    optional string Introduction = 2;
    optional string SysWording = 3;
}

message SendYoRequest {
    optional string ToUserName = 1;
    required uint32 Type = 2;
    required uint32 Count = 3;
    required uint32 CreateTime = 4;
    required uint32 ClientMsgId = 5;
    optional string MsgSource = 6;
    optional uint32 YoType = 7;
}

message SendYoResponse {
    required int32 Ret = 1;
    required uint32 ServerTime = 2;
    required uint64 MsgId = 3;
}

message CheckBigFileUploadRequest {
    required BaseRequest BaseRequest = 1;
    optional string FromUserName = 2;
    optional string ToUserName = 3;
    required uint64 FileSize = 4;
    optional string AESKey = 5;
    optional string FileMd5 = 6;
    required uint32 FileType = 7;
    optional string FileExt = 8;
    optional string FileName = 9;
}

message CheckBigFileUploadResponse {
    required BaseResponse BaseResponse = 1;
    optional string Signature = 2;
    optional uint32 Fakeuin = 3;
    optional string FakeAESKey = 4;
    optional string FakeSignature = 5;
}

message CheckBigFileDownloadRequest {
    required BaseRequest BaseRequest = 1;
    optional string FromUserName = 2;
    optional string ToUserName = 3;
    required uint64 FileSize = 4;
    optional string AESKey = 5;
    optional string FileMd5 = 6;
    required uint32 FileType = 7;
    optional string FileExt = 8;
    optional string FileName = 9;
}

message CheckBigFileDownloadResponse {
    required BaseResponse BaseResponse = 1;
    optional string Signature = 2;
    optional uint32 Fakeuin = 3;
    optional string FakeAESKey = 4;
    optional string FakeSignature = 5;
}

message AddFavItem {
    required int32 FavId = 1;
    required int32 Type = 2;
    required uint32 Flag = 3;
    required uint32 UpdateTime = 4;
    required uint32 UpdateSeq = 5;
}

message CheckFavItemRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 SourceType = 2;
    optional string SourceId = 3;
}

message FavVideoInfo {
    optional string FileId = 1;
    optional string AesKey = 2;
    optional string VideoId = 3;
}

message ShareFavKey {
    required uint32 FromUin = 1;
    optional string ToUser = 2;
    required uint32 ShareTime = 3;
    required uint32 Scene = 4;
    required uint32 FavId = 5;
    optional string ParamCheck = 6;
    optional string FavItemCheck = 7;
}

message CheckFavItemResponse {
    required BaseResponse BaseResponse = 1;
}

message ModFavIndex {
    required uint32 ModField = 1;
    required uint32 ModValue = 2;
}

message ModFavObject {
    optional string TagName = 1;
    optional string AttrName = 2;
    optional string Value = 3;
    optional uint32 Type = 4;
}

message ModFavItemRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 FavId = 2;
    required uint32 IndexCount = 3;
    repeated ModFavIndex IndexList = 4;
    required uint32 ObjectCount = 5;
    repeated ModFavObject ObjectList = 6;
}

message ModFavItemResponse {
    required BaseResponse BaseResponse = 1;
}

message ShareFavRequest {
    required BaseRequest BaseRequest = 1;
    optional string ToUser = 2;
    required uint32 Scene = 3;
    required uint32 Count = 4;
    repeated uint32 FavIdList = 5 [packed = true];
}

message ShareFavResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 UrlCount = 2;
    repeated SKBuiltinString_t UrlList = 3;
}

message AddFavItemRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientId = 2;
    required uint32 Type = 3;
    required uint32 SourceType = 4;
    optional string SourceId = 5;
    optional string Object = 6;
}

message AddFavItemResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 FavId = 2;
    required uint32 UpdateSeq = 3;
    optional uint64 UsedSize = 4;
}

message DelFavItemRsp {
    required int32 Ret = 1;
    required uint32 FavId = 2;
}

message BatchDelFavItemRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated uint32 FavIdList = 3 [packed = true];
}

message BatchDelFavItemResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated DelFavItemRsp List = 3;
}

message FavObject {
    required uint32 FavId = 1;
    required int32 Status = 2;
    optional string Object = 3;
    required uint32 Flag = 4;
    required uint32 UpdateTime = 5;
    required uint32 UpdateSeq = 6;
}

message BatchGetFavItemRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated uint32 FavIdList = 3 [packed = true];
}

message BatchGetFavItemResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated FavObject ObjectList = 3;
}

message CheckCDN {
    optional string DataId = 1;
    optional string FullMd5 = 2;
    optional string Head256Md5 = 3;
    required uint32 FullSize = 4;
    required uint32 DataSourceType = 5;
    optional string DataSourceId = 6;
    required uint32 IsThumb = 7;
}

message FavCDNItem {
    optional string DataId = 1;
    optional string FullMd5 = 2;
    optional string Head256Md5 = 3;
    required uint32 FullSize = 4;
    optional string CDNURL = 5;
    optional string AESKey = 6;
    required int32 EncryVer = 7;
    optional string VideoId = 8;
    required int32 Status = 9;
    required int32 DataStatus = 10;
}

message GetFavInfoRequest {
    required BaseRequest BaseRequest = 1;
}

message GetFavInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint64 UsedSize = 2;
    required uint64 TotalSize = 3;
    required uint32 MxFavFileSize = 4;
    required uint32 MxAutoUploadSize = 5;
    required uint32 MxAutoDownloadSize = 6;
}

message CheckCDNRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated CheckCDN List = 3;
}

message CheckCDNResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated FavCDNItem List = 3;
}

message FavSyncRequest {
    required uint32 Selector = 1;
    required SKBuiltinBuffer_t KeyBuf = 3;
}

message FavSyncResponse {
    required int32 Ret = 1;
    required CmdList CmdList = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
    required uint32 ContinueFlag = 4;
}

message TransCDNItem {
    required uint32 ClientId = 1;
    optional string FileId = 2;
    optional string AesKey = 3;
    required uint32 FavDataType = 4;
    required uint64 Size = 5;
}

message BatchTransCDNRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated TransCDNItem List = 3;
}

message BatchTransCDNResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated TransCDNItem List = 3;
}

message EnemyGameInfo {
    required uint32 Type = 1;
    required uint32 Score = 2;
}

message EnemyGameKilled {
    required uint32 Type = 1;
    required uint32 Count = 2;
    optional uint32 GeneralCount = 3;
    optional uint32 UsedCount = 4;
}

message UserGameInfo {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string HeadImageUrl = 3;
}

message UserGameAchieveInfo {
    required UserGameInfo UserInfo = 1;
    required uint32 Score = 2;
    required uint32 Rank = 3;
}

message UserGameWishInfo {
    required UserGameInfo UserInfo = 1;
}

message GamePropsInfo {
    required uint32 PropsId = 1;
    optional string IconUrl = 2;
    optional string Name = 3;
    optional string Desc = 4;
    required uint32 Type = 5;
}

message GameUserPropsInfo {
    required uint32 PropsId = 1;
    required uint32 Count = 2;
}

message GameAnnouncementInfo {
    required uint32 Style = 1;
    optional string Title = 2;
    optional string Desc = 3;
}

message GameConsumeProps {
    required uint32 PropsId = 1;
    required int32 ConsumeCount = 2;
}

message GameInitReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
}

message GameInitResp {
    required BaseResponse BaseResponse = 1;
    required uint32 LifeNum = 2;
    optional string GameNumerConfig = 3;
    required uint32 CheckLeftTime = 4;
    optional string Token = 5;
    required int32 FriendCount = 6;
    repeated UserGameInfo FriendList = 7;
    required int32 WishCount = 8;
    repeated UserGameWishInfo WishList = 9;
    optional int32 GamePropsCount = 10;
    repeated GameUserPropsInfo GamePropsList = 11;
    optional int32 GameAnnouncementCount = 12;
    repeated GameAnnouncementInfo GameAnnouncementList = 13;
    optional string PropsViewTip = 14;
    optional string RankViewTip = 15;
    optional uint32 GameCoinCount = 16;
    optional uint32 ProductIdCount = 17;
    repeated SKBuiltinString_t ProductIdList = 18;
    optional string BuyEngineOilWording = 19;
    optional string OilPrice = 20;
    optional string OilCurrency = 21;
}

message GameEndReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required int32 Count = 3;
    repeated EnemyGameKilled EnemyKilled = 4;
    required uint32 LocalScore = 5;
    required uint32 ConsumeTime = 6;
    optional string Token = 7;
    optional uint32 DeadCount = 8;
    optional int32 GameConsumePropsCount = 9;
    repeated GameConsumeProps GameConsumePropsList = 10;
    optional uint32 GameStartTime = 11;
    optional uint32 GameEndTime = 12;
    optional uint32 ShieldNum = 13;
    optional uint32 TotalShots = 14;
    optional uint32 GameCoinCount = 15;
    optional uint32 ClientUseReviveNum = 16;
}

message GameEndResp {
    required BaseResponse BaseResponse = 1;
    required uint32 Score = 2;
    optional string Achievement = 3;
    required uint32 Rank = 4;
    required uint32 LifeNum = 5;
    required uint32 CheckLeftTime = 6;
    required int32 Count = 7;
    repeated UserGameAchieveInfo RankList = 8;
    optional string PropsViewTip = 11;
    optional string RankViewTip = 12;
    optional uint32 GameCoinCount = 13;
}

message GameRankListReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
}

message GameRankListResp {
    required BaseResponse BaseResponse = 1;
    required int32 Count = 2;
    repeated UserGameAchieveInfo RankList = 3;
}

message GameStartReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 LocalLifeNum = 3;
    optional string Token = 4;
    required uint32 NeedClearWishList = 5;
    optional int32 GameConsumePropsCount = 6;
    repeated GameConsumeProps GameConsumePropsList = 7;
}

message GameStartResp {
    required BaseResponse BaseResponse = 1;
    required uint32 LifeNum = 2;
    required uint32 CheckLeftTime = 3;
    optional string Token = 4;
    required int32 Count = 5;
    repeated UserGameAchieveInfo RankList = 6;
    optional int32 GamePropsCount = 7;
    repeated GameUserPropsInfo GamePropsList = 8;
    optional uint32 GameCoinCount = 9;
}

message GameCheckReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 LocalLifeNum = 3;
    optional string Token = 4;
}

message GameCheckResp {
    required BaseResponse BaseResponse = 1;
    required uint32 CheckLeftTime = 2;
    required uint32 LifeNum = 3;
}

message GameWishReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required int32 Count = 3;
    repeated SKBuiltinString_t UserNameList = 4;
}

message GameWishResp {
    required BaseResponse BaseResponse = 1;
}

message GameGiftReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 LocalLifeNum = 3;
    required int32 Count = 4;
    repeated SKBuiltinString_t UserNameList = 5;
}

message GameGiftResp {
    required BaseResponse BaseResponse = 1;
    required uint32 LifeNum = 2;
    required uint32 CheckLeftTime = 3;
}

message GameFriendListReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
}

message GameFriendListResp {
    required BaseResponse BaseResponse = 1;
    required int32 Count = 2;
    repeated UserGameInfo FriendList = 3;
}

message GameWishListReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
}

message GameWishListResp {
    required BaseResponse BaseResponse = 1;
    required int32 Count = 2;
    repeated UserGameWishInfo WishList = 3;
}

message GameShareReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 Type = 3;
    required uint32 Score = 4;
    optional string Achieve = 5;
}

message GameShareResp {
    required BaseResponse BaseResponse = 1;
}

message GameResourceReq {
    required BaseRequest BaseRequest = 1;
    required int32 PropsCount = 2;
    repeated uint32 PropsIdList = 3 [packed = true];
}

message GameResourceResp {
    required BaseResponse BaseResponse = 1;
    required int32 PropsCount = 2;
    repeated GamePropsInfo PropsList = 3;
}

message GameConsumeReq {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
}

message GameConsumeResp {
    required BaseResponse BaseResponse = 1;
    required uint32 ConsumeOk = 2;
    required uint32 GameCoinCount = 3;
}

message AddGameMsg {
    required int32 MsgId = 1;
    optional string FromUserName = 2;
    optional string ToUserName = 3;
    required int32 Type = 4;
    required uint32 Flag = 5;
    required uint32 Status = 6;
    required uint32 UpdateTime = 7;
    required uint32 UpdateSeq = 8;
}

message GameSyncRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Selector = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
}

message GameSyncResponse {
    required BaseResponse BaseResponse = 1;
    required CmdList CmdList = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
    required uint32 ContinueFlag = 4;
}

message GameMsg {
    required uint32 MsgId = 1;
    required uint32 Status = 2;
    optional string Object = 3;
    required uint32 UpdateTime = 4;
    required uint32 UpdateSeq = 5;
}

message BatchGetGameMsgRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated uint32 MsgIdList = 3 [packed = true];
}

message BatchGetGameMsgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated GameMsg MsgList = 3;
}

message BatchDelGameMsgRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated uint32 MsgIdList = 3 [packed = true];
}

message DelGameMsgRsp {
    required int32 Ret = 1;
    required uint32 MsgId = 2;
}

message BatchDelGameMsgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated DelGameMsgRsp List = 3;
}

message GetUpdateInfoRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 UpdateType = 2;
    optional uint32 Channel = 3;
}

message GetUpdateInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 PackVersion = 2;
    optional string PackMd5 = 3;
    required uint32 PackSize = 4;
    optional string PackDescription = 5;
    optional uint32 UrlCount = 6;
    repeated SKBuiltinString_t DownLoadUrl = 7;
    optional string PatchInfo = 8;
}

message GetUpdatePackRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 UpdateType = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    optional uint32 Channel = 5;
}

message GetUpdatePackResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 TotalLen = 2;
    required uint32 StartPos = 3;
    required uint32 DataLen = 4;
    required SKBuiltinBuffer_t Data = 5;
}

message LbsLifeExtInfo {
    required uint32 Limit = 1;
    required uint32 Page = 2;
    optional string sessiontoken = 3;
}

message LbsLocation {
    required float Longitude = 1;
    required float Latitude = 2;
    required int32 Precision = 3;
    optional string MacAddr = 4;
    optional string CellId = 5;
    optional int32 GPSSource = 6;
}

message CreatePoiRequest {
    required BaseRequest BaseRequest = 1;
    optional string Name = 2;
    optional string District = 3;
    optional string Street = 4;
    required LbsLocation Loc = 5;
    required uint32 Count = 6;
    repeated SKBuiltinString_t Categories = 7;
    optional string Telephone = 8;
    optional string PhotoUrl = 9;
}

message CreatePoiResponse {
    required BaseResponse BaseResponse = 1;
    optional string PoiId = 2;
}

message GetLbsLifeListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Opcode = 2;
    required uint32 Scene = 3;
    optional SKBuiltinBuffer_t Buff = 4;
    required LbsLocation Loc = 5;
    optional string Keyword = 6;
    optional uint32 EntryTime = 7;
}

message LbsLife {
    optional string BId = 1;
    optional string Title = 2;
    required float Price = 3;
    required uint32 IconIdxCount = 4;
    repeated uint32 IconIdxList = 5 [packed = true];
    required uint32 DescCount = 6;
    repeated SKBuiltinString_t DescList = 7;
    required float Rate = 8;
    optional string Link = 9;
    optional uint32 Type = 10;
}

message GetLbsFunctionListRequest {
    required BaseRequest BaseRequest = 1;
    required LbsLocation Loc = 2;
}

message GetLbsFunctionListResponse {
    required BaseResponse BaseResponse = 1;
    optional string LbsFunctionList = 2;
}

message GetLbsLifeListResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t Buff = 2;
    required uint32 IconCount = 3;
    repeated SKBuiltinString_t IconList = 4;
    required uint32 LifeCount = 5;
    repeated LbsLife LifeList = 6;
    required uint32 ContinueFlag = 7;
    optional string LogoUrl = 8;
}

message LBSLifeActionBooking {
    required uint32 Type = 1;
    optional string Title = 2;
    optional string Url = 3;
}

message LBSLifeActionBargain {
    optional string Desc = 1;
    optional string Url = 2;
    optional string IconUrl = 3;
}

message LBSLifeAction {
    required uint32 Type = 1;
    optional string Name = 2;
    optional string Desc = 3;
    optional string Link = 4;
    required uint32 BookingCount = 5;
    repeated LBSLifeActionBooking BookingList = 6;
    required uint32 BargainCount = 7;
    repeated LBSLifeActionBargain BargainList = 8;
}

message LBSLifeActionList {
    required uint32 Type = 1;
    required LBSLifeAction LifeAction = 2;
}

message LbsLifeDetail {
    required LbsLife Life = 1;
    required uint32 CICount = 2;
    repeated SKBuiltinString_t CIList = 3;
    optional string ThumbUrl = 4;
    optional string PhotoLink = 5;
    required uint32 ActionCount = 6;
    repeated LBSLifeActionList ActionList = 7;
}

message GetLbsLifeDetailRequest {
    required BaseRequest BaseRequest = 1;
    optional string BusinessId = 2;
}

message GetLbsLifeDetailResponse {
    required BaseResponse BaseResponse = 1;
    required LbsLifeDetail LifeDetail = 2;
}

message LbsRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required float Longitude = 3;
    required float Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    optional int32 GPSSource = 8;
}

message AlbumLbsRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required float Longitude = 3;
    required float Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    required int32 GPSSource = 8;
    required uint32 SBTime = 9;
}

message LbsContactInfo {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string Province = 3;
    optional string City = 4;
    optional string Signature = 5;
    optional string Distance = 6;
    required int32 Sex = 7;
    required uint32 ImgStatus = 8;
    optional uint32 VerifyFlag = 9;
    optional string VerifyInfo = 10;
    optional string VerifyContent = 11;
    optional string Alias = 12;
    optional string Weibo = 13;
    optional string WeiboNickname = 14;
    optional uint32 WeiboFlag = 15;
    optional int32 HeadImgVersion = 19;
    optional SnsUserInfo SnsUserInfo = 20;
    optional string Country = 21;
    optional string BigHeadImgUrl = 22;
    optional string SmallHeadImgUrl = 23;
    optional string MyBrandList = 24;
    optional CustomizedInfo CustomizedInfo = 25;
    optional string AntispamTicket = 26;
}

message LbsResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ContactCount = 2;
    repeated LbsContactInfo ContactList = 3;
    optional uint32 State = 4;
    optional uint32 FlushTime = 5;
    optional uint32 IsShowRoom = 6;
    optional uint32 RoomMemberCount = 7;
}

message AlbumLbsContactInfo {
    optional string UserName = 1;
}

message AlbumLbsResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ContactCount = 2;
    repeated AlbumLbsContactInfo ContactList = 3;
}

message ShakeReportRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required float Longitude = 3;
    required float Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    required uint32 ImgId = 8;
    required uint32 Times = 9;
    optional int32 GPSSource = 10;
}

message ShakeBuffer {
    required uint32 ReportTime = 1;
    required uint32 X = 2;
    required uint32 Y = 3;
}

message ShakeReportResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t Buffer = 2;
    required int32 Ret = 3;
    required uint32 ImgId = 4;
    optional uint32 ImgTotoalLen = 5;
}

message ShakeGetRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t Buffer = 2;
    optional int32 IsNewVerson = 3;
}

message ShakeGetItem {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string Province = 3;
    optional string City = 4;
    optional string Signature = 5;
    optional string Distance = 6;
    required int32 Sex = 7;
    required uint32 ImgStatus = 8;
    required uint32 HasHDImg = 9;
    required SKBuiltinBuffer_t ImgBuffer = 10;
    required uint32 NumDistance = 11;
    optional string Weibo = 12;
    optional string WeiboNickname = 13;
    optional uint32 WeiboFlag = 14;
    optional uint32 VerifyFlag = 15;
    optional string VerifyInfo = 16;
    optional string VerifyContent = 17;
    optional int32 HeadImgVersion = 21;
    optional SnsUserInfo SnsUserInfo = 22;
    optional string Country = 23;
    optional string BigHeadImgUrl = 24;
    optional string SmallHeadImgUrl = 25;
    optional string MyBrandList = 26;
    optional CustomizedInfo CustomizedInfo = 27;
    optional string AntispamTicket = 28;
}

message ShakeGetResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated ShakeGetItem ShakeGetList = 3;
    optional string Tips = 4;
    required uint32 Scence = 5;
    required int32 Ret = 6;
}

message ShakeMatchRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string ToUserName = 3;
    required uint32 Scence = 4;
}

message ShakeMatchResponse {
    required BaseResponse BaseResponse = 1;
    optional string Tips = 2;
    required uint32 Ret = 3;
}

message ShakeImgRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ImgId = 2;
    required uint32 StartPos = 3;
    required uint32 TotalLen = 4;
}

message ShakeImgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ImgId = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    required SKBuiltinBuffer_t Buffer = 5;
}

message ScanStreetViewRequest {
    required BaseRequest BaseRequest = 1;
    required PositionInfo UserPos = 2;
    optional uint32 Scene = 3;
    optional float Heading = 4;
    optional float Pitch = 5;
}

message ScanStreetViewResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Type = 2;
    optional string DescriptionXML = 3;
}

message LbsRoomRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required float Longitude = 3;
    required float Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    optional int32 GPSSource = 8;
    optional string RoomName = 9;
    optional int32 ExitScene = 10;
    optional int32 StayTime = 11;
}

message LbsRoomResponse {
    required BaseResponse BaseResponse = 1;
    optional string RoomName = 2;
    optional string RoomNickName = 3;
}

message LbsRoomMemberRequest {
    required BaseRequest BaseRequest = 1;
    optional string RoomName = 2;
}

message LbsRoomMember {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string BigHeadImgUrl = 3;
    optional string SmallHeadImgUrl = 4;
    optional string AntispamTicket = 5;
}

message LbsRoomMemberResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MemberCount = 2;
    repeated LbsRoomMember MemberList = 3;
}

message RadarSearchRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required float Longitude = 3;
    required float Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    optional int32 GPSSource = 8;
}

message RadarSearchMember {
    optional string UserName = 1;
    required uint32 Distance = 2;
    optional string NickName = 3;
    optional string SmallImgUrl = 4;
    optional string EncodeUserName = 5;
    optional string AntispamTicket = 6;
}

message RadarSearchResponse {
    required BaseResponse BaseResponse = 1;
    optional string Ticket = 2;
    required uint32 OpCode = 3;
    required uint32 MemberCount = 4;
    repeated RadarSearchMember MemberList = 5;
}

message RadarChatRoomMember {
    optional string UserName = 1;
    optional string AntispamTicket = 2;
    optional string EncodeUserName = 3;
}

message RadarRelationChainRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MemberCount = 2;
    repeated RadarChatRoomMember MemberList = 3;
}

message RadarRelationChainResponse {
    required BaseResponse BaseResponse = 1;
    optional string Ticket = 2;
    required uint32 MemberCount = 3;
    repeated RadarChatRoomMember MemberList = 4;
}

message RadarCreateChatRoomRequest {
    required BaseRequest BaseRequest = 1;
    required float Longitude = 2;
    required float Latitude = 3;
    required int32 Precision = 4;
    optional string MacAddr = 5;
    optional string CellId = 6;
    optional int32 GPSSource = 7;
    optional string PassWord = 8;
}

message RadarCreateChatRoomResponse {
    required BaseResponse BaseResponse = 1;
    optional string ChatRoomName = 2;
}

message GetPOIListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Scene = 2;
    required uint32 OpCode = 3;
    optional string Keyword = 4;
    required SKBuiltinBuffer_t Buff = 5;
    required double Longitude = 6;
    required double Latitude = 7;
}

message POIItem {
    optional string Name = 1;
    optional string Addr = 2;
    required double Longitude = 3;
    required double Latitude = 4;
    optional string TypeId = 5;
    optional string Link = 6;
    optional string Nation = 7;
    optional string Province = 8;
    optional string City = 9;
    optional string District = 10;
    optional string Street = 11;
    optional string SubAddr = 12;
}

message GetPOIListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ListCount = 2;
    repeated POIItem POIList = 3;
    required uint32 OpCode = 4;
    required uint32 IsEnd = 5;
    required SKBuiltinBuffer_t Buff = 6;
    optional string Url = 7;
    optional string LogoUrl = 8;
    optional string Text = 9;
    optional string OpenId = 10;
}

message FacingMember {
    optional string UserName = 1;
    optional string EncodeUserName = 2;
    optional string NickName = 3;
    optional string SmallImgUrl = 4;
    required uint32 Status = 5;
}

message FacingCreateChatRoomRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string PassWord = 3;
    required float Longitude = 4;
    required float Latitude = 5;
    required int32 Precision = 6;
    optional string MacAddr = 7;
    optional string CellId = 8;
    optional int32 GPSSource = 9;
    optional string Ticket = 10;
}

message FacingCreateChatRoomResponse {
    required BaseResponse BaseResponse = 1;
    optional string Ticket = 2;
    required uint32 MemberCount = 3;
    repeated FacingMember MemberList = 4;
    optional string ChatRoomName = 5;
}

message GetAddressRequest {
    required BaseRequest BaseRequest = 1;
    required double Longitude = 2;
    required double Latitude = 3;
}

message GetAddressResponse {
    required BaseResponse BaseResponse = 1;
    optional string RetJson = 2;
}

message ECDHKey {
    required int32 Nid = 1;
    required SKBuiltinBuffer_t Key = 2;
}

message NewRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    optional string Pwd = 3;
    optional string NickName = 4;
    optional uint32 BindUin = 5;
    optional string BindEmail = 6;
    optional string BindMobile = 7;
    optional string Ticket = 8;
    optional uint32 BuiltinIPSeq = 12;
    optional uint32 DLSrc = 13;
    optional uint32 RegMode = 14;
    optional string TimeZone = 15;
    optional string Language = 16;
    optional uint32 ForceReg = 17;
    optional string RealCountry = 18;
    optional SKBuiltinBuffer_t RandomEncryKey = 19;
    optional string Alias = 20;
    optional string VerifySignature = 21;
    optional string VerifyContent = 22;
    optional uint32 HasHeadImg = 23;
    optional uint32 SuggestRet = 24;
    optional string ClientSeqID = 31;
    optional string AdSource = 32;
    optional string AndroidID = 33;
    optional string MacAddr = 34;
    optional string AndroidInstallRef = 35;
    optional string ClientFingerprint = 36;
    optional ECDHKey CliPubECDHKey = 37;
    optional string GoogleAid = 38;
    optional string BundleID = 39;
}

message SecAuthRegKeySect {
    required SKBuiltinBuffer_t AutoAuthKey = 1;
    required ECDHKey SvrPubECDHKey = 2;
    required SKBuiltinBuffer_t SessionKey = 3;
    required uint32 AuthResultFlag = 4;
}

message NewRegResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Uin = 2;
    optional string SessionKey = 3;
    optional string OfficialUserName = 4;
    optional string OfficialNickName = 5;
    optional string QQMicroBlogUserName = 6;
    optional string BindEmail = 7;
    required uint32 PushMailStatus = 8;
    optional uint32 SendCardBitFlag = 9;
    optional string PushMailSettingTicket = 10;
    optional BuiltinIPList BuiltinIPList = 14;
    optional string FSURL = 15;
    optional string UserName = 16;
    optional uint32 Status = 17;
    optional NetworkControl NetworkControl = 18;
    optional uint32 ReturnFlag = 19;
    optional uint32 RegType = 20;
    optional string AuthKey = 21;
    optional PluginKeyList PluginKeyList = 22;
    optional string Password = 23;
    optional uint32 ProfileFlag = 24;
    optional HostList NewHostList = 25;
    optional string AutoAuthTicket = 26;
    optional CDNDnsInfo DnsInfo = 27;
    optional string StepTicket = 28;
    optional string VerifySignature = 29;
    optional SKBuiltinBuffer_t VerifyBuff = 30;
    optional ShowStyleKey ShowStyle = 31;
    optional CDNDnsInfo SnsDnsInfo = 32;
    optional CDNDnsInfo AppDnsInfo = 33;
    optional SecAuthRegKeySect SecAuthRegKeySect = 34;
}

message GetSuggestAliasRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t RandomEncryKey = 2;
    optional string RegBindName = 3;
    optional string RegTicket = 4;
    optional string NickName = 5;
    optional string InputAlias = 6;
    optional string VerifySignature = 7;
    optional string VerifyContent = 8;
    required uint32 RegMode = 9;
    optional string Language = 10;
    optional string ClientSeqID = 11;
}

message GetSuggestAliasResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated SKBuiltinString_t List = 3;
    optional string VerifySignature = 4;
    optional SKBuiltinBuffer_t VerifyBuff = 5;
    optional int32 UserNameRet = 6;
}

message BindOpMobileRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    optional string Mobile = 3;
    required int32 Opcode = 4;
    optional string Verifycode = 5;
    optional int32 DialFlag = 6;
    optional string DialLang = 7;
    optional string AuthTicket = 8;
    optional uint32 ForceReg = 9;
    optional string SafeDeviceName = 10;
    optional string SafeDeviceType = 11;
    optional SKBuiltinBuffer_t RandomEncryKey = 12;
    optional string Language = 13;
    optional uint32 InputMobileRetrys = 14;
    optional uint32 AdjustRet = 15;
    optional string ClientSeqID = 16;
}

message BindOpMobileResponse {
    required BaseResponse BaseResponse = 1;
    optional string ticket = 2;
    optional string SmsNo = 3;
    optional uint32 NeedSetPwd = 4;
    optional string Pwd = 5;
    optional string Username = 6;
    optional HostList NewHostList = 7;
    optional BuiltinIPList BuiltinIPList = 8;
    optional NetworkControl NetworkControl = 9;
    optional string AuthTicket = 10;
    optional uint32 SafeDevice = 11;
    optional string CC = 12;
    optional uint32 ObsoleteItem1 = 13;
    optional SafeDeviceList SafeDeviceList = 14;
    optional string PureMobile = 15;
    optional string FormatedMobile = 16;
    optional ShowStyleKey ShowStyle = 17;
}

message EmailRegRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t RandomEncryKey = 2;
    required uint32 Opcode = 3;
    optional string Email = 4;
    optional string Language = 5;
    optional string Pwd = 6;
    optional string VerifyCode = 7;
    optional string ClientSeqID = 8;
    optional string RealCountry = 9;
    optional uint32 VerifyScene = 10;
}

message EmailRegResponse {
    required BaseResponse BaseResponse = 1;
    optional string Ticket = 2;
    optional BuiltinIPList BuiltinIPList = 3;
    optional HostList NewHostList = 4;
    optional ShowStyleKey ShowStyle = 5;
    optional NetworkControl NetworkControl = 6;
}

message SetEmailPwdRequest {
    required BaseRequest BaseRequest = 1;
    optional string Pwd = 2;
    optional string Ticket = 3;
}

message SetEmailPwdResponse {
    required BaseResponse BaseResponse = 1;
}

message UpdateSafeDeviceRequest {
    required BaseRequest BaseRequest = 1;
    optional string Uuid = 2;
    optional string Name = 3;
    optional string DeviceType = 4;
}

message UpdateSafeDeviceResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 SafeDevice = 2;
}

message DelSafeDeviceRequest {
    required BaseRequest BaseRequest = 1;
    optional string Uuid = 2;
}

message DelSafeDeviceResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 SafeDevice = 2;
}

message BindSafeMobileRequest {
    required BaseRequest BaseRequest = 1;
    optional string Mobile = 2;
    required int32 Opcode = 3;
}

message BindSafeMobileResponse {
    required BaseResponse BaseResponse = 1;
}

message BindQQRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 QQ = 2;
    optional string Pwd = 3;
    optional string Pwd2 = 4;
    optional string ImgSid = 5;
    optional string ImgCode = 6;
    required uint32 OPCode = 7;
    optional SKBuiltinString_t ImgEncryptKey = 8;
    optional SKBuiltinBuffer_t KSid = 9;
    optional uint32 SetAsMainAcct = 10;
    optional string SafeDeviceName = 11;
    optional string SafeDeviceType = 12;
    optional SKBuiltinBuffer_t WTLoginReqBuff = 13;
}

message BindQQResponse {
    required BaseResponse BaseResponse = 1;
    optional string ImgSid = 2;
    required SKBuiltinBuffer_t ImgBuf = 3;
    optional uint32 PushMailStatus = 4;
    optional uint32 PrivateMsgStatus = 5;
    optional string MicroBlogName = 6;
    optional uint32 Status = 7;
    optional string QQMailSkey = 8;
    optional SKBuiltinString_t ImgEncryptKey = 9;
    optional SKBuiltinBuffer_t A2Key = 10;
    optional SKBuiltinBuffer_t KSid = 11;
    optional SafeDeviceList SafeDeviceList = 12;
    optional uint32 SafeDevice = 13;
    optional SKBuiltinBuffer_t WTLoginRspBuff = 14;
}

message ResetPwdRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string Pwd = 3;
}

message ResetPwdResponse {
    required BaseResponse BaseResponse = 1;
    optional string Url = 2;
}

message UnBindQQRequest {
    required BaseRequest BaseRequest = 1;
    optional string Ticket = 2;
}

message UnBindQQResponse {
    required BaseResponse BaseResponse = 1;
}

message CheckUnBindRequest {
    required BaseRequest BaseRequest = 1;
    required int32 BindType = 2;
}

message CheckUnBindResponse {
    required BaseResponse BaseResponse = 1;
    optional string RandomPasswd = 2;
    optional string CanUnbindNotice = 3;
}

message FaceBookAuthRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpType = 2;
    optional string AccessToken = 3;
    optional string RandomEncryKey = 4;
}

message FaceBookAuthResponse {
    required BaseResponse BaseResponse = 1;
    required uint64 FBUserID = 2;
    optional string FBUserName = 3;
}

message RegEquipmentRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    optional string SerialNumber = 3;
    optional string IMEI = 4;
    optional string MAC = 5;
    optional string NickName = 6;
    required uint32 BuiltinIPSeq = 7;
    required uint32 DLSrc = 8;
    required uint32 RegMode = 9;
    optional string TimeZone = 10;
    optional string Language = 11;
    required uint32 ForceReg = 12;
    optional string RealCountry = 13;
    required SKBuiltinBuffer_t RandomEncryKey = 14;
}

message RegEquipmentResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Uin = 2;
    optional string SessionKey = 3;
    optional string OfficialUserName = 4;
    optional string OfficialNickName = 5;
    optional string QQMicroBlogUserName = 6;
    optional string BindEmail = 7;
    required uint32 PushMailStatus = 8;
    required uint32 SendCardBitFlag = 9;
    optional string PushMailSettingTicket = 10;
    required BuiltinIPList BuiltinIPList = 14;
    optional string FSURL = 15;
    optional string UserName = 16;
    required uint32 Status = 17;
    required NetworkControl NetworkControl = 18;
    required uint32 ReturnFlag = 19;
    required uint32 RegType = 20;
    optional string AuthKey = 21;
    required PluginKeyList PluginKeyList = 22;
    optional string Password = 23;
    required uint32 ProfileFlag = 24;
    required HostList NewHostList = 25;
}

message ResetEquipmentRequest {
    required BaseRequest BaseRequest = 1;
}

message ResetEquipmentResponse {
    required BaseResponse BaseResponse = 1;
}

message SetPwdRequest {
    required BaseRequest BaseRequest = 1;
    optional string Password = 2;
    optional string Ticket = 3;
    optional SKBuiltinBuffer_t AutoAuthKey = 4;
}

message SetPwdResponse {
    required BaseResponse BaseResponse = 1;
    optional SKBuiltinBuffer_t AutoAuthKey = 2;
}

message QueryHasPswdRequest {
    required BaseRequest BaseRequest = 1;
    required int32 Scene = 2;
}

message QueryHasPswdResponse {
    required BaseResponse BaseResponse = 1;
}

message VerifyPswdRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string Pwd1 = 3;
    optional string Pwd2 = 4;
    optional SKBuiltinString_t ImgSid = 5;
    optional SKBuiltinString_t ImgCode = 6;
    optional SKBuiltinString_t ImgEncryptKey = 7;
    optional SKBuiltinBuffer_t KSid = 8;
    optional uint32 Scence = 9;
    optional SKBuiltinBuffer_t WTLoginReqBuff = 10;
}

message VerifyPswdResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinString_t ImgSid = 2;
    required SKBuiltinBuffer_t ImgBuf = 3;
    optional string Ticket = 4;
    optional SKBuiltinString_t ImgEncryptKey = 5;
    optional SKBuiltinBuffer_t A2Key = 6;
    optional SKBuiltinBuffer_t KSid = 7;
    optional string AuthKey = 8;
    optional SKBuiltinBuffer_t WTLoginRspBuff = 9;
}

message ResetPawInfo {
    required uint32 CreateTime = 1;
    required uint32 IsReset = 2;
    required uint32 ID = 3;
}

message ApplyResetPawRequest {
    required BaseRequest BaseRequest = 1;
    required int32 Type = 2;
    optional string ResetInfo = 3;
    optional uint32 GetMethod = 4;
    optional SKBuiltinBuffer_t RandomEncryKey = 5;
}

message ApplyResetPawResponse {
    required BaseResponse BaseResponse = 1;
}

message GetWeiBoURLReq {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t A2Key = 2;
    optional string UserName = 3;
    optional uint32 Scene = 4;
    optional string BlogUserName = 5;
    optional SKBuiltinBuffer_t A2KeyNew = 6;
}

message GetWeiBoURLResp {
    required BaseResponse BaseResponse = 1;
    optional string URL = 2;
}

message GetUserNameRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 BindUin = 2;
    optional string NickName = 3;
    optional string Ticket = 4;
    optional string Pwd = 5;
    optional string Mobile = 6;
    optional uint32 OpCode = 7;
}

message GetUserNameResponse {
    required BaseResponse BaseResponse = 1;
    optional string UserName = 2;
    optional string Ticket = 3;
}

message IphoneRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Token = 2;
    optional string Sound = 3;
    optional uint32 Status = 4;
    optional string VoipSound = 5;
    optional uint32 TokenCert = 6;
    optional uint32 TokenEnv = 7;
    optional uint32 TokenScene = 8;
}

message IphoneRegResponse {
    required BaseResponse BaseResponse = 1;
}

message IphoneUnRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Token = 2;
}

message IphoneUnRegResponse {
    required BaseResponse BaseResponse = 1;
}

message WinphoneRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Uri = 2;
}

message WinphoneRegResponse {
    required BaseResponse BaseResponse = 1;
}

message WinphoneUnRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Uri = 2;
}

message WinphoneUnRegResponse {
    required BaseResponse BaseResponse = 1;
}

message AshaRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Nid = 2;
}

message AshaRegResponse {
    required BaseResponse BaseResponse = 1;
}

message AshaUnRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Nid = 2;
}

message AshaUnRegResponse {
    required BaseResponse BaseResponse = 1;
}

message BlackBerryRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Pin = 2;
    required uint32 Port = 3;
}

message BlackBerryRegResponse {
    required BaseResponse BaseResponse = 1;
}

message BlackBerryUnRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Pin = 2;
}

message BlackBerryUnRegResponse {
    required BaseResponse BaseResponse = 1;
}

message AndroidGCMRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Token = 2;
}

message AndroidGCMRegResponse {
    required BaseResponse BaseResponse = 1;
}

message AndroidGCMUnRegRequest {
    required BaseRequest BaseRequest = 1;
    optional string Token = 2;
}

message AndroidGCMUnRegResponse {
    required BaseResponse BaseResponse = 1;
}

message RSACert {
    optional string KeyN = 1;
    optional string KeyE = 2;
}

message GetCertRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t RandomEncryKey = 2;
    required uint32 CurrentCertVersion = 3;
}

message GetCertResponse {
    required BaseResponse BaseResponse = 1;
    required RSACert CertValue = 2;
    required uint32 CertVersion = 3;
}

message NewAuthRsaReqData {
    required SKBuiltinBuffer_t RandomEncryKey = 1;
}

message NewAuthRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    required SKBuiltinString_t Pwd = 3;
    required SKBuiltinString_t ImgSid = 4;
    required SKBuiltinString_t ImgCode = 5;
    optional string Pwd2 = 6;
    optional uint32 BuiltinIPSeq = 7;
    optional string extPwd = 8;
    optional string extPwd2 = 9;
    optional string TimeZone = 10;
    optional string Language = 11;
    optional string IMEI = 12;
    optional int32 Channel = 13;
    optional string IPhoneVer = 14;
    optional SKBuiltinString_t ImgEncryptKey = 15;
    optional SKBuiltinBuffer_t KSid = 16;
    optional uint32 TimeStamp = 17;
    optional string DeviceBrand = 18;
    optional string DeviceModel = 19;
    optional string OSType = 20;
    optional string DeviceType = 21;
    optional string SoftType = 22;
    optional string AuthTicket = 23;
    optional string RealCountry = 24;
    optional string Signature = 25;
    required SKBuiltinBuffer_t RandomEncryKey = 26;
    optional string AutoAuthTicket = 27;
    optional string DeviceName = 28;
    optional SKBuiltinBuffer_t WTLoginReqBuff = 29;
    optional uint32 InputType = 30;
    optional string ClientSeqID = 31;
    optional string BundleID = 32;
    optional string AdSource = 33;
    optional SKBuiltinBuffer_t CliDBEncryptKey = 34;
    optional SKBuiltinBuffer_t CliDBEncryptInfo = 35;
    optional string VerifySignature = 36;
    optional string VerifyContent = 37;
    optional uint32 SessionMode = 38;
}

message NewAuthResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Uin = 2;
    required SKBuiltinString_t UserName = 3;
    required SKBuiltinString_t NickName = 4;
    required uint32 BindUin = 5;
    required SKBuiltinString_t BindEmail = 6;
    required SKBuiltinString_t BindMobile = 7;
    required uint32 Status = 8;
    optional bytes SessionKey = 9;
    required SKBuiltinString_t ImgSid = 10;
    required SKBuiltinBuffer_t ImgBuf = 11;
    required SKBuiltinString_t OfficialUserName = 12;
    required SKBuiltinString_t OfficialNickName = 13;
    optional SKBuiltinString_t QQMicroBlogUserName = 14;
    optional uint32 QQMicroBlogStatus = 15;
    optional uint32 NewVersion = 16;
    optional string Ticket = 17;
    optional uint32 PushMailStatus = 18;
    optional uint32 SendCardBitFlag = 19;
    optional string PushMailSettingTicket = 20;
    optional BuiltinIPList BuiltinIPList = 21;
    optional string FSURL = 22;
    optional NetworkControl NetworkControl = 23;
    optional uint32 PluginFlag = 24;
    optional string Alias = 25;
    optional uint32 RegType = 26;
    optional string AuthKey = 27;
    optional string Sid = 28;
    optional PluginKeyList PluginKeyList = 29;
    optional SKBuiltinString_t ImgEncryptKey = 30;
    optional SKBuiltinBuffer_t A2Key = 31;
    optional SKBuiltinBuffer_t KSid = 32;
    optional uint32 ProfileFlag = 33;
    optional string Password = 34;
    optional uint32 TimeStamp = 35;
    optional uint32 IsAutoReg = 36;
    optional string KickResponse = 37;
    optional string ApplyBetaUrl = 38;
    optional string DeviceInfoXml = 39;
    optional string SoftConfigXml = 40;
    optional HostList NewHostList = 41;
    optional string AuthTicket = 42;
    optional uint32 SafeDevice = 43;
    optional uint32 ObsoleteItem1 = 44;
    optional uint32 NeedSetEmailPwd = 45;
    optional string HintMsg = 46;
    optional string AutoAuthTicket = 47;
    optional CDNDnsInfo DnsInfo = 48;
    optional uint32 NextAuthType = 49;
    optional SKBuiltinBuffer_t WTLoginRspBuff = 50;
    optional ShowStyleKey ShowStyle = 51;
    optional SKBuiltinBuffer_t CliDBEncryptKey = 52;
    optional SKBuiltinBuffer_t CliDBEncryptInfo = 53;
    optional uint32 Flag = 54;
    optional CDNDnsInfo SnsDnsInfo = 55;
    optional CDNDnsInfo AppDnsInfo = 56;
    optional string VerifySignature = 57;
    optional SKBuiltinBuffer_t VerifyBuff = 58;
}

message BindGoogleContactRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Opcode = 2;
    optional string GoogleContactName = 3;
    required uint32 Force = 4;
}

message BindGoogleContactResponse {
    required BaseResponse BaseResponse = 1;
}

message BindLinkedinContactRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Opcode = 2;
    required uint32 Visible = 3;
    optional string LinkedinMemberID = 4;
    optional string LinkedinName = 5;
    optional string LinkedinPublicUrl = 6;
    optional string Timestamp = 7;
    optional string Nounce = 8;
    optional string LinkedinSignature = 9;
    optional string LinkedinReturnSignature = 10;
}

message BindLinkedinContactResponse {
    required BaseResponse BaseResponse = 1;
}

message UnBindLinkedinContactRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Opcode = 2;
}

message UnBindLinkedinContactResponse {
    required BaseResponse BaseResponse = 1;
}

message LoginQRCodeNotify {
    optional string UUID = 1;
    required uint32 Status = 2;
    optional string UserName = 3;
    optional string Pwd = 4;
    optional string HeadImgURL = 5;
    optional uint32 PushLoginURLExpiredTime = 6;
    optional string NickName = 7;
    optional uint32 ExpiredTime = 8;
    optional string PairWaitTip = 9;
    optional uint32 AuthorClientVersion = 10;
    optional string AuthorDeviceType = 11;
}

message LoginQRCodeNotifyPkg {
    required SKBuiltinBuffer_t NotifyData = 1;
    required uint32 OPCode = 2;
}

message GetLoginQRCodeRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t RandomEncryKey = 2;
    optional uint32 OPCode = 3;
    optional string DeviceName = 4;
    optional string UserName = 5;
    optional uint32 ExtDevLoginType = 6;
}

message GetLoginQRCodeResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t QRCode = 2;
    optional string UUID = 3;
    required uint32 CheckTime = 4;
    required SKBuiltinBuffer_t NotifyKey = 5;
    optional uint32 ExpiredTime = 6;
    optional string BlueToothBroadCastUUID = 7;
    optional SKBuiltinBuffer_t BlueToothBroadCastContent = 8;
}

message CheckLoginQRCodeRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t RandomEncryKey = 2;
    optional string UUID = 3;
    required uint32 TimeStamp = 4;
    optional uint32 OPCode = 5;
}

message CheckLoginQRCodeResponse {
    required BaseResponse BaseResponse = 1;
    optional LoginQRCodeNotifyPkg NotifyPkg = 3;
}

message GetLoginURLRequest {
    required BaseRequest BaseRequest = 1;
    optional string UUID = 2;
    optional bytes FromDeviceID = 3;
}

message GetLoginURLResponse {
    required BaseResponse BaseResponse = 1;
    optional string URL = 2;
}

message PushLoginURLRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    optional string AutoAuthTicket = 3;
    optional string ClientID = 4;
    required SKBuiltinBuffer_t RandomEncryKey = 5;
    required uint32 OPCode = 6;
    optional string DeviceName = 7;
    optional SKBuiltinBuffer_t AutoAuthKey = 8;
}

message PushLoginURLResponse {
    required BaseResponse BaseResponse = 1;
    optional string UUID = 2;
    required SKBuiltinBuffer_t NotifyKey = 3;
    required uint32 CheckTime = 4;
    required uint32 ExpiredTime = 5;
    optional string BlueToothBroadCastUUID = 6;
    optional SKBuiltinBuffer_t BlueToothBroadCastContent = 7;
}

message BlueToothBindLoginRequest {
    required BaseRequest BaseRequest = 1;
    optional string URL = 2;
    required uint32 OPCode = 3;
}

message BlueToothBindLoginResponse {
    required BaseResponse BaseResponse = 1;
    optional string DeviceName = 2;
    required uint32 ExpiredTime = 3;
    optional string UUID = 4;
    optional string BlueToothBroadCastUUID = 5;
}

message BlueToothAutoLoginRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    optional string UUID = 3;
    optional string AutoAuthTicket = 4;
    required SKBuiltinBuffer_t LoginInfoData = 5;
    required SKBuiltinBuffer_t RandomEncryKey = 6;
    optional string BlueToothBroadCastUUID = 7;
}

message BlueToothAutoLoginResponse {
    required BaseResponse BaseResponse = 1;
    optional string UserName = 2;
    optional string Password = 3;
}

message BlueToothAutoLoginInfoPkg {
    required SKBuiltinBuffer_t Salt = 1;
    required SKBuiltinBuffer_t Data = 2;
}

message BlueToothAutoLoginInfo {
    required uint32 Uin = 1;
    optional string DeviceType = 2;
    required uint32 ClientVersion = 3;
    optional bytes DeviceID = 4;
}

message BindBlackberryPPIDRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Opcode = 2;
    optional string BBPPID = 3;
    optional string BBPIN = 4;
    optional string BBMNickName = 5;
    required uint32 Force = 6;
}

message BindBlackberryPPIDResponse {
    required BaseResponse BaseResponse = 1;
}

message LockWebDeviceRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OPCode = 2;
    optional string BlueToothBroadCastUUID = 3;
    required SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
}

message LockWebDeviceResponse {
    required BaseResponse BaseResponse = 1;
}

message GetIosExtensionKeyRequest {
    required BaseRequest BaseRequest = 1;
    optional uint32 ExtensionSessionType = 2;
    optional bytes ExtensionDeviceId = 3;
}

message ExtSession {
    required uint32 SessionType = 1;
    required SKBuiltinBuffer_t SessionKey = 2;
    required SKBuiltinBuffer_t ServerId = 3;
}

message GetIosExtensionKeyResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t Key = 2;
    optional ExtSession ExtensionSession = 3;
}

message PatternLockBuffer {
    optional uint32 uin = 1;
    optional uint32 version = 2;
    optional SKBuiltinBuffer_t svrpatternhash = 3;
    optional uint32 lockstatus = 4;
    optional SKBuiltinBuffer_t sign = 5;
}

message RegisterNewPatternLockRequest {
    required BaseRequest BaseRequest = 1;
    optional SKBuiltinBuffer_t paytoken = 2;
    optional SKBuiltinBuffer_t patternhash = 3;
    optional uint32 cmd = 4;
}

message RegisterNewPatternLockResponse {
    required BaseResponse BaseResponse = 1;
    optional PatternLockBuffer patternlockbuf = 2;
}

message OpPatternLockRequest {
    required BaseRequest BaseRequest = 1;
    optional uint32 cmd = 2;
    optional SKBuiltinBuffer_t nowpatternhash = 3;
    optional SKBuiltinBuffer_t newpatternhash = 4;
}

message OpPatternLockResponse {
    required BaseResponse BaseResponse = 1;
    optional PatternLockBuffer patternlockbuf = 2;
}

message WTLoginImgReqInfo {
    optional string ImgSid = 1;
    optional string ImgCode = 2;
    optional string ImgEncryptKey = 3;
    required SKBuiltinBuffer_t KSid = 4;
}

message WTLoginImgRespInfo {
    optional string ImgEncryptKey = 1;
    required SKBuiltinBuffer_t KSid = 2;
    optional string ImgSid = 3;
    required SKBuiltinBuffer_t ImgBuf = 4;
}

message WxVerifyCodeReqInfo {
    optional string VerifySignature = 1;
    optional string VerifyContent = 2;
}

message WxVerifyCodeRespInfo {
    optional string VerifySignature = 1;
    required SKBuiltinBuffer_t VerifyBuff = 2;
}

message BaseAuthReqInfo {
    optional SKBuiltinBuffer_t WTLoginReqBuff = 1;
    optional WTLoginImgReqInfo WTLoginImgReqInfo = 2;
    optional WxVerifyCodeReqInfo WxVerifyCodeReqInfo = 3;
    optional SKBuiltinBuffer_t CliDBEncryptKey = 4;
    optional SKBuiltinBuffer_t CliDBEncryptInfo = 5;
    optional uint32 AuthReqFlag = 6;
    optional string AuthTicket = 7;
}

message ManualAuthRsaReqData {
    required SKBuiltinBuffer_t RandomEncryKey = 1;
    optional ECDHKey CliPubECDHKey = 2;
    optional string UserName = 3;
    optional string Pwd = 4;
    optional string Pwd2 = 5;
}

message ManualAuthAesReqData {
    required BaseRequest BaseRequest = 1;
    optional BaseAuthReqInfo BaseReqInfo = 2;
    optional string IMEI = 3;
    optional string SoftType = 4;
    required uint32 BuiltinIPSeq = 5;
    optional string ClientSeqID = 6;
    optional string Signature = 7; //无
    optional string DeviceName = 8;
    optional string DeviceType = 9;
    optional string Language = 10;
    optional string TimeZone = 11;
    optional int32 Channel = 13;
    optional uint32 TimeStamp = 14;
    optional string DeviceBrand = 15; //Apple
    optional string DeviceModel = 16;
    optional string OSType = 17;
    optional string RealCountry = 18;
    optional string BundleID = 19; //包名
    optional string AdSource = 20;
    optional string IPhoneVer = 21; //iPad4.4
    required uint32 InputType = 22;
    optional SKBuiltinBuffer_t Clientcheckdat = 23;
}

message ManualAuthRequest {
    required ManualAuthRsaReqData RsaReqData = 1;
    required ManualAuthAesReqData AesReqData = 2;
}

message AutoAuthRsaReqData {
    required SKBuiltinBuffer_t AesEncryptKey = 2;
    optional ECDHKey CliPubECDHKey = 3;
}

message AutoAuthKey {
    required SKBuiltinBuffer_t EncryptKey = 1;
    required SKBuiltinBuffer_t Key = 2;
}

message AutoAuthAesReqData {
    required BaseRequest BaseRequest = 1;
    optional BaseAuthReqInfo BaseReqInfo = 2;
    required SKBuiltinBuffer_t AutoAuthKey = 3;
    optional string IMEI = 4;
    optional string SoftType = 5;
    required uint32 BuiltinIPSeq = 6;
    optional string ClientSeqID = 7;
    optional string Signature = 8;
    optional string DeviceName = 9;
    optional string DeviceType = 10;
    optional string Language = 11;
    optional string TimeZone = 12;
}

message AutoAuthRequest {
    required AutoAuthRsaReqData RsaReqData = 1;
    required AutoAuthAesReqData AesReqData = 2;
}

message NetworkSectResp {
    optional HostList NewHostList = 1;
    optional NetworkControl NetworkControl = 2;
    optional BuiltinIPList BuiltinIPList = 3;
}

message AuthSectResp {
    required uint32 Uin = 1;
    required ECDHKey SvrPubECDHKey = 2;
    required SKBuiltinBuffer_t SessionKey = 3;
    required SKBuiltinBuffer_t AutoAuthKey = 4;
    required uint32 WTLoginRspBuffFlag = 5;
    optional SKBuiltinBuffer_t WTLoginRspBuff = 6;
    optional WTLoginImgRespInfo WTLoginImgRespInfo = 7;
    optional WxVerifyCodeRespInfo WxVerifyCodeRespInfo = 8;
    optional SKBuiltinBuffer_t CliDBEncryptKey = 9;
    optional SKBuiltinBuffer_t CliDBEncryptInfo = 10;
    optional string AuthKey = 11;
    optional SKBuiltinBuffer_t A2Key = 12;
    optional string ApplyBetaUrl = 14;
    optional ShowStyleKey ShowStyle = 15;
    optional string AuthTicket = 16;
    optional uint32 NewVersion = 17;
    optional uint32 UpdateFlag = 18;
    optional uint32 AuthResultFlag = 19;
    optional string FSURL = 20;
}

message AcctSectResp {
    optional string UserName = 1;
    optional string NickName = 2;
    required uint32 BindUin = 3;
    optional string BindEmail = 4;
    optional string BindMobile = 5;
    optional string Alias = 6;
    required uint32 Status = 8;
    optional uint32 PluginFlag = 9;
    optional uint32 RegType = 10;
    optional string DeviceInfoXml = 11;
    optional uint32 SafeDevice = 12;
    optional string OfficialUserName = 13;
    optional string OfficialNickName = 14;
    optional uint32 PushMailStatus = 15;
    optional string FSURL = 16;
}

message UnifyAuthResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 UnifyAuthSectFlag = 2;
    optional AuthSectResp AuthSectResp = 3;
    optional AcctSectResp AcctSectResp = 4;
    optional NetworkSectResp NetworkSectResp = 5;
}

message GetA8KeyReq {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional SKBuiltinBuffer_t A2Key = 3;
    optional SKBuiltinString_t AppID = 4;
    optional SKBuiltinString_t Scope = 5;
    optional SKBuiltinString_t State = 6;
    optional SKBuiltinString_t ReqUrl = 7;
    optional string FriendUserName = 8;
    optional uint32 FriendQQ = 9;
    optional uint32 Scene = 10;
    optional string UserName = 11;
    optional string BundleID = 12;
    optional SKBuiltinBuffer_t A2KeyNew = 13;
    optional uint32 Reason = 14;
    optional uint32 FontScale = 15;
    optional uint32 Flag = 16;
    optional string NetType = 17;
}

message JSAPIPermissionBitSet {
    required uint32 BitValue = 1;
    optional uint32 BitValue2 = 2;
    optional uint32 BitValue3 = 3;
    optional uint32 BitValue4 = 4;
}

message GeneralControlBitSet {
    required uint32 BitValue = 1;
}

message DeepLinkBitSet {
    required uint64 BitValue = 1;
}

message BizApiInfo {
    optional string ApiName = 1;
}

message BizScopeInfo {
    optional string Scope = 1;
    required uint32 ScopeStatus = 2;
    optional string ScopeDesc = 3;
    required uint32 ApiCount = 4;
    repeated BizApiInfo ApiList = 5;
}

message YYBStruct {
    optional uint32 AndroidDownloadFlag = 1;
    optional string DownloadUrl = 2;
    optional string ApkMd5 = 3;
    optional string PreemptiveUrl = 4;
    optional string ExtInfo = 5;
    optional string DownloadTipsWording = 6;
    optional int32 SupportedVersionCode = 7;
}

message GetA8KeyResp {
    required BaseResponse BaseResponse = 1;
    optional string FullURL = 2;
    optional string A8Key = 3;
    optional uint32 ActionCode = 4;
    optional string Title = 5;
    optional string Content = 6;
    optional JSAPIPermissionBitSet JSAPIPermission = 7;
    optional GeneralControlBitSet GeneralControlBitSet = 8;
    optional string UserName = 9;
    optional string ShareURL = 15;
    optional uint32 ScopeCount = 16;
    repeated BizScopeInfo ScopeList = 17;
    optional string AntispamTicket = 18;
    optional string SSID = 20;
    optional string MID = 21;
    optional DeepLinkBitSet DeepLinkBitSet = 22;
    optional SKBuiltinBuffer_t JSAPIControlBytes = 23;
}

message AdAppList {
    optional string AppID = 1;
    optional string AppCoverUrl = 2;
    optional string AppDownloadUrl = 3;
    optional string AndroidApkMd5 = 4;
    optional string AppName = 5;
    optional string AppIconUrl = 6;
    optional string AppSnsDesc = 7;
    optional string AndroidPackageName = 8;
    optional string GooglePlayDownloadUrl = 9;
    optional YYBStruct SYYB = 10;
    optional string ExtAsXML = 11;
}

message GiftList {
    optional string GiftID = 1;
    optional string IconUrl = 2;
    optional string Title = 3;
    optional string Desc = 4;
    optional string GiftUrl = 5;
}

message GiftEntranceItem {
    optional string CellTitle = 1;
    optional string EnranceWording = 2;
    optional string AllGiftUrl = 3;
}

message RcAppList {
    optional string AppID = 1;
    optional string AppName = 2;
    optional string AppIconUrl = 3;
    optional string AppDesc = 4;
    optional string AppDownloadUrl = 5;
    optional string AppCoverUrl = 6;
    optional string AppDevInfo = 7;
    required int32 AppScreenShotCount = 8;
    repeated SKBuiltinString_t AppScreenShotList = 9;
    optional string AppSnsDesc = 10;
    optional string AppSnapshotUrl = 11;
    optional string AppDetailDesc = 12;
    optional uint32 FriendCount = 13;
    optional string AppType = 14;
    optional string AndroidApkMd5 = 15;
    optional string AndroidPackageName = 16;
    optional string AppNamezhTW = 17;
    optional string AppNameEnUS = 18;
    optional string GooglePlayDownloadUrl = 19;
    optional string AppSuggestionIconUrl = 20;
    optional string AppSuggestionIntroUrl = 21;
    optional YYBStruct SYYB = 22;
    optional string AppLaunchScheme = 23;
    optional uint32 GooglePlayDownloadFlag = 24;
    optional uint32 AppInfoFlag = 25;
}

message GetGameIntroListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated SKBuiltinString_t AppIdList = 3;
    optional string DevicePlatform = 4;
}

message GameIntro {
    optional string AppID = 1;
    optional string GameIntroPage = 2;
    optional string AndroidApkMd5 = 3;
    optional string AppDownloadUrl = 4;
    optional string GooglePlayDownloadUrl = 5;
    optional YYBStruct SYYB = 6;
}

message GetGameIntroListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated GameIntro GameIntroList = 3;
}

message GetAppPersonalInfoListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated SKBuiltinString_t AppIdList = 3;
    optional uint32 Scene = 4;
}

message AppPersonalInfo {
    optional string AppID = 1;
    optional string PersonalSettingXml = 2;
}

message GetAppPersonalInfoListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated AppPersonalInfo AppPersonalInfoList = 3;
}

message GetSuggestionAppDetailRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    optional string Lang = 3;
}

message GetSuggestionAppDetailResponse {
    required BaseResponse BaseResponse = 1;
    required RcAppList RcDetail = 2;
}

message UserGameRankInfo {
    optional string UserName = 1;
    required uint32 Score = 2;
    optional uint32 Rank = 3;
}

message GetGameRankListRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
}

message GetGameRankListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated UserGameRankInfo RankList = 3;
    optional uint32 FriendsCount = 4;
    optional uint32 HasReportScore = 5;
    optional YYBStruct SYYB = 6;
}

message GetAppInfoListRequest {
    required BaseRequest BaseRequest = 1;
    required int32 Count = 2;
    repeated SKBuiltinString_t AppIdList = 3;
}

message BizAppInfo {
    optional string AppId = 1;
    optional string Name = 2;
    optional string Description = 3;
    optional string Name4EnUS = 4;
    optional string Description4EnUS = 5;
    optional string Name4ZhTW = 6;
    optional string Description4ZhTW = 7;
    optional string IconUrlSD = 8;
    optional string IconUrlHD = 9;
    optional string StoreUrl = 10;
    optional string WatermarkUrl = 11;
    optional string AndroidPackageName = 12;
    optional string AndroidSignature = 13;
    optional string AppType = 14;
    optional string DevInfo = 15;
    required uint32 AppInfoFlag = 16;
    required uint32 AppVersion = 17;
    optional uint32 AppUpdateVersion = 18;
    optional string IconUrlMDPI = 19;
    optional string DownloadUrl = 20;
    optional string DownloadUrlMd5 = 21;
    optional string GooglePlayDownloadUrl = 22;
}

message GetAppInfoListResponse {
    required BaseResponse BaseResponse = 1;
    required int32 Count = 2;
    repeated BizAppInfo AppInfoList = 3;
}

message AppCenterRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    required SKBuiltinBuffer_t ReqBuf = 3;
}

message AppCenterResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t RespBuf = 2;
}

message GetAuthAppListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    optional string Lang = 3;
}

message AuthAppBaseInfo {
    optional string AppID = 1;
    optional string AppType = 2;
    optional string IconUrl = 3;
    optional string AppName = 4;
    required uint32 AppFlag = 5;
    optional string ExternInfo = 6;
    optional string AuthInfo = 7;
    optional string DevInfo = 8;
}

message GetAuthAppListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 AppCount = 2;
    repeated AuthAppBaseInfo AuthAppList = 3;
}

message GetAuthAppInfoRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
}

message GetAuthAppInfoResponse {
    required BaseResponse BaseResponse = 1;
    required AuthAppBaseInfo BaseInfo = 2;
    optional string AuthInfo = 3;
    optional string DevInfo = 4;
    optional string ExternInfo = 5;
}

message SetAppSettingRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 CmdID = 3;
    optional string CmdValue = 4;
}

message SetAppSettingResponse {
    required BaseResponse BaseResponse = 1;
    optional string AppID = 2;
    required uint32 AppFlag = 3;
    required uint32 CmdID = 4;
}

message AppSettingReq {
    optional string AppID = 1;
}

message AppSetting {
    optional string AppID = 1;
    required uint32 AppFlag = 2;
    optional string OpenID = 3;
}

message GetAppSettingRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 AppCount = 2;
    repeated AppSettingReq AppSettingReqList = 3;
}

message GetAppSettingResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 AppCount = 2;
    repeated AppSetting SettingList = 3;
}

message GetSuggestionAppListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 AppType = 2;
    required uint32 OffSet = 3;
    required uint32 Limit = 4;
    optional string Lang = 5;
    optional uint32 InstalledAppCount = 6;
    repeated SKBuiltinString_t InstalledAppList = 7;
}

message GetSuggestionAppListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 RcCount = 2;
    repeated RcAppList RcList = 3;
    optional uint32 IsInternalDownload = 4;
    optional uint32 AdCount = 5;
    repeated AdAppList AdList = 6;
    optional uint32 GiftCount = 7;
    repeated GiftList GiftList = 8;
    optional GiftEntranceItem GiftEntranceItem = 9;
}

message JSOAuthRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    optional string Url = 3;
    optional string Scope = 4;
    optional string Signature = 5;
    optional string Signature_method = 6;
    optional string TimeStamp = 7;
    optional string Nonce = 8;
}

message JSOAuthResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ScopeCount = 2;
    repeated BizScopeInfo ScopeList = 3;
    optional string OAuthTitle = 4;
}

message SetOAuthScopeRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 ScopeCount = 3;
    repeated BizScopeInfo ScopeList = 4;
}

message SetOAuthScopeResponse {
    required BaseRequest BaseRequest = 1;
    required uint32 ScopeCount = 2;
    repeated BizScopeInfo ScopeList = 3;
}

message GetUserInfoInAppRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppID = 2;
    required uint32 UserCount = 3;
    repeated SKBuiltinString_t UserNameList = 4;
    required uint32 Scene = 5;
}

message UserInfoInApp {
    optional string UserName = 1;
    optional string PersonalSettingXml = 2;
}

message GetUserInfoInAppResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 UserCount = 2;
    repeated UserInfoInApp UserInfoList = 3;
}

message CheckCanSubscribeBizRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Source = 2;
    optional string ToUserName = 3;
    optional string ExtInfo = 4;
    optional string AppID = 5;
    required uint32 PackNum = 6;
    repeated SKBuiltinString_t AndroidPackNameList = 7;
    optional string IosBunddleID = 8;
    optional string FromURL = 9;
    optional uint32 Scene = 10;
}

message CheckCanSubscribeBizResponse {
    required BaseResponse BaseResponse = 1;
    optional string CheckTicket = 2;
    optional string ToUserName = 3;
    optional string WebViewUrl = 4;
    optional string ShowWord = 5;
}

message RcptInfoNode {
    optional uint32 id = 1;
    optional SKBuiltinString_t country = 2;
    required SKBuiltinString_t province = 3;
    required SKBuiltinString_t city = 4;
    required SKBuiltinString_t district = 5;
    required SKBuiltinString_t zipcode = 6;
    required SKBuiltinString_t detail = 7;
    required SKBuiltinString_t name = 8;
    required SKBuiltinString_t phone = 9;
    optional SKBuiltinString_t nationalcode_gbt2260 = 10;
}

message RcptInfoList {
    required uint32 count = 1;
    repeated RcptInfoNode rcptinfolist = 2;
    required uint32 timestamp = 3;
}

message RcptInfoAddRequest {
    required BaseRequest BaseRequest = 1;
    required RcptInfoNode rcptinfo = 2;
}

message RcptInfoAddResponse {
    required RcptInfoList rcptinfolist = 1;
    required BaseResponse BaseResponse = 2;
}

message RcptInfoRemoveRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 id = 2;
}

message RcptInfoRemoveResponse {
    required uint32 id = 1;
    required RcptInfoList rcptinfolist = 2;
    required BaseResponse BaseResponse = 3;
}

message RcptInfoQueryRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 timestamp = 2;
    optional string webviewurl = 3;
    optional string appid = 4;
    optional uint32 scene = 5;
}

message RcptInfoQueryResponse {
    required RcptInfoList rcptinfolist = 1;
    required uint32 islatest = 2;
    required BaseResponse BaseResponse = 3;
    optional string appusername = 4;
    optional uint32 isauthority = 5;
    optional string appnickname = 6;
}

message RcptInfoUpdateRequest {
    required BaseRequest BaseRequest = 1;
    required RcptInfoNode rcptinfo = 2;
}

message RcptInfoUpdateResponse {
    required RcptInfoList rcptinfolist = 1;
    required BaseResponse BaseResponse = 2;
}

message RcptInfoTouchRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 id = 2;
}

message RcptInfoTouchResponse {
    required RcptInfoList rcptinfolist = 1;
    required BaseResponse BaseResponse = 2;
}

message RcptInfoImportYiXunRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 qq = 2;
    optional SKBuiltinBuffer_t A2Key = 3;
    optional SKBuiltinBuffer_t NewA2Key = 4;
}

message RcptInfoImportYiXunResponse {
    required RcptInfoList rcptinfolist = 1;
    required int32 rcptinfoimportstatus = 2;
    required BaseResponse BaseResponse = 3;
}

message GenBizIapPrepayRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppId = 2;
    optional string NonceStr = 3;
    optional string TimeStamp = 4;
    optional string Package = 5;
    optional string PaySign = 6;
    optional string SignType = 7;
    optional string StepInUrl = 8;
}

message GenBizIapPrepayResponse {
    required BaseResponse BaseResponse = 1;
    optional string ProductId = 2;
    optional string ExtInfo = 4;
}

message GetBizIapPayResultRequest {
    required BaseRequest BaseRequest = 1;
    optional string SerialId = 2;
}

message GetBizIapPayResultResponse {
    required BaseResponse BaseResponse = 1;
    optional string DetailBuff = 2;
}

message GetBizIapDetailRequest {
    required BaseRequest BaseRequest = 1;
    optional string SerialId = 3;
}

message GetBizIapDetailResponse {
    required BaseResponse BaseResponse = 1;
    optional string DetailBuff = 2;
}

message GetProductDetailRequest {
    required BaseRequest BaseRequest = 1;
    optional string Pid = 2;
    optional uint32 Version = 3;
    optional string ScanCode = 4;
}

message GetProductDetailResponse {
    required BaseResponse BaseResponse = 1;
    optional string ProductInfo = 2;
    optional int32 RetCode = 3;
    optional string RetMsg = 4;
    optional string RecommendInfo = 5;
}

message LockStockRequest {
    required BaseRequest BaseRequest = 1;
    optional string Pid = 2;
    optional string SkuId = 3;
    optional uint32 Count = 4;
    optional string Url = 5;
}

message LockStockResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 LockId = 2;
}

message UnlockStockRequest {
    required BaseRequest BaseRequest = 1;
    optional string Pid = 2;
    optional string SkuId = 3;
    optional uint32 Count = 4;
    optional string Url = 5;
}

message UnlockStockResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 LockId = 2;
}

message KVItem {
    optional string Key = 1;
    optional string Value = 2;
}

message Express {
    optional string Name = 1;
    optional uint32 Price = 2;
    optional string PriceType = 3;
    optional uint32 Id = 4;
}

message Address {
    optional string Country = 1;
    optional string Province = 2;
    optional string City = 3;
    optional string Detail = 4;
    optional string UserName = 5;
    optional string Tel = 6;
    optional string ZipCode = 7;
}

message Receipt {
    required uint32 IsNeed = 1;
    optional string Detail = 2;
}

message Discount {
    optional string Title = 1;
    required uint32 Price = 2;
}

message Production {
    required uint32 SkuCount = 1;
    repeated KVItem Skus = 2;
    required uint32 Count = 3;
    required uint32 RealPrice = 4;
    optional string PriceType = 5;
    optional string Pid = 6;
    optional string SafeUrl = 7;
    optional string SkuId = 8;
    optional uint32 Type = 9;
    optional string Name = 10;
    optional string ThumbUrl = 11;
    optional uint32 SubType = 12;
    optional uint32 Scene = 13;
    optional string PreferentialPrice = 14;
    optional uint32 DiscountCount = 15;
    repeated Discount Discounts = 16;
}

message Snapshot {
    required uint32 ProductCount = 1;
    repeated Production Productions = 2;
    optional Express Express = 3;
    optional Address Address = 4;
    repeated Receipt Receipt = 5;
    optional uint32 ReceiptCount = 6;
    optional string LockId = 7;
}

message SubmitMallOrderRequest {
    required BaseRequest BaseRequest = 1;
    optional Snapshot Snapshot = 2;
    optional string PayAppid = 3;
}

message SubmitMallOrderResponse {
    required BaseResponse BaseResponse = 1;
    optional string PrepareId = 2;
    optional int32 RetCode = 3;
    optional string RetMsg = 4;
}

message SubmitMallFreeOrderRequest {
    required BaseRequest BaseRequest = 1;
    optional Snapshot Snapshot = 2;
}

message SubmitMallFreeOrderResponse {
    required BaseResponse BaseResponse = 1;
    optional string PrepareId = 2;
    optional int32 RetCode = 3;
    optional string RetMsg = 4;
}

message SampleProduct {
    optional string Pid = 1;
    optional string SkuId = 2;
    optional uint32 Count = 3;
    optional string SafeUrl = 4;
}

message ActionAttr {
    optional string Name = 1;
    optional string Tips = 2;
    optional uint32 Type = 3;
    optional string Content = 4;
    optional string IconUrl = 5;
}

message PreSubmitOrderRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ProductCount = 2;
    repeated SampleProduct Product = 3;
}

message PreSubmitOrderResponse {
    optional BaseResponse BaseResponse = 1;
    optional uint32 ExpressCount = 2;
    repeated Express Express = 3;
    optional string LockId = 4;
    optional int32 RetCode = 5;
    optional string RetMsg = 6;
    repeated ActionAttr ActionAttrs = 7;
    optional uint32 ActionAttrCount = 8;
}

message CancelPreOrderRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ProductCount = 2;
    repeated SampleProduct Product = 3;
    optional string LockId = 4;
}

message CancelPreOrderResponse {
    required BaseResponse BaseResponse = 1;
    optional int32 RetCode = 2;
    optional string RetMsg = 3;
}

message OrderDetailControlRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ActionCode = 2;
    optional string TransID = 3;
}

message OrderDetailControlResponse {
    required BaseResponse BaseResponse = 1;
    optional int32 RetCode = 2;
    optional string RetMsg = 3;
}

message GetProductDiscountRequest {
    required BaseRequest BaseRequest = 1;
    optional string LockId = 2;
    optional string Url = 3;
}

message GetProductDiscountResponse {
    required BaseResponse BaseResponse = 1;
    optional string DiscountDetail = 2;
    optional int32 RetCode = 3;
    optional string RetMsg = 4;
}

message GetLastestExpressInfoRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductId = 2;
    optional string LockId = 3;
    required Address Address = 4;
}

message GetLastestExpressInfoResponse {
    required BaseResponse BaseResponse = 1;
    repeated Express ExpressList = 2;
    optional uint32 ExpressCount = 3;
    optional int32 RetCode = 4;
    optional string RetMsg = 5;
}

message SendC2CSecMsgRequest {
    required BaseRequest BaseRequest = 1;
    optional string ToUser = 2;
    optional int32 MsgType = 3;
    optional string TempId = 4;
    optional string Title = 5;
    optional string Des = 6;
    optional string Url = 7;
    optional int32 Scene = 8;
}

message SendC2cSecMsgResponse {
    required BaseResponse BaseResponse = 1;
    optional int32 ErrCode = 2;
    optional string ErrMsg = 3;
    optional string MsgId = 4;
}

message MicroMsgRequestNew {
    required SKBuiltinString_t ToUserName = 1;
    optional string Content = 2;
    required uint32 Type = 3;
    required uint32 CreateTime = 4;
    required uint32 ClientMsgId = 5;
    optional string MsgSource = 6;
    optional uint32 CtrlBit = 7;
}

message SendMsgRequestNew {
    required uint32 Count = 1;
    repeated MicroMsgRequestNew List = 2;
}

message MicroMsgResponseNew {
    required int32 Ret = 1;
    required SKBuiltinString_t ToUserName = 2;
    required uint32 MsgId = 3;
    required uint32 ClientMsgId = 4;
    required uint32 CreateTime = 5;
    required uint32 ServerTime = 6;
    required uint32 Type = 7;
    optional uint64 NewMsgId = 8;
}

message SendMsgResponseNew {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated MicroMsgResponseNew List = 3;
}

message RemindSyncRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Selector = 2;
    required SKBuiltinBuffer_t KeyBuff = 3;
}

message RemindSyncResponse {
    required BaseResponse BaseResponse = 1;
    required CmdList CmdList = 2;
    required SKBuiltinBuffer_t KeyBuff = 3;
    required uint32 ContinueFlag = 4;
}

message ModRemindCmd {
    required uint32 RemindID = 1;
    required uint64 RemindTime = 2;
    required uint32 Flag = 3;
}

message RemindMember {
    optional string UserName = 1;
}

message RemindItem {
    required uint32 RemindID = 1;
    required uint32 CreateTime = 2;
    required uint64 RemindTime = 3;
    optional string FromUser = 4;
    required uint32 ToUserCount = 5;
    repeated RemindMember ToUserList = 6;
    required uint32 Flag = 7;
    optional string Content = 8;
}

message BatchGetRemindInfoRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 RemindIDCount = 2;
    repeated uint32 RemindIDList = 3 [packed = true];
}

message BatchGetRemindInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 RemindInfoCount = 2;
    repeated RemindItem RemindInfoList = 3;
}

message AddRemindRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientID = 2;
    required uint64 RemindTime = 3;
    required uint32 ToUserCount = 4;
    repeated RemindMember ToUserList = 5;
    optional string Content = 6;
}

message AddRemindResponse {
    required BaseResponse BaseResponse = 1;
}

message DelRemindRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 RemindID = 2;
}

message DelRemindResponse {
    required BaseResponse BaseResponse = 1;
}

message TwitterInfo {
    optional string Oauth_Token = 1;
    optional string Oauth_Token_Secret = 2;
}

message SnsBufferUrl {
    optional string Url = 1;
    required uint32 Type = 2;
}

message SnsUploadRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    required uint32 StartPos = 3;
    required uint32 TotalLen = 4;
    required SKBuiltinBuffer_t Buffer = 5;
    optional string ClientId = 6;
    optional uint32 FilterStype = 7;
    optional uint32 SyncFlag = 8;
    optional string Description = 9;
    optional int32 PhotoFrom = 10;
    optional int32 NetType = 11;
    optional TwitterInfo TwitterInfo = 12;
    optional string AppId = 13;
    optional uint32 ExtFlag = 14;
    optional string MD5 = 15;
}

message SnsUploadResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 StartPos = 2;
    required uint32 TotalLen = 3;
    optional string ClientId = 4;
    required SnsBufferUrl BufferUrl = 5;
    required uint32 ThumbUrlCount = 6;
    repeated SnsBufferUrl ThumbUrls = 7;
    required uint64 Id = 8;
    required uint32 Type = 9;
}

message SnsDownloadRequest {
    required BaseRequest BaseRequest = 1;
    required int32 StartPos = 2;
    optional int32 TotalLen = 3;
    optional string BufferId = 4;
    required uint32 Type = 5;
    required uint32 DownBufLen = 6;
}

message SnsDownloadResponse {
    required BaseResponse BaseResponse = 1;
    required int32 StartPos = 2;
    required int32 TotalLen = 3;
    required SKBuiltinBuffer_t Buffer = 4;
    optional string BufferId = 5;
    required uint32 Type = 6;
}

message SnsCommentInfo {
    optional string Username = 1;
    optional string Nickname = 2;
    required uint32 Source = 3;
    required uint32 Type = 4;
    optional string Content = 5;
    required uint32 CreateTime = 6;
    optional int32 CommentId = 7;
    optional int32 ReplyCommentId = 8;
    optional string ReplyUsername = 9;
    optional uint32 IsNotRichText = 10;
    optional uint64 ReplyCommentId2 = 11;
    optional uint64 CommentId2 = 12;
    optional uint32 DeleteFlag = 13;
}

message SnsGroup {
    required uint64 GroupId = 1;
}

message SnsObject {
    required uint64 Id = 1;
    optional string Username = 2;
    optional string Nickname = 3;
    required uint32 CreateTime = 4;
    required SKBuiltinBuffer_t ObjectDesc = 5;
    required uint32 LikeFlag = 6;
    required uint32 LikeCount = 7;
    required uint32 LikeUserListCount = 8;
    repeated SnsCommentInfo LikeUserList = 9;
    required uint32 CommentCount = 10;
    required uint32 CommentUserListCount = 11;
    repeated SnsCommentInfo CommentUserList = 12;
    required uint32 WithUserCount = 13;
    required uint32 WithUserListCount = 14;
    repeated SnsCommentInfo WithUserList = 15;
    optional uint32 ExtFlag = 16;
    optional uint32 NoChange = 17;
    optional uint32 GroupCount = 18;
    repeated SnsGroup GroupList = 19;
    optional uint32 IsNotRichText = 20;
    optional string ReferUsername = 21;
    optional uint64 ReferId = 22;
    optional uint32 BlackListCount = 23;
    repeated SKBuiltinString_t BlackList = 24;
    optional uint32 DeleteFlag = 25;
    optional uint32 GroupUserCount = 26;
    repeated SKBuiltinString_t GroupUser = 27;
    optional SKBuiltinString_ objectOperations = 28;
    optional SnsRedEnvelops snsRedEnvelops = 29;
    optional PreDownloadInfo preDownloadInfo = 30;
    optional SnsWeAppInfo weAppInfo = 31;
}

message SKBuiltinString_ {
    optional uint32 iLen = 1;
    optional bytes buffer = 2;
}

message PreDownloadInfo {
    optional uint32 preDownloadPercent = 1;
    optional uint32 preDownloadNetType = 2;
    optional string noPreDownloadRange = 3;
}

message SnsRedEnvelops {
    optional uint32 rewardCount = 1;
    optional bytes rewardUserList = 2;
    optional uint32 resourceId = 3;
    optional uint32 reportId = 4;
    optional uint32 reportKey = 5;
}

message SnsADObject {
    required SnsObject SnsObject = 1;
    optional SKBuiltinString_t ADXML = 2;
}

message AdvertiseObject {
    required SnsADObject SnsADObject = 1;
    optional SKBuiltinString_t ADInfo = 2;
}

message SnsPostCtocUploadInfo {
    required uint32 Flag = 1;
    required uint32 PhotoCount = 2;
}

message SnsPostRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t ObjectDesc = 2;
    optional uint32 WithUserListCount = 3;
    repeated SKBuiltinString_t WithUserList = 4;
    optional uint32 Privacy = 5;
    optional uint32 SyncFlag = 6;
    optional string ClientId = 7;
    optional uint32 PostBGImgType = 8;
    optional uint32 GroupCount = 9;
    repeated SnsGroup GroupIds = 10;
    optional uint32 ObjectSource = 11;
    optional uint64 ReferId = 12;
    optional uint32 BlackListCount = 13;
    repeated SKBuiltinString_t BlackList = 14;
    optional TwitterInfo TwitterInfo = 15;
    optional uint32 GroupUserCount = 16;
    repeated SKBuiltinString_t GroupUser = 17;
    optional SnsPostCtocUploadInfo CtocUploadInfo = 18;
}

message SnsPostResponse {
    required BaseResponse BaseResponse = 1;
    required SnsObject SnsObject = 2;
}

message SnsObjectDetailRequest {
    required BaseRequest BaseRequest = 1;
    required uint64 Id = 2;
    optional uint32 GroupDetail = 3;
}

message SnsObjectDetailResponse {
    required BaseResponse BaseResponse = 1;
    required SnsObject Object = 2;
}

message SnsADObjectDetailRequest {
    required BaseRequest BaseRequest = 1;
    required uint64 Id = 2;
    optional uint32 Scene = 3;
    optional SKBuiltinBuffer_t Session = 4;
}

message SnsADObjectDetailResponse {
    required BaseResponse BaseResponse = 1;
    required SnsADObject Object = 2;
    optional SKBuiltinBuffer_t Session = 3;
}

message SnsServerConfig {
    optional int32 PostMentionLimit = 1;
    optional int32 CopyAndPasteWordLimit = 2;
}

message SnsTimeLineRequest {
    required BaseRequest BaseRequest = 1;
    optional string FirstPageMd5 = 2;
    required uint64 MaxId = 3;
    optional uint64 MinFilterId = 4;
    optional uint32 LastRequestTime = 5;
    optional uint64 ClientLatestId = 6;
    optional SKBuiltinBuffer_t Session = 7;
}

message SnsTimeLineResponse {
    required BaseResponse BaseResponse = 1;
    optional string FirstPageMd5 = 2;
    required uint32 ObjectCount = 3;
    repeated SnsObject ObjectList = 4;
    optional uint32 NewRequestTime = 5;
    optional uint32 ObjectCountForSameMd5 = 6;
    optional uint32 ControlFlag = 7;
    optional SnsServerConfig ServerConfig = 8;
    optional uint32 AdvertiseCount = 9;
    repeated AdvertiseObject AdvertiseList = 10;
    optional SKBuiltinBuffer_t Session = 11;
}

message SnsTimeLineWithTypeRequest {
    required BaseRequest BaseRequest = 1;
    optional uint64 SelectType = 2;
}

message SnsTimeLineWithTypeResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ObjectCount = 2;
    repeated SnsObject ObjectList = 3;
}

message SnsUserPageRequest {
    required BaseRequest BaseRequest = 1;
    optional string FirstPageMd5 = 2;
    optional string Username = 3;
    required uint64 MaxId = 4;
    optional uint32 Source = 5;
    optional uint64 MinFilterId = 6;
    optional uint32 LastRequestTime = 7;
}

message SnsUserPageResponse {
    required BaseResponse BaseResponse = 1;
    optional string FirstPageMd5 = 2;
    required uint32 ObjectCount = 3;
    repeated SnsObject ObjectList = 4;
    required uint32 ObjectTotalCount = 5;
    optional SnsUserInfo SnsUserInfo = 6;
    optional uint32 NewRequestTime = 7;
    optional uint32 ObjectCountForSameMd5 = 8;
    optional SnsServerConfig ServerConfig = 9;
}

message SnsAction {
    optional string FromUsername = 1;
    optional string ToUsername = 2;
    optional string FromNickname = 3;
    optional string ToNickname = 4;
    required uint32 Type = 5;
    required uint32 Source = 6;
    optional uint32 CreateTime = 7;
    optional string Content = 8;
    optional int32 ReplyCommentId = 9;
    optional int32 CommentId = 10;
    optional uint32 IsNotRichText = 11;
    optional uint64 ReplyCommentId2 = 12;
    optional uint64 CommentId2 = 13;
}

message SnsActionGroup {
    required uint64 Id = 1;
    optional uint64 ParentId = 2;
    required SnsAction CurrentAction = 3;
    optional SnsAction ReferAction = 4;
    optional string ClientId = 5;
}

message SnsCommentRequest {
    required BaseRequest BaseRequest = 1;
    required SnsActionGroup Action = 2;
    optional string ClientId = 3;
}

message SnsCommentResponse {
    required BaseResponse BaseResponse = 1;
    required SnsObject SnsObject = 2;
}

message SnsADCommentRequest {
    required BaseRequest BaseRequest = 1;
    required SnsActionGroup Action = 2;
    optional string ClientId = 3;
}

message SnsADCommentResponse {
    required BaseResponse BaseResponse = 1;
    required SnsADObject SnsADObject = 2;
}

message SnsSyncRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Selector = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
}

message SnsSyncResponse {
    required BaseResponse BaseResponse = 1;
    required CmdList CmdList = 2;
    required uint32 ContinueFlag = 3;
    required SKBuiltinBuffer_t KeyBuf = 4;
}

message SnsObjectOp {
    required uint64 Id = 1;
    required uint32 OpType = 2;
    optional SKBuiltinBuffer_t Ext = 3;
}

message SnsObjectOpDeleteComment {
    required int32 CommentId = 1;
}

message SnsADObjectOpDeleteComment {
    required uint64 CommentId = 1;
}

message SnsObjectOpRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCount = 2;
    repeated SnsObjectOp OpList = 3;
}

message SnsObjectOpResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 OpCount = 2;
    repeated int32 OpRetList = 3 [packed = true];
}

message SnsLbsRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required float Longitude = 3;
    required float Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    required int32 GPSSource = 8;
    required uint32 SBTime = 9;
}

message SnsLbsContactInfo {
    optional string UserName = 1;
}

message SnsLbsResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ContactCount = 2;
    repeated SnsLbsContactInfo ContactList = 3;
}

message SnsGetCityRequest {
    required BaseRequest BaseRequest = 1;
    required int32 Longitude = 3;
    required int32 Latitude = 4;
    required int32 Precision = 5;
    optional string MacAddr = 6;
    optional string CellId = 7;
    required int32 GPSSource = 8;
}

message SnsGetCityResponse {
    required BaseResponse BaseResponse = 1;
    required int32 Longitude = 2;
    required int32 Latitude = 3;
    optional string Country = 4;
    optional string City = 5;
}

message SnsClassifyTimeLineRequest {
    required BaseRequest BaseRequest = 1;
    optional string FirstPageMd5 = 2;
    required uint64 MaxId = 3;
    optional string ClassifyId = 4;
    required uint32 ClassifyType = 5;
}

message SnsClassifyTimeLineResponse {
    required BaseResponse BaseResponse = 1;
    optional string FirstPageMd5 = 2;
    required uint32 ObjectCount = 3;
    repeated SnsObject ObjectList = 4;
    required uint32 ObjectCountForSameMd5 = 5;
    optional string Description = 6;
    required uint32 ControlFlag = 7;
    required SnsServerConfig ServerConfig = 8;
}

message Whatsnew61 {
    optional uint32 like = 1;
    optional uint32 liked = 2;
}

message SnsWhatsnewRequest {
    required BaseRequest BaseRequest = 1;
}

message SnsWhatsnewResponse {
    required BaseResponse BaseResponse = 1;
    optional Whatsnew61 Whatsnew61 = 2;
}

message InitBuffer {
    required uint32 MaxSyncKey = 1;
}

message InitRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    required uint32 SyncKey = 3;
    required SKBuiltinString_t Buffer = 4;
    optional string Language = 5;
}

message InitResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NewSyncKey = 2;
    required int32 ContinueFlag = 3;
    required uint32 CmdCount = 4;
    repeated CmdItem CmdList = 5;
    required SKBuiltinString_t Buffer = 6;
    required uint32 Ratio = 7;
}

message KeyBuffer {
    required SKBuiltinString_t synckey = 1;
}

message NewInitRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required SKBuiltinBuffer_t CurrentSynckey = 3;
    required SKBuiltinBuffer_t MaxSynckey = 4;
    optional string Language = 5;
}

message NewInitResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t CurrentSynckey = 2;
    required SKBuiltinBuffer_t MaxSynckey = 3;
    required uint32 ContinueFlag = 4;
    required uint32 SelectBitmap = 5;
    required uint32 CmdCount = 6;
    repeated CmdItem CmdList = 7;
    required uint32 Ratio = 8;
}

message SyncRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    required uint32 SyncKey = 3;
    required int32 Scene = 4;
    required int32 Option = 5;
    required CmdList Oplog = 6;
    optional string KeyBuf = 7;
}

message SyncResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NewSyncKey = 2;
    required int32 ContinueFlag = 3;
    required uint32 CmdCount = 4;
    repeated CmdItem CmdList = 5;
    required uint32 OOBCount = 6;
    repeated CmdItem OOBList = 7;
    optional string KeyBuf = 8;
}

message KeyVal {
    required uint32 Key = 1;
    required uint32 Val = 2;
}

message SyncKey {
    required uint32 KeyCount = 1;
    repeated KeyVal Key = 2;
}

message NewSyncRequest {
    required CmdList Oplog = 1;
    required uint32 Selector = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
    optional uint32 Scene = 4;
    optional string DeviceType = 5;
}

message NewSyncResponse {
    required int32 Ret = 1;
    required CmdList CmdList = 2;
    required uint32 ContinueFlag = 3;
    required SKBuiltinBuffer_t KeyBuf = 4;
    optional uint32 Status = 5;
    optional uint32 OnlineVersion = 6;
}

message SyncFriendRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    required uint32 SyncKey = 3;
    required int32 Scene = 4;
}

message SyncFriendResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NewSyncKey = 2;
    required int32 ContinueFlag = 3;
    required uint32 CmdCount = 4;
    repeated CmdItem CmdList = 5;
}

message OpenQQMicroBlog {
    required SKBuiltinString_t MicroBlogUserName = 1;
}

message ModChatRoomNotify {
    required SKBuiltinString_t ChatRoomName = 1;
    required uint32 Status = 2;
}

message CloseMicroBlog {
    required SKBuiltinString_t MicroBlogUserName = 1;
}

message ModChatRoomMember {
    required SKBuiltinString_t UserName = 1;
    required SKBuiltinString_t NickName = 2;
    required SKBuiltinString_t PYInitial = 3;
    required SKBuiltinString_t QuanPin = 4;
    required int32 Sex = 5;
    required SKBuiltinBuffer_t ImgBuf = 6;
    required uint32 ImgFlag = 7;
    required SKBuiltinString_t Remark = 8;
    required SKBuiltinString_t RemarkPYInitial = 9;
    required SKBuiltinString_t RemarkQuanPin = 10;
    required uint32 ContactType = 11;
    optional string Province = 12;
    optional string City = 13;
    optional string Signature = 14;
    optional uint32 PersonalCard = 15;
    optional uint32 VerifyFlag = 16;
    optional string VerifyInfo = 17;
    optional string Weibo = 18;
    optional string VerifyContent = 19;
    optional string WeiboNickname = 20;
    optional uint32 WeiboFlag = 21;
    optional int32 AlbumStyle = 22;
    optional int32 AlbumFlag = 23;
    optional string AlbumBGImgID = 24;
    optional string Alias = 25;
    optional SnsUserInfo SnsUserInfo = 26;
    optional string Country = 27;
    optional string BigHeadImgUrl = 28;
    optional string SmallHeadImgUrl = 29;
    optional string MyBrandList = 30;
    optional CustomizedInfo CustomizedInfo = 31;
}

message QuitChatRoom {
    required SKBuiltinString_t ChatRoomName = 1;
    required SKBuiltinString_t UserName = 2;
}

message ModChatRoomTopic {
    required SKBuiltinString_t ChatRoomName = 1;
    required SKBuiltinString_t ChatRoomTopic = 2;
}

message ModChatRoomMemberDisplayName {
    optional string ChatRoomName = 1;
    optional string UserName = 2;
    optional string DisplayName = 3;
}

message ModChatRoomMemberFlag {
    optional string ChatRoomName = 1;
    optional string UserName = 2;
    required uint32 FlagSwitch = 3;
    required uint32 Value = 4;
}

message AddMsg {
    required int32 MsgId = 1;
    required SKBuiltinString_t FromUserName = 2;
    required SKBuiltinString_t ToUserName = 3;
    required int32 MsgType = 4;
    required SKBuiltinString_t Content = 5;
    required uint32 Status = 6;
    required uint32 ImgStatus = 7;
    required SKBuiltinBuffer_t ImgBuf = 8;
    required uint32 CreateTime = 9;
    optional string MsgSource = 10;
    optional string PushContent = 11;
    optional int64 NewMsgId = 12;
}

message ModMsgStatus {
    required int32 MsgId = 1;
    required SKBuiltinString_t FromUserName = 2;
    required SKBuiltinString_t ToUserName = 3;
    required uint32 Status = 4;
    optional int64 NewMsgId = 5;
}

message DelContact {
    required SKBuiltinString_t UserName = 1;
}

message DelChatContact {
    required SKBuiltinString_t UserName = 1;
}

message DelContactMsg {
    required SKBuiltinString_t UserName = 1;
    required int32 MaxMsgId = 2;
    optional int64 NewMsgId = 3;
}

message DelMsg {
    required SKBuiltinString_t UserName = 1;
    required uint32 Count = 2;
    repeated int32 MsgIdList = 3 [packed = true];
}

message NewDelMsg {
    optional string FromUserName = 1;
    optional string ToUserName = 2;
    required int32 MsgId = 3;
    required uint32 MsgType = 4;
    optional int64 NewMsgId = 5;
}

message FacebookInfo {
    required uint64 Uid = 1;
    optional string Name = 2;
    optional string Token = 3;
}

message ModUserImg {
    required uint32 ImgType = 1;
    required uint32 ImgLen = 2;
    optional bytes ImgBuf = 3;
    optional string ImgMd5 = 4;
    optional string BigHeadImgUrl = 5;
    optional string SmallHeadImgUrl = 6;
}

message ModDisturbSetting {
    required DisturbSetting DisturbSetting = 1;
}

message ModNotifyStatus {
    required SKBuiltinString_t UserName = 1;
    required uint32 Status = 2;
}

message ModMicroBlogInfo {
    required SKBuiltinString_t UserName = 1;
    required uint32 MicroBlogType = 2;
    required uint32 NotifyStatus = 3;
    required uint32 DeleteFlag = 4;
}

message Report {
    optional string Log = 1;
}

message InviteFriendOpen {
    optional string UserName = 1;
    required uint32 FriendType = 2;
}

message ModUserDomainEmail {
    required uint32 Status = 1;
    required SKBuiltinString_t Email = 2;
}

message DelUserDomainEmail {
    required SKBuiltinString_t UserName = 1;
    required SKBuiltinString_t Email = 2;
}

message FunctionSwitch {
    required uint32 FunctionId = 1;
    required uint32 SwitchValue = 2;
}

message WebWxFunctionSwitch {
    required uint32 FunctionId = 1;
    required uint32 SwitchValue = 2;
}

message PluginInstall {
    required uint32 PluginFlag = 1;
    required uint32 IsUnInstall = 2;
}

message ModTXNewsCategory {
    required uint32 TXNewsCategory = 1;
}

message MediaNoteOpLog {
    required uint32 WriteCount = 1;
    required int32 NoteType = 2;
}

message GmailSwitchOplog {
    optional string GmailAcct = 1;
    required uint32 GmailSwitch = 2;
}

message UpdateStatOpLog {
    required uint32 OpCode = 1;
}

message KVStatItem {
    required uint32 Key = 1;
    optional string Value = 2;
}

message KVStatOpLog {
    required uint32 Count = 1;
    repeated KVStatItem List = 2;
}

message KVCmd {
    required uint32 Key = 1;
    required SKBuiltinBuffer_t Value = 2;
}

message ThemeOpLog {
    required uint32 Key = 1;
    optional string Value = 2;
}

message ModDescription {
    optional string ContactUsername = 1;
    optional string Desc = 2;
}

message OplogRet {
    required uint32 Count = 1;
    repeated int32 Ret = 2 [packed = true];
}

message OplogRequest {
    required CmdList Oplog = 1;
}

message OplogResponse {
    required int32 Ret = 1;
    required OplogRet OplogRet = 2;
}

message TalkRoomMember {
    required int32 MemberID = 1;
    optional string UserName = 2;
}

message TalkRelayAddr {
    required uint32 Ip = 1;
    required uint32 Port = 2;
}

message EnterTalkRoomReq {
    required BaseRequest BaseRequest = 1;
    optional string ToUsername = 2;
    optional uint32 Scene = 3;
}

message EnterTalkRoomResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    required int32 MicSeq = 4;
    required int32 MemberNum = 5;
    repeated TalkRoomMember MemberList = 6;
    required int32 MyRoomMemberId = 7;
    optional int32 AddrCount = 8;
    repeated TalkRelayAddr AddrList = 9;
}

message ExitTalkRoomReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional string ToUsername = 4;
    optional uint32 Scene = 5;
}

message ExitTalkRoomResp {
    required BaseResponse BaseResponse = 1;
}

message TalkMicActionReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    required uint32 ActionType = 4;
    optional uint32 UpdateTime = 5;
    optional uint32 Scene = 6;
}

message TalkMicActionResp {
    required BaseResponse BaseResponse = 1;
    required int32 MicSeq = 2;
    optional uint32 ChannelId = 3;
}

message TalkNoopReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional uint32 UpdateTime = 4;
    optional uint32 Scene = 5;
}

message TalkNoopResp {
    required BaseResponse BaseResponse = 1;
}

message GetTalkRoomMemberReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional uint32 Scene = 4;
}

message GetTalkRoomMemberResp {
    required BaseResponse BaseResponse = 1;
    required int32 MicSeq = 2;
    required int32 MemberNum = 3;
    repeated TalkRoomMember MemberList = 4;
}

message TalkInviteReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional uint32 Scene = 4;
}

message TalkInviteResp {
    required BaseResponse BaseResponse = 1;
}

message TalkStatReportData {
    required int32 LogID = 1;
    required SKBuiltinString_t StatReport = 2;
}

message TalkStatReportReq {
    required BaseRequest BaseRequest = 1;
    required int32 DataNum = 2;
    repeated TalkStatReportData ReportData = 3;
    optional uint32 Scene = 4;
}

message TalkStatReportResp {
    required BaseResponse BaseResponse = 1;
}

message CreateTalkRoomRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t Topic = 2;
    required uint32 MemberCount = 3;
    repeated MemberReq MemberList = 4;
    optional uint32 Scene = 5;
}

message CreateTalkRoomResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinString_t Topic = 2;
    required SKBuiltinString_t PYInitial = 3;
    required SKBuiltinString_t QuanPin = 4;
    required uint32 MemberCount = 5;
    repeated MemberResp MemberList = 6;
    required SKBuiltinString_t TalkRoomName = 7;
    required SKBuiltinBuffer_t ImgBuf = 8;
    optional string BigHeadImgUrl = 9;
    optional string SmallHeadImgUrl = 10;
    required int32 RoomId = 11;
    required int64 RoomKey = 12;
    required int32 MicSeq = 13;
    required int32 MyRoomMemberId = 14;
}

message AddTalkRoomMemberRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MemberCount = 2;
    repeated MemberReq MemberList = 3;
    required SKBuiltinString_t TalkRoomName = 4;
    optional uint32 Scene = 5;
}

message AddTalkRoomMemberResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MemberCount = 2;
    repeated MemberResp MemberList = 3;
}

message DelTalkRoomMemberRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MemberCount = 2;
    repeated DelMemberReq MemberList = 3;
    optional string TalkRoomName = 4;
    optional uint32 Scene = 5;
}

message DelTalkRoomMemberResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MemberCount = 2;
    repeated DelMemberResp MemberList = 3;
}

message PositionItem {
    required double Latitude = 1;
    required double Longitude = 2;
    required double Heading = 3;
}

message TrackPOIItem {
    required double Latitude = 1;
    required double Longitude = 2;
    optional string Name = 3;
    optional string Addr = 4;
}

message UserPositionItem {
    optional string Username = 1;
    required PositionItem Position = 2;
}

message RefreshTrackRoomRequest {
    required BaseRequest BaseRequest = 1;
    optional string TrackRoomID = 2;
    required int32 Type = 3;
    required UserPositionItem UserPosition = 4;
    optional uint32 TimeStamp = 5;
    optional TrackPOIItem UserPoi = 6;
}

message RefreshTrackRoomResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated UserPositionItem Positions = 3;
    optional string RetMsg = 4;
    optional uint32 RefreshTime = 5;
    optional TrackPOIItem RoomPoi = 6;
}

message JoinTrackRoomRequest {
    required BaseRequest BaseRequest = 1;
    optional string Chatname = 2;
    optional uint32 Scene = 3;
}

message JoinTrackRoomResponse {
    required BaseResponse BaseResponse = 1;
    optional string TrackRoomID = 2;
    optional string RetMsg = 3;
}

message ExitTrackRoomRequest {
    required BaseRequest BaseRequest = 1;
    optional string TrackRoomID = 2;
    optional uint32 Scene = 3;
}

message ExitTrackRoomResponse {
    required BaseResponse BaseResponse = 1;
    optional string RetMsg = 2;
}

message BaseResponseErrMsg {
    required int32 ShowType = 1;
    optional string Content = 2;
    optional string Url = 3;
    required int32 DispSec = 4;
    optional string Title = 5;
    required int32 Action = 6;
    optional int32 DelayConnSec = 7;
    optional uint32 Countdown = 8;
    optional string Ok = 9;
    optional string Cancel = 10;
}

message GetStreamUrlRequest {
    required BaseRequest BaseRequest = 1;
    optional string StreamId = 2;
}

message GetStreamUrlResponse {
    required BaseResponse BaseResponse = 1;
    optional string StreamUrl = 2;
}

message PossibleFriend {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string PYInitial = 3;
    optional string QuanPin = 4;
    required int32 Sex = 5;
    required uint32 ImgFlag = 6;
    required uint32 ContactType = 7;
    optional string DomainList = 8;
    optional string Source = 9;
    required uint32 FriendScene = 10;
    optional string Mobile = 11;
}

message SetPushSoundReq {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    optional string Sound = 3;
}

message SetPushSoundResp {
    required BaseResponse BaseResponse = 1;
}

message SendVerifyEmailRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
}

message SendVerifyEmailResponse {
    required BaseResponse BaseResponse = 1;
}

message GetInviteFriendRequest {
    required BaseRequest BaseRequest = 1;
    optional uint32 FriendType = 2;
}

message InviteFriend {
    required uint32 Uin = 1;
    required SKBuiltinString_t NickName = 2;
    optional string Email = 3;
    optional string Remark = 4;
    optional string UserName = 5;
    optional uint32 FriendType = 6;
}

message GetInviteFriendResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 FriendCount = 2;
    repeated InviteFriend FriendList = 3;
}

message SendInviteEmailRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 UinCount = 2;
    repeated uint32 UinList = 3 [packed = true];
}

message SendInviteEmailResponse {
    required BaseResponse BaseResponse = 1;
}

message DomainEmailItem {
    required uint32 Status = 1;
    required SKBuiltinString_t Email = 2;
}

message SendDomainEmailRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    required SKBuiltinString_t Email = 3;
}

message SendDomainEmailResponse {
    required BaseResponse BaseResponse = 1;
    required int32 DomainEmailRet = 2;
    required uint32 Count = 3;
    repeated DomainEmailItem List = 4;
}

message SwitchPushMailRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 SwitchValue = 2;
    optional string SecPwdMd5 = 3;
}

message SwitchPushMailResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 SwitchValue = 2;
}

message SendCardRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    optional string Content = 3;
    optional uint32 SendCardBitFlag = 4;
    optional uint32 Style = 5;
    optional string ContentEx = 6;
}

message SendCardResponse {
    required BaseResponse BaseResponse = 1;
}

message BindCookie {
    optional string mobile = 1;
    optional string verifycode = 2;
    required uint32 expire = 3;
}

message Mobile {
    optional string v = 1;
}

message MEmail {
    optional string v = 1;
}

message UploadMContactRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required int32 Opcode = 3;
    optional string Mobile = 4;
    required int32 MobileListSize = 5;
    repeated Mobile MobileList = 6;
    required int32 EmailListSize = 7;
    repeated MEmail EmailList = 8;
}

message UploadMContactResponse {
    required BaseResponse BaseResponse = 1;
}

message ModifyHeadImgRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required SKBuiltinBuffer_t ImgBuf = 3;
}

message ModifyHeadImgResponse {
    required BaseResponse BaseResponse = 1;
}

message NewGetInviteFriendRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 FriendType = 2;
}

message NewInviteFriend {
    required uint32 Uin = 1;
    optional string NickName = 2;
    optional string Email = 3;
    optional string Remark = 4;
    optional string UserName = 5;
    required uint32 FriendType = 6;
    required uint32 GroupId = 7;
    optional string ImgIdx = 8;
}

message FriendGroup {
    required uint32 GroupId = 1;
    optional string GroupName = 2;
}

message NewGetInviteFriendResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 FriendCount = 2;
    repeated NewInviteFriend FriendList = 3;
    required uint32 GroupCount = 4;
    repeated FriendGroup GroupList = 5;
}

message VerifyUser {
    optional string Value = 1;
    optional string VerifyUserTicket = 2;
    optional string AntispamTicket = 3;
    optional uint32 FriendFlag = 4;
    optional string ChatRoomUserName = 5;
    optional string SourceUserName = 6;
    optional string SourceNickName = 7;
}

message VerifyUserInfo {
    optional string Key = 1;
    optional string Value = 2;
}

message VerifyUserRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Opcode = 2;
    required uint32 VerifyUserListSize = 3;
    repeated VerifyUser VerifyUserList = 4;
    optional string VerifyContent = 5;
    optional uint32 SceneListCount = 6;
    repeated uint32 SceneList = 7 [packed = true];
    optional uint32 VerifyInfoListCount = 8;
    repeated VerifyUserInfo VerifyInfoList = 9;
}

message VerifyUserResponse {
    required BaseResponse BaseResponse = 1;
    optional string UserName = 2;
}

message QContact {
    optional string UserName = 1;
    optional string DisplayName = 2;
    required uint32 ExtInfoSeq = 3;
    required uint32 ImgUpdateSeq = 4;
}

message TContact {
    optional string UserName = 1;
    optional string DisplayName = 2;
    required uint32 ExtInfoSeq = 3;
    required uint32 ImgUpdateSeq = 4;
}

message ContactProfile {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string PYInitial = 3;
    optional string QuanPin = 4;
    required int32 Sex = 5;
    required SKBuiltinBuffer_t ImgBuf = 6;
    required uint32 BitMask = 7;
    required uint32 BitVal = 8;
    optional string Remark = 9;
    required uint32 ImgRet = 10;
    optional string RemarkPYInitial = 11;
    optional string RemarkQuanPin = 12;
    required uint32 ContactType = 13;
    required uint32 RoomInfoCount = 14;
    repeated RoomInfo RoomInfoList = 15;
    optional string DomainList = 16;
    required uint32 ChatRoomNotify = 17;
    required uint32 AddContactScene = 18;
    optional string ExtInfo = 19;
    required uint32 ExtUpdateSeq = 20;
    required uint32 ImgUpdateSeq = 21;
    optional string Alias = 22;
}

message BatchGetContactProfileRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Mode = 2;
    required uint32 Count = 3;
    repeated SKBuiltinString_t UserNameList = 4;
}

message BatchGetContactProfileResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated SKBuiltinBuffer_t ContactProfileBufList = 3;
}

message GetPSMImgRequest {
    required BaseRequest BaseRequest = 1;
    optional string URL = 2;
    required uint32 Offset = 3;
}

message GetPSMImgResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t Data = 2;
    required uint32 TotalLength = 3;
}

message PSMStat {
    required uint32 MType = 1;
    optional string AType = 2;
}

message GetMFriendRequest {
    required BaseRequest BaseRequest = 1;
    optional uint32 OpType = 2;
    optional string MD5 = 3;
    optional int32 UpdateMobileListSize = 4;
    repeated Mobile UpdateMobileList = 5;
    optional int32 UpdateEmailListSize = 6;
    repeated MEmail UpdateEmailList = 7;
    optional uint32 Scene = 8;
}

message FBFriend {
    required uint64 ID = 1;
    optional string Name = 2;
    required uint32 ImgKey = 3;
}

message MFriend {
    optional string Username = 1;
    optional string Nickname = 2;
    optional string MobileMD5 = 3;
    optional int32 Sex = 4;
    optional string Province = 5;
    optional string City = 6;
    optional string Signature = 7;
    optional uint32 PersonalCard = 8;
    optional string Alias = 9;
    optional FBFriend FBInfo = 10;
    optional uint32 AlbumFlag = 11;
    optional uint32 AlbumStyle = 12;
    optional string AlbumBGImgID = 13;
    optional SnsUserInfo SnsUserInfo = 14;
    optional string Country = 15;
    optional string MyBrandList = 16;
    optional CustomizedInfo CustomizedInfo = 17;
    optional string BigHeadImgUrl = 20;
    optional string SmallHeadImgUrl = 21;
    optional string AntispamTicket = 22;
}

message GetMFriendResponse {
    required BaseResponse BaseResponse = 1;
    required int32 Count = 2;
    repeated MFriend FriendList = 3;
    optional string MD5 = 4;
}

message GetQQGroupRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpType = 2;
    required uint32 GroupID = 3;
}

message QQGroup {
    required uint32 GroupID = 1;
    optional string GroupName = 2;
    optional string MD5 = 3;
    required uint32 MemberNum = 4;
    required uint32 WeixinNum = 5;
}

message QQGroupList {
    required uint32 Count = 1;
    repeated QQGroup QQGroups = 2;
}

message QQFriendInGroup {
    required uint32 QQUin = 1;
    optional string UserName = 2;
    optional string NickName = 3;
    optional string QQNickName = 4;
    required uint32 WeixinStatus = 5;
    optional string QQRemarkName = 6;
    optional int32 Sex = 7;
    optional string Province = 8;
    optional string City = 9;
    optional string Signature = 10;
    optional uint32 PersonalCard = 11;
    optional string Alias = 12;
    optional uint32 AlbumFlag = 13;
    optional uint32 AlbumStyle = 14;
    optional string AlbumBGImgID = 15;
    optional SnsUserInfo SnsUserInfo = 16;
    optional string Country = 17;
    optional string MyBrandList = 18;
    optional CustomizedInfo CustomizedInfo = 19;
    optional string BigHeadImgUrl = 20;
    optional string SmallHeadImgUrl = 21;
    optional string AntispamTicket = 22;
}

message QQFriendList {
    required uint32 GroupID = 1;
    required uint32 Count = 2;
    repeated QQFriendInGroup QQFriends = 3;
}

message GetQQGroupResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 OpType = 2;
    required QQGroupList QQGroup = 3;
    required QQFriendList QQFriend = 4;
}

message GetFSUrlRequest {
    required BaseRequest BaseRequest = 1;
}

message GetFSUrlResponse {
    optional string FSURL = 1;
}

message ShareCardDestInfo {
    optional string UserName = 1;
}

message ShareCardRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string SrcFriendUserName = 3;
    required uint32 DestFriendCount = 4;
    repeated ShareCardDestInfo DestFriendList = 5;
}

message ShareCardRetInfo {
    optional string UserName = 1;
    required int32 RetCode = 2;
}

message ShareCardResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 RetInfoCount = 2;
    repeated ShareCardRetInfo RetInfoList = 3;
}

message GroupCardRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string GroupNickName = 3;
    required uint32 MemberCount = 4;
    repeated RoomInfo MemberList = 5;
    optional string GroupUserName = 6;
}

message GroupCardResponse {
    required BaseResponse BaseResponse = 1;
    optional string GroupUserName = 2;
}

message SendFeedbackRequest {
    required BaseRequest BaseRequest = 1;
    optional string MachineType = 2;
    optional string Content = 3;
    optional uint32 ReportType = 4;
}

message SendFeedbackResponse {
    required BaseResponse BaseResponse = 1;
}

message UploadHDHeadImgRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 TotalLen = 2;
    required uint32 StartPos = 3;
    required uint32 HeadImgType = 4;
    required SKBuiltinBuffer_t Data = 5;
    optional string ImgHash = 6;
    optional string UserName = 7;
}

message UploadHDHeadImgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 TotalLen = 2;
    required uint32 StartPos = 3;
    optional string FinalImgMd5sum = 4;
    optional string BigHeadImgUrl = 5;
    optional string SmallHeadImgUrl = 6;
}

message GetHDHeadImgRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required uint32 ImgWidth = 3;
    required uint32 ImgHeight = 4;
    optional string ImgFormat = 5;
    required uint32 TotalLen = 6;
    required uint32 StartPos = 7;
    required uint32 HeadImgType = 8;
}

message GetHDHeadImgResponse {
    required BaseResponse BaseResponse = 1;
    optional string UserName = 2;
    required uint32 TotalLen = 3;
    required uint32 StartPos = 4;
    required SKBuiltinBuffer_t Data = 5;
}

message Package {
    required int32 Id = 1;
    required int32 Version = 2;
    optional string Name = 3;
    optional uint32 Size = 4;
    optional SKBuiltinBuffer_t Thumb = 5;
    optional string PackName = 6;
    optional SKBuiltinBuffer_t Ext = 7;
    optional string Md5 = 8;
}

message GetPackageListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated Package List = 3;
    optional uint32 Type = 4;
    optional uint32 Flag = 5;
}

message GetPackageListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated Package List = 3;
    required uint32 ContinueFlag = 4;
    required uint32 SvrCount = 5;
    optional uint32 Type = 6;
}

message DownLoadPackageRequest {
    required BaseRequest BaseRequest = 1;
    required Package Package = 2;
    required uint32 Offset = 3;
    required uint32 Len = 4;
    optional uint32 Type = 5;
}

message DownLoadPackageResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t PackageBuf = 2;
    optional uint32 Type = 3;
    optional uint32 TotalSize = 4;
}

message ModBottleContact {
    optional string UserName = 1;
    required uint32 Type = 2;
    required uint32 Sex = 3;
    optional string City = 4;
    optional string Province = 5;
    optional string Signature = 6;
    required uint32 ImgFlag = 7;
    required uint32 HDImgFlag = 8;
    optional string Country = 9;
    optional string BigHeadImgUrl = 10;
    optional string SmallHeadImgUrl = 11;
}

message DelBottleContact {
    optional string UserName = 1;
}

message EchoRequest {
    optional string EchoStr = 1;
    optional string Pwd = 2;
}

message EchoResponse {
    optional string EchoStr = 1;
}

message ExposeRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required uint32 Scene = 3;
    required uint32 Type = 4;
    optional string AlbumPhotoId = 5;
    optional uint32 AlbumType = 6;
    optional uint64 SnsId = 7;
    optional string ExposeContent = 8;
}

message ExposeResponse {
    required BaseResponse BaseResponse = 1;
}

message ExposeItem {
    required uint32 Count = 1;
    repeated uint32 UinList = 2 [packed = true];
    repeated uint32 TimeList = 3 [packed = true];
    repeated uint32 CountList = 4 [packed = true];
}

message VUserResponseItem {
    required uint32 ID = 1;
    optional string Desc = 2;
    required SKBuiltinBuffer_t Icon = 3;
    required SKBuiltinBuffer_t HDIcon = 4;
}

message GetVUserInfoRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Version = 2;
}

message GetVUserInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Version = 2;
    required uint32 VUserCount = 3;
    repeated VUserResponseItem VUserList = 4;
}

message GmailOperRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpType = 2;
    optional string GmailAcct = 3;
    optional string GmailPwd = 4;
}

message GmailOperResponse {
    required uint32 RetCode = 1;
}

message MailComposeSendRequest {
    required BaseRequest BaseRequest = 1;
    optional string MailAccount = 2;
    optional string OldMailID = 3;
    optional string Subject = 4;
    optional string RcptTo = 5;
    optional string Cc = 6;
    optional string Bcc = 7;
    optional string From = 8;
    optional string MailContent = 9;
    required int32 ReplyType = 10;
}

message MailComposeSendResponse {
    required BaseResponse BaseResponse = 1;
}

message GeneralSetRequest {
    required BaseRequest BaseRequest = 1;
    required int32 SetType = 2;
    optional string SetValue = 3;
}

message GeneralSetResponse {
    required BaseResponse BaseResponse = 1;
}

message GetRegStyleRequest {
    required BaseRequest BaseRequest = 1;
    optional string ClientSeqID = 2;
    required SKBuiltinBuffer_t RandomEncryKey = 3;
}

message GetRegStyleResponse {
    required BaseResponse BaseResponse = 1;
    required ShowStyleKey RegStyle = 2;
}

message GetMailOAuthUrlRequest {
    required BaseRequest BaseRequest = 1;
    optional string MailAccount = 2;
}

message GetMailOAuthUrlResponse {
    required BaseResponse BaseResponse = 1;
    optional string OAuthUrl = 2;
}

message BizRegRequest {
    required uint32 QQUin = 1;
    optional string Pwd = 2;
    optional string Pwd2 = 3;
    optional string ImgSid = 4;
    optional string ImgCode = 5;
    optional string UserName = 6;
    optional string NickName = 7;
}

message BizRegResponse {
    required BaseResponse BaseResponse = 1;
    optional string ImgSid = 2;
    required SKBuiltinBuffer_t ImgBuf = 3;
}

message BizAuthRequest {
    required uint32 QQUin = 1;
    optional string Pwd = 2;
    optional string Pwd2 = 3;
    optional string ImgSid = 4;
    optional string ImgCode = 5;
}

message BizAuthResponse {
    required BaseResponse BaseResponse = 1;
    optional string ImgSid = 2;
    required SKBuiltinBuffer_t ImgBuf = 3;
}

message MassSendRequest {
    required BaseRequest BaseRequest = 1;
    optional string ToList = 2;
    optional string ToListMD5 = 3;
    optional string ClientID = 4;
    required uint32 MsgType = 5;
    required uint32 MediaTime = 6;
    required SKBuiltinBuffer_t DataBuffer = 7;
    required uint32 DataStartPos = 8;
    required uint32 DataTotalLen = 9;
    required uint32 ThumbTotalLen = 10;
    required uint32 ThumbStartPos = 11;
    required SKBuiltinBuffer_t ThumbData = 12;
    required uint32 CameraType = 13;
    required uint32 VideoSource = 14;
    required uint32 ToListCount = 15;
    required uint32 IsSendAgain = 16;
    optional uint32 CompressType = 17;
    optional uint32 VoiceFormat = 18;
    optional string VideoUrl = 19;
    optional string ThumbUrl = 20;
    optional uint32 ThumbWidth = 21;
    optional uint32 ThumbHeight = 22;
    optional string ThumbAESKey = 23;
    optional string VideoAESKey = 24;
    optional string MD5 = 25;
}

message MassSendResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 DataStartPos = 2;
    required uint32 ThumbStartPos = 3;
    required uint32 MaxSupport = 4;
}

message BufferId {
    required uint64 MasterBufId = 1;
    required uint64 SlaveBufId = 2;
}

message UploadAppAttachRequest {
    required BaseRequest BaseRequest = 1;
    optional string AppId = 2;
    required uint32 SdkVersion = 3;
    optional string ClientAppDataId = 4;
    optional string UserName = 5;
    required uint32 TotalLen = 6;
    required uint32 StartPos = 7;
    required uint32 DataLen = 8;
    required SKBuiltinBuffer_t Data = 9;
    optional uint32 Type = 10;
    optional string MD5 = 11;
}

message UploadAppAttachResponse {
    required BaseResponse BaseResponse = 1;
    optional string AppId = 2;
    optional string MediaId = 3;
    optional string ClientAppDataId = 4;
    optional string UserName = 5;
    required uint32 TotalLen = 6;
    required uint32 StartPos = 7;
    required uint32 DataLen = 8;
    required uint32 CreateTime = 9;
}

message ImportFriendsRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required uint32 Source = 3;
}

message ImportFriendsResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ImportedCount = 2;
}

message BizBottleInfo {
    optional string BottleID = 1;
    required uint32 MsgType = 2;
    optional string FromUserName = 3;
}

message UploadMediaRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t ClientMediaId = 2;
    required SKBuiltinString_t DataMD5 = 3;
    required uint32 TotalLen = 4;
    required uint32 StartPos = 5;
    required uint32 DataLen = 6;
    required SKBuiltinBuffer_t Data = 7;
    required uint32 MediaType = 8;
    optional uint32 AudioFormat = 9;
    optional uint32 AudioSamplingRate = 10;
    optional uint32 AudioChannelNum = 11;
    optional uint32 AudioBitRate = 12;
}

message UploadMediaResponse {
    required BaseResponse BaseResponse = 1;
    optional string MediaId = 2;
    required uint32 StartPos = 3;
}

message HandleImgMsgRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t ClientImgId = 2;
    optional string MediaId = 3;
    required SKBuiltinString_t FromUserName = 4;
    required SKBuiltinString_t ToUserName = 5;
    required uint32 ImgLen = 6;
    required uint32 MsgType = 7;
    optional string MsgSource = 8;
    required uint32 CompressType = 9;
}

message HandleImgMsgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MsgId = 2;
    required SKBuiltinString_t ClientImgId = 3;
    required SKBuiltinString_t FromUserName = 4;
    required SKBuiltinString_t ToUserName = 5;
    required uint32 ImgLen = 6;
    required uint32 CreateTime = 7;
    optional uint64 NewMsgId = 8;
}

message StatReportItem {
    required uint32 ActionID = 1;
    required uint32 Time = 2;
    required uint32 IP = 3;
    required uint32 Port = 4;
    required uint32 IPType = 5;
    required uint32 NetType = 6;
    required uint32 IfSuc = 7;
    required uint32 FunID = 8;
    required uint32 Cost = 9;
    required uint32 AliveTime = 10;
    required uint32 UploadSize = 11;
    required uint32 DownloadSize = 12;
    optional uint32 Count = 13;
    optional uint32 IsWifiFirstConnect = 14;
    optional uint64 BeginTimeMS = 15;
    optional uint64 EndTimeMS = 16;
    optional uint32 NotifySyncCount = 17;
    optional uint32 PushSyncCount = 18;
    optional uint32 SyncCount = 19;
    optional uint32 IsDNS = 20;
    optional uint32 IsSocket = 21;
    optional int32 ErrCode = 22;
    optional uint32 SignalStrength = 23;
    optional uint32 ISPCode = 24;
    optional string ISPName = 25;
    optional uint32 RetryCount = 26;
    optional string Host = 27;
    optional uint32 IPCnt = 28;
    optional uint64 reserved1 = 29;
    optional uint64 reserved2 = 30;
    optional uint64 reserved3 = 31;
    optional uint32 ClientIP = 32;
    optional uint32 NetworkCost = 33;
    optional uint32 DnsCount = 34;
    optional uint32 DnsCost = 35;
    optional uint32 ConnCount = 36;
    optional uint32 ConnCost = 37;
    optional uint32 NewDnsCostTime = 38;
    optional uint32 NewDnsErrType = 39;
    optional uint32 NewDnsErrCode = 40;
    optional uint32 NewDnsSvrIp = 41;
    optional uint32 FirstPkgTime = 42;
    optional uint32 EndFlag = 43;
    optional uint32 TotalTime = 44;
    optional uint32 Conncosttime = 45;
    optional uint32 Endstep = 46;
    optional uint32 Dnscosttime = 47;
    optional uint32 Dnserrtype = 48;
    optional int32 NewNetType = 49;
    optional int32 SubNetType = 50;
    optional string NetExtraInfo = 51;
    optional string StatReportExtraInfo = 52;
    optional int32 TotalConnCost = 53;
    optional int32 IpIndex = 54;
    optional int32 InnerIp = 55;
}

message StatReportInfo {
    required int32 Count = 1;
    repeated StatReportItem List = 2;
}

message StatReportExtInfo {
    required uint32 BeginTime = 1;
    required uint32 EndTime = 2;
    required uint32 ClientReportTime = 3;
    required uint32 TotalUploadSize = 4;
    required uint32 TotalDownloadSize = 5;
    required uint32 SyncCount = 6;
    required uint32 SyncFailCount = 7;
    required uint32 NotifyCount = 8;
    required uint32 CGICount = 9;
    required uint32 CGIFailCount = 10;
    optional uint32 PushSyncCount = 11;
}

message StatReportRequest {
    required BaseRequest BaseRequest = 1;
    required StatReportInfo Info = 2;
    required StatReportExtInfo ExtInfo = 3;
}

message StatReportResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NextReportTime = 2;
    required uint32 ReportFlag = 3;
}

message PropertySurveyItem {
    optional string DeviceModel = 1;
    optional string OsType = 2;
    optional string Module = 3;
    optional string SubModule = 4;
    required uint32 AvgElapsedTime = 5;
    required uint32 MaxElapsedTime = 6;
    required uint32 MinElapsedTime = 7;
    required uint32 UseModuleCount = 8;
    optional string Expand = 9;
    required uint32 BeginTime = 10;
    required uint32 EndTime = 11;
}

message PropertySurveyInfo {
    required uint32 Count = 1;
    repeated PropertySurveyItem List = 2;
}

message PropertySurveyRequest {
    required BaseRequest BaseRequest = 1;
    required PropertySurveyInfo Info = 2;
}

message PropertySurveyResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NextReportTime = 2;
    required uint32 ReportFlag = 3;
}

message UnbindMobileByQQRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    optional string Pwd = 3;
    optional string Pwd2 = 4;
    required SKBuiltinString_t ImgSid = 5;
    required SKBuiltinString_t ImgCode = 6;
    required SKBuiltinString_t ImgEncryptKey = 7;
    required SKBuiltinBuffer_t KSid = 8;
}

message UnbindMobileByQQResponse {
    required BaseResponse BaseResponse = 1;
    optional string ImgSid = 2;
    required SKBuiltinBuffer_t ImgBuf = 3;
    required SKBuiltinString_t ImgEncryptKey = 4;
    required SKBuiltinBuffer_t A2Key = 5;
    required SKBuiltinBuffer_t KSid = 6;
}

message LogOutWebWxRequest {
    required BaseRequest BaseRequest = 1;
    optional uint32 OpCode = 2;
}

message LogOutWebWxResponse {
    required BaseResponse BaseResponse = 1;
}

message LogOutRequest {
    required BaseRequest BaseRequest = 1;
    optional uint32 Scene = 2;
}

message LogOutResponse {
    required BaseResponse BaseResponse = 1;
}

message ModBrandSetting {
    required uint32 BrandFlag = 1;
    optional string UserName = 2;
}

message SnsTag {
    required uint64 TagId = 1;
    optional string TagName = 2;
    required uint32 Count = 3;
    repeated SKBuiltinString_t List = 4;
}

message SnsTagOptionRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required uint64 TagId = 3;
    optional string TagName = 4;
}

message SnsTagOptionResponse {
    required BaseResponse BaseResponse = 1;
    required SnsTag SnsTag = 2;
}

message SnsTagMemberOptionRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    required uint64 TagId = 3;
    optional string TagName = 4;
    required uint32 Count = 5;
    repeated SKBuiltinString_t List = 6;
    optional uint32 Scene = 7;
}

message SnsTagMemberOptionResponse {
    required BaseResponse BaseResponse = 1;
    required SnsTag SnsTag = 2;
}

message SnsTagListRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 OpCode = 2;
    optional string TagListMd5 = 3;
}

message SnsTagListResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 OpCode = 2;
    optional string TagListMd5 = 3;
    required uint32 Count = 4;
    repeated SnsTag List = 5;
}

message SnsTagMemMutilSetRequest {
    required BaseRequest BaseRequest = 1;
    optional string ModUserName = 2;
    required uint32 Count = 3;
    repeated SKBuiltinUint64_t TagIdList = 4;
}

message SnsTagMemMutilSetResponse {
    required BaseResponse BaseResponse = 1;
    optional string ModUserName = 2;
    required uint32 Count = 3;
    repeated SKBuiltinUint64_t TagIdList = 4;
}

message GetProfileRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
}

message GetProfileResponse {
    required BaseResponse BaseResponse = 1;
    required ModUserInfo UserInfo = 2;
    required UserInfoExt UserInfoExt = 3;
}

message StatusNotifyUnreadChat {
    optional string UserName = 1;
    required uint32 LastReadTime = 2;
}

message StatusNotifyFunction {
    optional string Name = 1;
    optional string Arg = 2;
}

message StatusNotifyRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Code = 2;
    optional string FromUserName = 3;
    optional string ToUserName = 4;
    optional string ClientMsgId = 5;
    optional uint32 UnreadChatListCount = 6;
    repeated StatusNotifyUnreadChat UnreadChatList = 7;
    optional StatusNotifyFunction Function = 8;
    optional uint32 UnreadFunctionCount = 9;
    repeated StatusNotifyFunction UnreadFunctionList = 10;
}

message ChatContact {
    optional string UserName = 1;
}

message StatusNotifyResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MsgId = 2;
    optional uint64 NewMsgId = 3;
    optional uint32 ChatContactCount = 4;
    repeated ChatContact ChatContactList = 5;
}

message StrategyItem {
    required uint32 LogType = 1;
    required uint32 Enalbe = 2;
    required uint32 Cycle = 3;
    optional string ExtInfo = 4;
}

message GetReportStrategyReq {
    required BaseRequest BaseRequest = 1;
    optional string DeviceModel = 2;
    optional string DeviceBrand = 3;
    optional string OsName = 4;
    optional string OsVersion = 5;
    optional string LanguageVer = 6;
    optional int32 Logid = 7;
}

message GetReportStrategyResp {
    required BaseResponse BaseResponse = 1;
    required uint32 Cnt = 2;
    repeated StrategyItem List = 3;
}

message ClientPerfItem {
    required uint32 EventID = 1;
    required uint32 AvgElapseTime = 2;
    required uint32 MaxElapseTime = 3;
    required uint32 MinElapseTime = 4;
    required uint32 Cnt = 5;
    required uint32 StartTime = 6;
    required uint32 EndTime = 7;
}

message ClientPerfReportReq {
    required BaseRequest BaseRequest = 1;
    optional string DeviceModel = 2;
    optional string DeviceBrand = 3;
    optional string OsName = 4;
    optional string OsVersion = 5;
    optional string LanguageVer = 6;
    required uint32 EventIdCnt = 7;
    repeated ClientPerfItem List = 8;
}

message ClientPerfReportResp {
    required BaseResponse BaseResponse = 1;
}

message ShakeTranImgReportRequest {
    required BaseRequest BaseRequest = 1;
}

message ShakeTranImgReportResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t Buffer = 2;
}

message ShakeTranImgGetRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t Buffer = 2;
}

message ShakeTranImgGetItem {
    optional string WebUrl = 1;
    optional string ThumbUrl = 2;
    optional string ImgUrl = 3;
}

message ShakeTranImgGetResponse {
    required BaseResponse BaseResponse = 1;
    optional string PageUrl = 2;
    required uint32 Count = 3;
    repeated ShakeTranImgGetItem ImgUrlList = 4;
    optional SKBuiltinBuffer_t Buffer = 5;
    optional string Title = 6;
}

message ShakeTranImgUnBindRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Scene = 2;
    optional uint32 OpType = 3;
}

message ShakeTranImgUnBindResponse {
    required BaseResponse BaseResponse = 1;
}

message BatchGetShakeTranImgRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Count = 2;
    repeated SKBuiltinString_t WebUrlList = 3;
}

message BatchGetShakeTranImgResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated ShakeTranImgGetItem ImgUrlList = 3;
}

message KVReportItem {
    required uint32 LogID = 1;
    optional string Value = 2;
    required uint32 StartTime = 3;
    required uint32 EndTime = 4;
    required uint32 Count = 5;
}

message KVReportReq {
    required BaseRequest BaseRequest = 1;
    optional string DeviceModel = 2;
    optional string DeviceBrand = 3;
    optional string OsName = 4;
    optional string OsVersion = 5;
    optional string LanguageVer = 6;
    required uint32 KVCnt = 7;
    repeated KVReportItem List = 8;
    optional SKBuiltinBuffer_t RandomEncryKey = 9;
}

message KVReportResp {
    required BaseResponse BaseResponse = 1;
}

message KVCommReportReq {
    required BaseRequest BaseRequest = 1;
    required uint32 Bin = 2;
    required SKBuiltinBuffer_t KVBuffer = 3;
    optional SKBuiltinBuffer_t RandomEncryKey = 4;
    optional SKBuiltinBuffer_t UUID = 5;
}

message KVCommReportResp {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t KVResponBuffer = 2;
}

message GameKVReportReq {
    required BaseRequest BaseRequest = 1;
    optional string DeviceModel = 2;
    optional string DeviceBrand = 3;
    optional string OsName = 4;
    optional string OsVersion = 5;
    optional string LanguageVer = 6;
    required uint32 LogId = 7;
    optional string LogExt = 8;
}

message GameKVReportResp {
    required BaseResponse BaseResponse = 1;
}

message UserActionItem {
    required uint32 EventID = 1;
    required uint32 ClickCnt = 2;
    optional string ActionPath = 3;
    required uint32 StartTime = 4;
    required uint32 EndTime = 5;
}

message UserActionReportReq {
    required BaseRequest BaseRequest = 1;
    optional string DeviceModel = 2;
    optional string DeviceBrand = 3;
    optional string OsName = 4;
    optional string OsVersion = 5;
    optional string LanguageVer = 6;
    required uint32 ActionCnt = 7;
    repeated UserActionItem List = 8;
}

message UserActionReportResp {
    required BaseResponse BaseResponse = 1;
}

message VoiceRemindInfo {
    required uint32 RemindId = 1;
}

message OpVoiceReminderReq {
    required BaseRequest BaseRequest = 1;
    required int32 OpCode = 2;
    required uint32 RemindInfoNum = 3;
    repeated VoiceRemindInfo RemindInfoList = 4;
}

message OpVoiceReminderResp {
    required BaseResponse BaseResponse = 1;
}

message GrantBigChatRoomReq {
    required BaseRequest BaseRequest = 1;
    optional string ToUserName = 2;
}

message GrantBigChatRoomResp {
    required BaseResponse BaseResponse = 1;
    required uint32 Quota = 2;
}

message ClickCommandRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ClickType = 2;
    optional string ClickInfo = 3;
    optional string BizUserName = 4;
}

message ClickCommandResponse {
    required BaseResponse BaseResponse = 1;
}

message ModSnsBlackList {
    optional string ContactUsername = 1;
    required uint32 ModType = 2;
}

message ModSnsNotInterestList {
    optional string ContactUsername = 1;
    required uint32 ModType = 2;
}

message DeleteSnsOldGroup {
    required uint32 GroupCount = 1;
    repeated uint64 GroupIds = 2 [packed = true];
}

message SubmsgSyncRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Selector = 2;
    required SKBuiltinBuffer_t KeyBuf = 3;
}

message SubmsgSyncResponse {
    required BaseResponse BaseResponse = 1;
    required CmdList CmdList = 2;
    required uint32 ContinueFlag = 3;
    required SKBuiltinBuffer_t KeyBuf = 4;
}

message NBSInfo {
    required uint32 NBSId = 1;
    optional string Summary = 2;
    required uint32 CardFlag = 3;
    required float Distance = 4;
    optional string Category = 5;
    required uint32 Rank = 6;
    required uint32 Status = 7;
}

message NBSConfigInfo {
    required uint32 ConfId = 1;
    required uint32 Type = 2;
    optional string Summary = 3;
}

message FindNBSRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 NBSType = 2;
    required PositionInfo UserPos = 3;
    required SKBuiltinBuffer_t PageBuff = 4;
}

message FindNBSResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NBSCount = 2;
    repeated NBSInfo NBSList = 3;
    required uint32 NBSConfigCount = 4;
    repeated NBSConfigInfo NBSConfigList = 5;
    required SKBuiltinBuffer_t PageBuff = 6;
}

message SearchNBSRequest {
    required BaseRequest BaseRequest = 1;
    optional string KeyWord = 2;
    optional string Tags = 3;
    optional string BizMarkets = 4;
    required PositionInfo UserPos = 5;
    required SKBuiltinBuffer_t PageBuff = 6;
}

message SearchNBSResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NBSCount = 2;
    repeated NBSInfo NBSList = 3;
    required SKBuiltinBuffer_t PageBuff = 4;
}

message GetNBSDetailRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 NBSId = 2;
}

message GetNBSDetailResponse {
    required BaseResponse BaseResponse = 1;
    optional string DetailInfo = 2;
    optional string CardInfo = 3;
}

message ShowcaseInfo {
    required uint32 ObjectId = 1;
    optional string Summary = 2;
}

message GetShowcaseInfoRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 NBSId = 2;
    required SKBuiltinBuffer_t PageBuff = 3;
}

message GetShowcaseInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ObjectCount = 2;
    repeated ShowcaseInfo ObjectList = 3;
    required SKBuiltinBuffer_t PageBuff = 4;
}

message GetObjectDetailRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 NBSId = 2;
    required uint32 ObjectId = 3;
}

message GetObjectDetailResponse {
    required BaseResponse BaseResponse = 1;
    optional string DetailInfo = 2;
}

message AppCommentRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Status = 2;
}

message AppCommentResponse {
    required BaseResponse BaseResponse = 1;
}

message WebWxLoginConfirmRequest {
    required BaseRequest BaseRequest = 1;
}

message WebWxLoginConfirmResponse {
    required BaseResponse BaseResponse = 1;
}

message SyncCheckResponse {
    optional string ErrMsg = 1;
    optional string Signature = 2;
}

message ListMFriendMobileInfo {
    optional string Value = 1;
    optional string UserName = 2;
    required uint32 Status = 3;
    optional string BigHeadImgUrl = 4;
    optional string SmallHeadImgUrl = 5;
    optional string NickName = 6;
    optional string AntispamTicket = 7;
}

message ListMFriendReq {
    required BaseRequest BaseRequest = 1;
    optional string Ticket = 2;
    required uint32 MobileCount = 3;
    repeated SKBuiltinString_t MobileList = 4;
    required uint32 EMailCount = 5;
    repeated SKBuiltinString_t EMailList = 6;
}

message ListMFriendResp {
    required BaseResponse BaseResponse = 1;
    optional string Ticket = 2;
    required uint32 MobileCount = 3;
    repeated ListMFriendMobileInfo MobileInfo = 4;
    required uint32 EMailCount = 5;
    repeated ListMFriendMobileInfo EMailInfo = 6;
}

message SendSmsToMFriendReq {
    required BaseRequest BaseRequest = 1;
    optional string Ticket = 2;
    required uint32 MobileCount = 3;
    repeated SKBuiltinString_t MobileList = 4;
}

message SendSmsToMFriendResp {
    required BaseResponse BaseResponse = 1;
}

message SendPhoto2FBWallRequest {
    required BaseRequest BaseRequest = 1;
    optional string Message = 2;
    optional string Picture = 3;
    optional string Link = 5;
    optional string Name = 4;
    optional string Description = 6;
    optional string Caption = 7;
}

message SendPhoto2FBWallResp {
    required BaseResponse BaseResponse = 1;
}

message SearchOrRecommendItem {
    required SKBuiltinString_t UserName = 1;
    required SKBuiltinString_t NickName = 2;
    required int32 Sex = 3;
    optional string Province = 4;
    optional string City = 5;
    optional string Signature = 6;
    optional uint32 PersonalCard = 7;
    optional uint32 VerifyFlag = 8;
    optional string VerifyInfo = 9;
    optional string Weibo = 10;
    optional string Alias = 11;
    optional string WeiboNickname = 12;
    optional uint32 WeiboFlag = 13;
    optional string Country = 14;
    optional CustomizedInfo CustomizedInfo = 15;
    optional string BigHeadImgUrl = 16;
    optional string SmallHeadImgUrl = 17;
}

message SearchOrRecommendBizRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t NickName = 2;
    required uint32 OpCode = 3;
    required uint32 EntryFlag = 4;
    required SKBuiltinBuffer_t ReqBuf = 5;
}

message SearchOrRecommendBizResp {
    required BaseResponse BaseResponse = 1;
    required uint32 BizCount = 2;
    repeated SearchOrRecommendItem BizList = 3;
    required uint32 ShowFlag = 4;
    required uint32 IsEnd = 5;
    required SKBuiltinBuffer_t ResBuf = 6;
}

message GroupRecommendBizRequest {
    required BaseRequest BaseRequest = 1;
}

message RecommendGroup {
    required SKBuiltinString_t GroupName = 1;
    required uint32 MemCount = 2;
    repeated SearchOrRecommendItem Members = 3;
}

message RecommendGroups {
    required uint32 GroupCount = 1;
    repeated RecommendGroup Groups = 2;
}

message GroupRecommendBizResp {
    required BaseResponse BaseResponse = 1;
    required RecommendGroups GroupList = 2;
}

message GeneralShareBaseInfo {
    required uint32 DestType = 1;
}

message GeneralShareContent {
    required uint32 contentType = 1;
    optional string Title = 2;
    optional string Content = 3;
    optional string Description = 4;
    optional string ImageUrl = 5;
    optional string LinkUrl = 6;
    optional string DataUrl = 7;
    optional string ExtInfo = 8;
}

message GeneralShareRequest {
    required BaseRequest BaseRequest = 1;
    required GeneralShareBaseInfo BaseInfo = 2;
    required GeneralShareContent Content = 3;
}

message GeneralShareResponse {
    required BaseResponse BaseResponse = 1;
}

message HardDeviceAttr {
    optional string BrandName = 1;
    optional string AuthKey = 2;
    optional string Mac = 3;
    optional string ConnProto = 4;
    optional uint32 ConnStrategy = 5;
    optional uint32 CloseStrategy = 6;
    optional int32 ManuMacPos = 7;
    optional int32 SerMacPos = 8;
    optional string HardDeviceAttrDesc = 9;
    optional string Alias = 10;
    optional string IconUrl = 11;
    optional string JumpUrl = 12;
    optional string DeviceTitle = 13;
    optional string DeviceDesc = 14;
    optional string Category = 15;
    optional uint32 DeviceTypeMainDevice = 16;
    optional uint32 isEnterMyDevice = 17;
    optional int64 bleSimpleProtocol = 18;
}

message ModHardDevice {
    required HardDevice HardDevice = 1;
    required HardDeviceAttr HardDeviceAttr = 2;
    required uint32 BindFlag = 3;
}

message HardDeviceMsg {
    required uint64 SessionID = 1;
    required uint32 CreateTime = 2;
    required SKBuiltinBuffer_t Buffer = 3;
    optional uint32 Type = 4;
}

message HardDeviceAuthRequest {
    required BaseRequest BaseRequest = 1;
    required HardDevice HardDevice = 2;
    required uint32 AuthVer = 3;
    required SKBuiltinBuffer_t AuthBuffer = 4;
}

message HardDeviceAuthResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t SessionKey = 2;
    required SKBuiltinBuffer_t SessionBuffer = 3;
    required SKBuiltinBuffer_t KeyBuffer = 4;
    required uint32 CacheTimeout = 5;
    required uint32 BlockTimeout = 6;
    required uint32 CryptMethod = 7;
}

message BindHardDeviceRequest {
    required BaseRequest BaseRequest = 1;
    optional string BindTicket = 4;
}

message BindHardDeviceResponse {
    required BaseResponse BaseResponse = 1;
    required HardDevice HardDevice = 2;
    required HardDeviceAttr HardDeviceAttr = 3;
    optional uint32 Flag = 4;
}

message SendHardDeviceMsgRequest {
    required BaseRequest BaseRequest = 1;
    required HardDevice HardDevice = 2;
    required HardDeviceMsg HardDeviceMsg = 3;
    required SKBuiltinBuffer_t SessionBuffer = 4;
}

message SendHardDeviceMsgResponse {
    required BaseResponse BaseResponse = 1;
}

message UnbindHardDeviceRequest {
    required BaseRequest BaseRequest = 1;
    required HardDevice HardDevice = 2;
    optional uint32 Flag = 4;
}

message UnbindHardDeviceResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 Flag = 4;
}

message GetBoundHardDevicesRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Version = 2;
}

message GetBoundHardDevicesResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated ModHardDevice DeviceList = 5;
    required uint32 Version = 6;
    required uint32 ContinueFlag = 7;
}

message SearchHardDeviceRequest {
    required BaseRequest BaseRequest = 1;
    optional string HardDeviceQRCode = 2;
}

message SearchHardDeviceResponse {
    required BaseResponse BaseResponse = 1;
    required ModContact Contact = 2;
    required HardDevice HardDevice = 3;
    required HardDeviceAttr HardDeviceAttr = 4;
    optional string BindTicket = 5;
}

message VoiceTransRes {
    required uint32 Sequence = 1;
    required uint32 EndFlag = 2;
    optional string Result = 3;
}

message UploadVoiceCtx {
    required uint32 TotalLen = 1;
    required uint32 StartPos = 2;
    required uint32 DataLen = 3;
}

message QueryResCtx {
    required uint32 Interval = 1;
}

message VoiceAttr {
    required int32 FileType = 1;
    required int32 EncodeType = 2;
    required int32 SampleRate = 3;
    required int32 BitsPerSample = 4;
}

message CheckVoiceTransRequest {
    required BaseRequest BaseRequest = 1;
    optional string VoiceId = 2;
    required uint32 TotalLen = 3;
    optional uint32 MsgId = 4;
    optional VoiceAttr VoiceAttr = 5;
    optional uint64 NewMsgId = 6;
}

message CheckVoiceTransResponse {
    required BaseResponse BaseResponse = 1;
    required int32 Status = 2;
    required VoiceTransRes TransRes = 3;
    required UploadVoiceCtx UploadCtx = 4;
    required QueryResCtx QueryCtx = 5;
    required uint32 NotifyId = 6;
}

message UploadVoiceForTransRequest {
    required BaseRequest BaseRequest = 1;
    optional string VoiceId = 2;
    required VoiceAttr VoiceAttr = 3;
    required UploadVoiceCtx UploadCtx = 4;
    required SKBuiltinBuffer_t Data = 5;
}

message UploadVoiceForTransResponse {
    required BaseResponse BaseResponse = 1;
    required UploadVoiceCtx UploadCtx = 2;
}

message GetVoiceTransResRequest {
    required BaseRequest BaseRequest = 1;
    optional string VoiceId = 2;
}

message GetVoiceTransResResponse {
    required BaseResponse BaseResponse = 1;
    required VoiceTransRes TransRes = 2;
    required QueryResCtx QueryCtx = 3;
}

message WhatsNewsRequest {
    required BaseRequest BaseRequest = 1;
}

message WhatsNewsResponse {
    required BaseResponse BaseResponse = 1;
    optional uint32 RegistTime = 2;
    optional uint32 FstSNSTime = 3;
    optional uint32 Count = 4;
    repeated SKBuiltinString_t PicUrlList = 5;
}

message CommVerifyUserTicket {
    required uint32 TicketType = 1;
    required uint32 Source = 2;
    required uint32 FromUin = 3;
    required uint32 ToUin = 4;
    required SKBuiltinString_t ExtInfo = 5;
    required uint32 TimeStamp = 6;
    optional uint32 FriendFlag = 7;
}

message TranslateOrgMsg {
    required uint32 ClientMsgID = 1;
    optional string TextMsg = 2;
    optional string ChatRoomID = 3;
    optional uint32 Scene = 4;
}

message TranslatedMsg {
    required uint32 ClientMsgID = 1;
    optional string TranslatedText = 2;
    required int32 Ret = 3;
    optional string BrandWording = 4;
}

message GetTransTextRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 MsgCount = 2;
    repeated TranslateOrgMsg MsgList = 3;
}

message GetTransTextResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 MsgCount = 2;
    repeated TranslatedMsg MsgList = 3;
    optional string ToLang = 4;
}

message TVTopicCommentItem {
    optional string UserName = 1;
    optional string NickName = 2;
    optional string BigHeadUrl = 3;
    optional string SmallHeadUrl = 4;
    required uint32 TimeStamp = 5;
    optional string Content = 6;
    required uint32 CommentId = 7;
}

message GetTVTopicCommentRequest {
    required BaseRequest BaseRequest = 1;
    optional string TVTopic = 2;
    required uint32 LastCommentId = 3;
}

message GetTVTopicCommentResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Count = 2;
    repeated TVTopicCommentItem List = 3;
    required uint32 LastCommentId = 4;
    required uint32 TotalCommentCount = 5;
    required uint32 LeftCommentCount = 6;
}

message PostTVTopicCommentRequest {
    required BaseRequest BaseRequest = 1;
    optional string TVTopic = 2;
    optional string Content = 3;
}

message PostTVTopicCommentResponse {
    required BaseResponse BaseResponse = 1;
}

message IBeaconBoardcastRequest {
    required BaseRequest BaseRequest = 1;
    optional string BizUsername = 2;
    optional string Content = 3;
}

message IBeaconNotification {
    required int32 Result = 1;
    optional string Tips = 2;
    optional string Message = 3;
}

message IBeaconBoardcastResponse {
    required BaseResponse BaseResponse = 1;
    optional IBeaconNotification Notification = 2;
}

message RealTimeKVReportReq {
    required BaseRequest BaseRequest = 1;
    optional string DeviceModel = 2;
    optional string DeviceBrand = 3;
    optional string OsName = 4;
    optional string OsVersion = 5;
    optional string LanguageVer = 6;
    required uint32 LogID = 7;
    optional string Value = 8;
}

message RealTimeKVReportResp {
    required BaseResponse BaseResponse = 1;
}

message VoiceAddrRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required SKBuiltinBuffer_t Data = 3;
    required uint32 Offset = 4;
    optional string ClientVoiceId = 5;
    required uint32 EndFlag = 6;
    required uint32 SamplePerSec = 7;
    required uint32 BitsPerSample = 8;
    required uint32 VoiceEncodeType = 9;
    required uint32 FileType = 10;
    optional uint32 SearchType = 11;
    optional uint32 ExtraNameCount = 12;
    repeated SKBuiltinString_t ExtraNameUserNameList = 13;
    repeated SKBuiltinBuffer_t ExtraNameRemarkNameList = 14;
}

message VoiceAddrResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 EndFlag = 2;
    required int32 UserCount = 3;
    repeated SKBuiltinString_t UserNameList = 4;
    optional string ReportFiled = 5;
}

message VoiceAddrReportRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 HitPos = 2;
    optional string HitUserName = 3;
}

message VoiceAddrReportResponse {
    required BaseResponse BaseResponse = 1;
}

message ScanBarcodeRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
    optional string Barcode = 3;
    optional uint32 Scene = 4;
}

message ScanBarcodeResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Type = 2;
    optional string DescXML = 3;
}

message ScanImageRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ClientScanID = 2;
    required SKBuiltinBuffer_t ImageBuffer = 3;
    required uint32 TotalLength = 4;
    required uint32 Offset = 5;
    required uint32 EndFlag = 6;
    required uint32 ImageType = 7;
    optional uint32 OPCode = 8;
    optional uint32 SessionID = 9;
}

message ScanImageResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ClientScanID = 2;
    required uint32 Type = 3;
    optional string DescriptionXML = 4;
    required uint32 EndFlag = 5;
    required uint32 ImageType = 6;
}

message GetProductInfoRequest {
    required BaseRequest BaseRequest = 1;
    optional string ProductID = 2;
    required uint32 Scene = 3;
    optional string QrUrl = 4;
}

message GetProductInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Type = 2;
    optional string DescXML = 3;
    optional string ProductID = 4;
}

message OCRTranslationRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ClientScanID = 2;
    required SKBuiltinBuffer_t ImageBuffer = 3;
    required uint32 ImageType = 4;
    optional string FromLanguage = 5;
    optional string ToLanguage = 6;
    optional uint32 SessionID = 7;
}

message OCRTranslationResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 ClientScanID = 2;
    optional string Source = 3;
    optional string Translation = 4;
    required uint32 ImageType = 5;
}

message ShakeTVRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t Data = 2;
    required uint32 DataId = 3;
    required uint32 EndFlag = 4;
    required float VoiceLen = 5;
    required uint32 NetType = 6;
    required uint32 SdkVersion = 7;
}

message ShakeTVResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 EndFlag = 2;
    required uint32 Type = 3;
    optional string DescriptionXML = 4;
}

message GetTVInfoRequest {
    required BaseRequest BaseRequest = 1;
    optional string TVID = 2;
    required uint32 Scene = 3;
}

message GetTVInfoResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 Type = 2;
    optional string DescriptionXML = 3;
    optional string TVID = 4;
}

message ShakeMusicRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinBuffer_t Data = 2;
    required uint32 DataId = 3;
    required uint32 EndFlag = 4;
    required float VoiceLen = 5;
    required uint32 NetType = 6;
    required uint32 SdkVersion = 7;
}

message ShakeMusicResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 EndFlag = 2;
    required uint32 MusicId = 3;
    required float Offset = 4;
    required SKBuiltinBuffer_t SongName = 5;
    required SKBuiltinBuffer_t SongSinger = 6;
    required SKBuiltinBuffer_t SongAlbum = 7;
    required SKBuiltinBuffer_t SongAlbumUrl = 8;
    required SKBuiltinBuffer_t SongWifiUrl = 9;
    required SKBuiltinBuffer_t SongWapLinkUrl = 10;
    required SKBuiltinBuffer_t SongWebUrl = 11;
    required SKBuiltinBuffer_t SongLyric = 12;
    optional uint32 ResultType = 13;
    optional uint32 TVType = 14;
    optional string TVDescriptionXML = 15;
}

message GetQQMusicLyricRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 SongId = 2;
    required SKBuiltinBuffer_t Url = 3;
}

message GetQQMusicLyricResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t SongLyric = 2;
}

message UploadInputVoiceRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required SKBuiltinBuffer_t Data = 3;
    required uint32 Offset = 4;
    optional string ClientVoiceId = 5;
    required uint32 EndFlag = 6;
    required uint32 SamplePerSec = 7;
    required uint32 BitsPerSample = 8;
    required uint32 VoiceEncodeType = 9;
    required uint32 FileType = 10;
}

message UploadInputVoiceResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 EndFlag = 2;
    required SKBuiltinBuffer_t Text = 3;
}

message VoicePieceCtx {
    required uint32 StartPos = 1;
    required uint32 PieceLen = 2;
    required uint32 PieceFlag = 3;
    required SKBuiltinBuffer_t PieceData = 4;
}

message ResourceCtx {
    required uint32 ResId = 1;
    required SKBuiltinBuffer_t ResData = 2;
}

message GetVoicePrintResourceRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ResScence = 2;
    optional string VerifyTicket = 3;
}

message GetVoicePrintResourceResponse {
    required BaseResponse BaseResponse = 1;
    required ResourceCtx ResourceData = 2;
}

message GetVoicePrintResourceRsaRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 ResScence = 2;
    optional string VerifyTicket = 3;
    required SKBuiltinBuffer_t RandomEncryKey = 4;
}

message GetVoicePrintResourceRsaResponse {
    required BaseResponse BaseResponse = 1;
    required ResourceCtx ResourceData = 2;
}

message RegisterVoicePrintRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Step = 2;
    required uint32 VoiceTicket = 3;
    required VoicePieceCtx PieceData = 4;
    required uint32 ResId = 5;
}

message RegisterVoicePrintResponse {
    required BaseResponse BaseResponse = 1;
    required int32 ResgisterRet = 2;
    required uint32 NextStep = 3;
    required VoicePieceCtx NextPiece = 4;
    required uint32 VoiceTicket = 5;
}

message VerifyVoicePrintRequest {
    required BaseRequest BaseRequest = 1;
    required VoicePieceCtx Piece = 2;
    required uint32 VoiceTicket = 3;
    required uint32 ResId = 4;
    optional string VerifyTicket = 5;
}

message VerifyVoicePrintResponse {
    required BaseResponse BaseResponse = 1;
    required VoicePieceCtx NextPiece = 2;
    required uint32 Result = 3;
    required uint32 VoiceTicket = 4;
}

message VerifyVoicePrintRsaRequest {
    required BaseRequest BaseRequest = 1;
    required VoicePieceCtx Piece = 2;
    required uint32 VoiceTicket = 3;
    required uint32 ResId = 4;
    optional string VerifyTicket = 5;
    required SKBuiltinBuffer_t RandomEncryKey = 6;
}

message VerifyVoicePrintRsaResponse {
    required BaseResponse BaseResponse = 1;
    required VoicePieceCtx NextPiece = 2;
    required uint32 Result = 3;
    required uint32 VoiceTicket = 4;
    optional string AuthPwd = 5;
}

message SwitchOpVoicePrintRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 opcode = 2;
}

message SwitchOpVoicePrintResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 UserSwitch = 2;
    required uint32 UserStatus = 3;
}

message GetVoiceprintTicketRsaRequest {
    required BaseRequest BaseRequest = 1;
    optional string UserName = 2;
    required uint32 GetScence = 3;
    required SKBuiltinBuffer_t RandomEncryKey = 4;
}

message GetVoiceprintTicketRsaResponse {
    required BaseResponse BaseResponse = 1;
    optional string VoiceprintTicket = 2;
    optional BuiltinIPList BuiltinIPList = 3;
    optional HostList NewHostList = 4;
    optional NetworkControl NetworkControl = 5;
}

message VoipRelayData {
    required int32 Type = 1;
    required SKBuiltinBuffer_t Buffer = 2;
}

message VoipAddr {
    required int32 Ip = 1;
    required int32 Port = 2;
}

message VoipAddrSet {
    required int32 Cnt = 1;
    repeated VoipAddr Addrs = 2;
}

message VoipMultiRelayData {
    required VoipRelayData PeerId = 1;
    required VoipRelayData CapInfo = 2;
    required int32 SendingType = 3;
    optional VoipAddrSet VoipSvrAddr = 4;
    optional VoipAddrSet PunchSvrAddr = 5;
    optional int32 VoipNetQuality = 6;
    optional int32 LinkDisconnectHbInterval = 7;
    optional int32 LinkDisconnectHbCnt = 8;
    optional uint32 ProtocolEncryptLength = 9;
    optional SKBuiltinBuffer_t ClientHeadSigns = 10;
    optional uint32 OppositeClientVersion = 11;
    optional VoipAddrSet TcpSvrAddr = 12;
    optional int32 ARQStrategy = 13;
    optional int32 ARQCacheLen = 14;
    optional int32 ARQRttThreshold = 15;
    optional int32 ARQUsedRateThreshold = 16;
    optional int32 ARQRespRateThreshold = 17;
    optional int32 EncryptStrategy = 18;
    optional int32 FECSvrCtr = 19;
    optional SKBuiltinBuffer_t FECKeyPara1 = 20;
    optional SKBuiltinBuffer_t FECKeyPara2 = 21;
    optional int32 QosStrategy = 22;
    optional SKBuiltinBuffer_t EncryptKeyBuf = 23;
    optional uint32 OppositeDeviceType = 24;
}

message VoipStatReportData {
    required SKBuiltinString_t StatReport = 1;
}

message VoipNetQuality {
    required int32 Type = 1;
    required int32 Begin = 2;
    required int32 End = 3;
    required int32 HitCnt = 4;
}

message VoipInviteRemindReq {
    required BaseRequest BaseRequest = 1;
    required uint32 ListCount = 2;
    repeated SKBuiltinString_t ToUserNameList = 3;
    optional uint32 InviteType = 4;
}

message VoipInviteRemindResp {
    required BaseResponse BaseResponse = 1;
}

message VoipInviteReq {
    required BaseRequest BaseRequest = 1;
    optional string FromUsername = 2;
    required int32 InviteUserCount = 3;
    repeated SKBuiltinString_t ToUsernameList = 4;
    required VoipRelayData PeerId = 6;
    required VoipRelayData CapInfo = 7;
    required int32 NetType = 8;
    required int32 CallType = 9;
    optional int32 RoomId = 10;
    optional int64 RoomKey = 11;
    optional uint32 InviteType = 12;
    optional uint64 Timestamp64 = 13;
    optional int32 HDVideo = 14;
    optional uint32 InviteId = 15;
}

message VoipInviteResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int32 AddrCount = 3;
    repeated VoipAddr AddrList = 4;
    required int64 RoomKey = 5;
    required int32 RoomMemberId = 6;
    optional VoipMultiRelayData RelayData = 7;
    optional int32 NetQualityCnt = 8;
    repeated VoipNetQuality NetQualityList = 9;
    optional int32 AudioTsdfBeyond3G = 10;
    optional int32 AudioTsdfEdge = 11;
    optional int32 PassthroughQosAlgorithm = 12;
    optional int32 FastPlayRepair = 13;
    optional int32 VoipSyncInterval = 14;
    optional int32 NewP2S = 15;
    optional int32 AudioDTX = 16;
    optional uint32 TcpCnt = 17;
    optional uint32 SwitchInterval = 18;
    optional int32 Hw264SvrCfg = 19;
    optional int32 AudioEnableRmioAndS3A = 20;
    optional int32 AudioEnableSpkec = 21;
}

message VoipCancelInviteReq {
    required BaseRequest BaseRequest = 1;
    optional string FromUsername = 2;
    required int32 RoomId = 3;
    required int64 RoomKey = 4;
    optional string ToUserName = 6;
    required VoipStatReportData ReportData = 8;
    optional uint32 InviteType = 9;
    optional uint64 Timestamp64 = 10;
    optional uint32 InviteId = 11;
}

message VoipCancelInviteResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
}


message VoipAnswerReq {
    required BaseRequest BaseRequest = 1;
    optional string FromUsername = 2;
    required int32 RoomId = 3;
    required int32 Answer = 4;
    optional VoipRelayData PeerId = 5;
    optional VoipRelayData CapInfo = 6;
    required int64 RoomKey = 7;
    required int32 NetType = 8;
    optional uint64 Timestamp64 = 9;
    optional int32 OnlyAudio = 10;
}

message VoipAnswerResp {
    required BaseResponse BaseResponse = 1;
    required int32 AddrCount = 2;
    repeated VoipAddr AddrList = 3;
    required int32 RoomId = 4;
    required int64 RoomKey = 5;
    required int32 RoomMemberID = 6;
    required VoipMultiRelayData RelayData = 7;
    optional int32 NetQualityCnt = 8;
    repeated VoipNetQuality NetQualityList = 9;
    optional int32 AudioTsdfBeyond3G = 10;
    optional int32 AudioTsdfEdge = 11;
    optional int32 PassthroughQosAlgorithm = 12;
    optional int32 FastPlayRepair = 13;
    optional int32 NewP2S = 14;
    optional int32 AudioDTX = 15;
    optional uint32 TcpCnt = 16;
    optional uint32 SwitchInterval = 17;
    optional int32 Hw264SvrCfg = 18;
    optional int32 AudioEnableRmioAndS3A = 19;
    optional int32 AudioEnableSpkec = 20;
}

message VoipShutDownReq {
    required BaseRequest BaseRequest = 1;
    optional string FromUsername = 2;
    required int32 RoomId = 3;
    required int64 RoomKey = 4;
    required VoipStatReportData ReportData = 5;
    optional uint64 Timestamp64 = 6;
    optional uint32 Duration = 7;
}

message VoipShutDownResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
}

message VoipCmdItem {
    required int32 CmdId = 1;
    required SKBuiltinBuffer_t CmdBuf = 2;
    optional string FromUserName = 3;
}

message VoipCmdList {
    required uint32 Count = 1;
    repeated VoipCmdItem List = 2;
}

message VoipSyncReq {
    required BaseRequest BaseRequest = 1;
    optional string FromUsername = 2;
    required int32 RoomId = 3;
    required SKBuiltinBuffer_t KeyBuf = 4;
    required VoipCmdList OpLog = 5;
    required int64 RoomKey = 6;
    required int32 Selector = 7;
    optional uint64 Timestamp64 = 8;
}

message VoipHeartBeatReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional uint32 Timestamp = 4;
    optional uint64 Timestamp64 = 5;
    optional int32 ConnectionType = 6;
}

message VoipHeartBeatResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional uint32 Timestamp = 4;
}

message VoipSyncResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 3;
    required SKBuiltinBuffer_t KeyBuf = 4;
    required VoipCmdList CmdList = 5;
    required int32 ContinueFlag = 7;
    required int64 RoomKey = 8;
}


message VoipStatusItem {
    optional string Username = 1;
    required int32 Status = 2;
}


message VoipGetRoomInfoReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional string CallerUserName = 4;
    optional uint32 Type = 5;
    optional uint64 Timestamp64 = 6;
}

message VoipGetRoomInfoResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    required uint32 CreateTime = 4;
    required int32 MemberCount = 6;
    repeated VoipStatusItem MemberStatus = 7;
    optional string CallerUserName = 8;
    optional uint32 InviteType = 9;
}

message VoipAckReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional string FromUsername = 4;
    optional int32 PreConnect = 5;
    optional VoipRelayData PeerId = 6;
    optional VoipRelayData CapInfo = 7;
    optional int32 NetType = 8;
    optional string CallerName = 9;
    optional int32 AckStatus = 10;
    optional uint64 Timestamp64 = 11;
}

message VoipAckResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    optional int32 RoomMemberID = 4;
    optional VoipMultiRelayData RelayData = 5;
    optional int32 PreConnect = 6;
    optional uint32 TcpCnt = 7;
    optional int32 AudioEnableRmioAndS3A = 8;
}


message VoipStatReportReq {
    required BaseRequest BaseRequest = 1;
    required VoipStatReportData ReportData = 2;
    optional VoipStatReportData ChannelReportData = 3;
    optional VoipStatReportData DialReportData = 4;
    optional VoipStatReportData EngineReportData = 5;
    optional uint64 Timestamp64 = 6;
    optional VoipStatReportData EngineExtReportData = 7;
}

message VoipStatReportResp {
    required BaseResponse BaseResponse = 1;
}

message VoipCompleteStatus {
    required int32 CmdId = 1;
    required uint32 Uin = 2;
    required uint32 Key = 3;
    required SKBuiltinBuffer_t Buffer = 4;
}

message VoipCompleteStatusList {
    required int32 Count = 1;
    repeated VoipCompleteStatus CompleteStatus = 2;
    required uint32 Seq = 3;
}

message VoipRedirectReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    required int32 RoomMemberId = 4;
}

message VoipRedirectResp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int32 RelayAddrCount = 3;
    repeated VoipAddr RelayAddrList = 4;
    required int32 PunchAddrCount = 5;
    repeated VoipAddr PunchAddrList = 6;
    required int64 RoomKey = 7;
    required int32 RoomMemberId = 8;
    optional int32 TcpAddrCount = 9;
    repeated VoipAddr TcpAddrList = 10;
}

message VoipDoubleLinkSwitchReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    required int32 RoomMemberId = 4;
    required int32 CurLinkType = 5;
    required int32 IsRelayConnReady = 6;
    required int32 IsDirectConnReady = 7;
    required int32 CurStrategy = 8;
    required int32 BufferVersion = 9;
    required SKBuiltinBuffer_t Buffer = 10;
}

message VoipDoubleLinkSwitchRsp {
    required BaseResponse BaseResponse = 1;
    required int32 RoomId = 2;
    required int64 RoomKey = 3;
    required int32 RoomMemberId = 4;
    required int32 ReportFlag = 5;
    required int32 SwitchToLinkType = 6;
}

message VoipSpeedTestReq {
    required BaseRequest BaseRequest = 1;
    required int32 RoomId = 2;
    required uint32 CallType = 3;
    required uint32 NetType = 4;
    required uint32 IsConnecting = 5;
    required uint32 IsConnected = 6;
    required uint32 C2CLossrate = 7;
    required uint32 C2CRttCnt = 8;
    repeated uint32 C2CRtt = 9 [packed = true];
    required uint32 C2SDownLossRate = 10;
    required uint32 C2SRttCnt = 11;
    repeated uint32 C2SRtt = 12 [packed = true];
    required uint32 SendPkts = 13;
    required uint32 RcvPkts = 14;
}

message SpeedTestSvr {
    required VoipAddr Addr = 1;
    required uint32 TestCnt = 2;
    required uint32 TestGap = 3;
    required uint32 Timeout = 4;
    required uint32 PktSize = 5;
}

message VoipSpeedTestRsp {
    required BaseResponse BaseResponse = 1;
    required uint32 NeedTest = 2;
    required uint64 TestId = 3;
    required uint32 SvrListCnt = 4;
    repeated SpeedTestSvr SvrList = 5;
}

message SpeedResult {
    required uint32 ClientIp = 1;
    required uint32 TestPktSize = 2;
    required uint32 TestCnt = 3;
    required VoipAddr Addr = 4;
    required uint32 AvgRtt = 5;
    required uint32 MinRtt = 6;
    required uint32 MaxRtt = 7;
    required uint32 RttCnt = 8;
    repeated uint32 Rtt = 9 [packed = true];
    required uint32 DownSeqCnt = 10;
    repeated uint32 DownSeq = 11 [packed = true];
    required uint32 UpSeqCnt = 12;
    repeated uint32 UpSeq = 13 [packed = true];
}

message VoipSpeedResultReq {
    required BaseRequest BaseRequest = 1;
    required uint64 TestId = 2;
    required uint64 RoomKey = 3;
    required uint32 NetType = 4;
    required SKBuiltinString_t NetName = 5;
    required SKBuiltinString_t WifiName = 6;
    required double Longitude = 7;
    required double Latitude = 8;
    required uint32 RoomId = 9;
    required uint32 ResultCnt = 10;
    repeated SpeedResult Result = 11;
}

message VoipSpeedResultRsp {
    required BaseResponse BaseResponse = 1;
}

message HWParamBuffer {
    required uint32 HeaderLen = 1;
    required bytes SPSBuf = 2;
    required bytes PPSBuf = 3;
}

message HWTimeInfo {
    required int64 DurTimeValue = 1;
    required int32 DurTimeScale = 2;
    required int64 PresentTimeValue = 3;
    required int32 PresentTimeScale = 4;
    required int64 DecodeTimeValue = 5;
    required int32 DecodeTimeScale = 6;
}

message HWFrameBuffer {
    required bytes RawBuf = 1;
    required int32 SamplesCount = 2;
    repeated HWTimeInfo TimeInfo = 3;
    repeated int32 SampleSize = 4;
}

message VOIPRUDPCmd {
    required int32 CmdType = 1;
    optional bytes CmdBuffer = 2;
}

message GetQRCodeRequest {
    required BaseRequest BaseRequest = 1;
    required SKBuiltinString_t UserName = 2;
    required uint32 Style = 3;
}

message GetQRCodeResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t QRCode = 2;
    required uint32 Style = 5;
    optional string FooterWording = 6;
}

message RevokeChatRoomQRCodeRequest {
    required BaseRequest BaseRequest = 1;
    optional string QRCode = 2;
    optional string ChatRoomUserName = 3;
}

message RevokeChatRoomQRCodeResponse {
    required BaseResponse BaseResponse = 1;
}

message SendQRCodeByEmailReq {
    required BaseRequest BaseRequest = 1;
    optional string QRCodeUserName = 2;
    required uint32 ToCount = 3;
    repeated SKBuiltinString_t ToList = 4;
    optional string Tittle = 5;
    optional string Content = 6;
}

message SendQRCodeByEmailResp {
    required BaseResponse BaseResponse = 1;
}

message GetCardRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 Type = 2;
}

message GetCardResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t Image = 2;
}

message HeartBeatRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 TimeStamp = 2;
    optional SKBuiltinBuffer_t KeyBuf = 3;
    optional SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
    optional uint32 Scene = 5;
}

message HeartBeatResponse {
    required BaseResponse BaseResponse = 1;
    required uint32 NextTime = 2;
    optional uint32 Selector = 3;
    optional SKBuiltinBuffer_t BlueToothBroadCastContent = 4;
}

message GetCliDBEncryptInfoRequest {
    required BaseRequest BaseRequest = 1;
    required uint32 CertVersion = 2;
    required SKBuiltinBuffer_t CliDBEncryptKey = 3;
    required SKBuiltinBuffer_t CliDBEncryptInfo = 4;
}

message GetCliDBEncryptInfoResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t CliDBEncryptKey = 2;
    required SKBuiltinBuffer_t CliDBEncryptInfo = 3;
}

message GetImUnreadMsgCountRequest {
    required BaseRequest BaseRequest = 1;
}

message GetImUnreadMsgCountResponse {
    required BaseResponse BaseResponse = 1;
    optional string DisplayMsg = 2;
    optional string QQScheme = 3;
    optional string DownloadUrl = 4;
}

message GetLocImgRequest {
    required BaseRequest BaseRequest = 1;
    required float Longitude = 2;
    required float Latitude = 3;
    required uint32 Width = 4;
    required uint32 Height = 5;
    optional string Language = 6;
    required uint32 MapType = 7;
    required uint32 ZoomLevel = 8;
}

message GetLocImgResponse {
    required BaseResponse BaseResponse = 1;
    required SKBuiltinBuffer_t ImgBuf = 2;
}

message GetWeChatOutCouponsRequest {
    required BaseRequest BaseRequest = 1;
}

message GetWeChatOutCouponsResponse {
    required BaseResponse BaseResponse = 1;
    optional string Coupons = 2;
}



